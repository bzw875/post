{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"source/edit-time.sh","path":"edit-time.sh","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/edit-time.sh","hash":"ab7e0d0b79bd996f99a5aa3c3b9f3deee13917fb","modified":1700054503528},{"_id":"source/.DS_Store","hash":"7c5028f8ce0d1f8e829647962339a6a7e924814d","modified":1700052611360},{"_id":"source/_posts/.DS_Store","hash":"c03c896291f5fe808bcb83db883923389d94d283","modified":1709214490947},{"_id":"source/_posts/8-bit-float.md","hash":"35cae8696172c853ecfc808ccbc5f765668e729d","modified":1700054503523},{"_id":"source/_posts/XSS-attack.md","hash":"76adfc1fbf316fe099fb1e0bc78468a78ebd9348","modified":1700054503524},{"_id":"source/_posts/about-blog.md","hash":"b3d5aa606faf1da3f73b74bb526fdb46fe9f886f","modified":1700054503524},{"_id":"source/_posts/cache-static-file.md","hash":"e148011a027ddc63a033bb441f63fdd27167b778","modified":1700054503524},{"_id":"source/_posts/csapp-homework.md","hash":"4273cd45f448be774b309bde933c8b9f55b6e7d7","modified":1700054503525},{"_id":"source/_posts/common-algorithm.md","hash":"2b3ed380d3eecaa04b0bfd2e61ef4ef9c7db6967","modified":1721542178268},{"_id":"source/_posts/code-specifications.md","hash":"ed052912eb02ba52a087f9cc5c6d9c88b49309b0","modified":1700054503524},{"_id":"source/_posts/css-tutorial.md","hash":"de5e07801183836f86936feb957187a66fdec287","modified":1700054503526},{"_id":"source/_posts/game-of-life.md","hash":"2306adc5c637674ea7017871918e46f18c04b0d8","modified":1700054503526},{"_id":"source/_posts/html-tutorial.md","hash":"39414624416f9325884c201dbb232aaeaa2a070b","modified":1700054503527},{"_id":"source/_posts/readed-book.md","hash":"c2a94cd05bdc0d0a58dbbe32ab4eec7d6b5c5622","modified":1700054503527},{"_id":"source/_posts/use-forever.md","hash":"04cdc2287099c37c7adb218c02d7b88bf8e39410","modified":1700054503527},{"_id":"source/_posts/website-unuse.md","hash":"d06b3a566e1041a10e4f3e7b3593cc63f7d329ea","modified":1700054503527},{"_id":"source/_posts/javascript-tutorial.md","hash":"3af9de4dfd0b8d31478dac56f3e25f2bc3602175","modified":1700054503527},{"_id":"source/_posts/websocket.md","hash":"e8d2343b791a37ee018213effc6eb6f531e68bf4","modified":1700054503528},{"_id":"source/_posts/int-to-binary.md","hash":"f7d51474d4d41377c904d30b8cd66e8f92b05253","modified":1700961478916},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1699944456500},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1699944456501},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1673616536007},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1699944456509},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1699944456511},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699944456509},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1699944456513},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1699944456512},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699944456509},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1699944456512},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699944456509},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1699944456515},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1699944456514},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1699944456515},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1699944456517},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1699944456517},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1699944456514},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1699944456518},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1699944456518},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1673616536092},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1673616536063},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1673616536091},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1699944456484},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1699944456486},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1673616536023},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1699944456491},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1673616536025},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1699944456491},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1699944456502},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1673616536023},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1673616536023},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1699944456508},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1699944456500},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1673616536024},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1673616536023},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1699944456503},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1699944456505},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1699944456505},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1673616536077},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1673616536076},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1673616536065},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1699944456499},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673616536062},{"_id":"public/2023/11/25/int-to-binary/index.html","hash":"9daf8cad25d7d04648a282cb76a297d70b3f5742","modified":1721543975279},{"_id":"public/2023/11/15/javascript-tutorial/index.html","hash":"1a665c99f5687bb98fa0ba8ac3c9ce7deb64ca33","modified":1721543975279},{"_id":"public/2023/11/15/readed-book/index.html","hash":"665df98c0d98bfa99ca33c1179034cdbe4cb40e9","modified":1721543975279},{"_id":"public/2023/11/15/use-forever/index.html","hash":"90b91dc23615234e7fac199f79b17d3752ff86e2","modified":1721543975279},{"_id":"public/2023/11/15/website-unuse/index.html","hash":"84ba99a9ca5176f7d106375587c8c14b23118dda","modified":1721543975279},{"_id":"public/2023/11/15/websocket/index.html","hash":"2c7e8f58cdca8fd379dc52f3622f1025f1818a39","modified":1721543975279},{"_id":"public/2023/11/15/game-of-life/index.html","hash":"f7f2cd66ccb4f2ca7437696c8cd5ecf85a07867d","modified":1721543975279},{"_id":"public/2023/11/15/html-tutorial/index.html","hash":"642f96a8b8242b42867c1ffdf237d1b360b5e06f","modified":1721543975279},{"_id":"public/2023/11/15/csapp-homework/index.html","hash":"c0ad0046b8d2259a1f73fc188ff91e5e7497bd90","modified":1721543975279},{"_id":"public/2023/11/15/css-tutorial/index.html","hash":"993937226733ed14886ceb27d21b862346532116","modified":1721543975279},{"_id":"public/2023/11/15/about-blog/index.html","hash":"45785ccbce9472b0a66e6324b743657a0346180a","modified":1721543975279},{"_id":"public/2023/11/15/cache-static-file/index.html","hash":"3c09f0b7fac0508f885fcbe1029e19f03c8b7267","modified":1721543975279},{"_id":"public/2023/11/15/code-specifications/index.html","hash":"a9057898b6ee9418000d41785750f70d5256f036","modified":1721543975279},{"_id":"public/2023/11/15/common-algorithm/index.html","hash":"df0f1993c3865331b39657ef344f2d49d1a79ab3","modified":1721543975279},{"_id":"public/2023/11/15/8-bit-float/index.html","hash":"e6d109349f54a6e30c99044bfa0b03e777962f71","modified":1721543975279},{"_id":"public/2023/11/15/XSS-attack/index.html","hash":"d6c29c11dd157ea23f7760d5a1965f51ce26431b","modified":1721543975279},{"_id":"public/archives/index.html","hash":"7cc0d802b461280e62c09731c1d4322c9799fc3a","modified":1721543975279},{"_id":"public/archives/page/2/index.html","hash":"b43de0d9f3d78c37a21fc71d67e68b85ce919d30","modified":1721543975279},{"_id":"public/archives/2023/index.html","hash":"ddfba67d49ac706a138722a8cd5d268a992010d7","modified":1721543975279},{"_id":"public/archives/2023/page/2/index.html","hash":"f0da44df8279b98cf792db5465fb0b4c8b2fa3ea","modified":1721543975279},{"_id":"public/archives/2023/11/index.html","hash":"0da1e1fbbb5f3793262c67a8a3f27caa11aaf1c5","modified":1721543975279},{"_id":"public/archives/2023/11/page/2/index.html","hash":"dcce1e8712aa6c919a00381b677b01ff0441be9e","modified":1721543975279},{"_id":"public/index.html","hash":"401f8f434aaf1ed832a3ad028d731ea7e1eeef7b","modified":1721543975279},{"_id":"public/page/3/index.html","hash":"65d96a3c6911b981fbbd163a6cd0679d13ab3b3c","modified":1721543975279},{"_id":"public/page/5/index.html","hash":"1c6213f74e419e19f2619d7f4b06b54ff6ddba58","modified":1721543975279},{"_id":"public/page/2/index.html","hash":"15fcfa13366b14dc9856212d8c5c91b57366688b","modified":1721543975279},{"_id":"public/page/6/index.html","hash":"bf018f16d8fbb92c3df1f27cd619fe1c69cc439c","modified":1721543975279},{"_id":"public/page/4/index.html","hash":"3e028d5af8c870a990777014638c0f8e35516786","modified":1721543975279},{"_id":"public/page/8/index.html","hash":"e43237bd3532c69abd684d93cd8591fb85f415c8","modified":1721543975279},{"_id":"public/page/7/index.html","hash":"dd8c6d6cce560d8b7bfaef7b389fe4689cf726a2","modified":1721543975279},{"_id":"public/page/9/index.html","hash":"47d816ef77f09617975eee000b82a52a93054555","modified":1721543975279},{"_id":"public/page/10/index.html","hash":"de29f57921a1532e9caa9f3c103d7ace21a076bc","modified":1721543975279},{"_id":"public/page/11/index.html","hash":"1ce5bd9fbc4f87732e299024561374a06061b79a","modified":1721543975279},{"_id":"public/page/12/index.html","hash":"9f7fca268151d3c89c07ad1907de1a491b3ec5df","modified":1721543975279},{"_id":"public/page/14/index.html","hash":"67bdfdc07d87640591d06b0b79bd1109ad5afa0b","modified":1721543975279},{"_id":"public/page/13/index.html","hash":"ddac66d74cadb66519d36aab96b685d84e2c5a5b","modified":1721543975279},{"_id":"public/page/15/index.html","hash":"e9e70eab6c675a217b46a42a4d16ac482131b09e","modified":1721543975279},{"_id":"public/page/16/index.html","hash":"82d0065e809f59ff82239e692ffb289962e79fb1","modified":1721543975279},{"_id":"public/edit-time.sh","hash":"ab7e0d0b79bd996f99a5aa3c3b9f3deee13917fb","modified":1721543975279},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1721543975279},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1721543975279},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1721543975279},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1721543975279},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1721543975279},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1721543975279}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"8位浮点数所有值","date":"2023-11-15T13:21:43.523Z","updated":"2023-11-15T13:21:43.523Z","_content":"下面的页面会显示8位浮点数所出现的个数。\n第1个位是符号位\n第2到第5位是指数\n后面3位是有效数字。\n\n计算得到0到255个浮点数\n\n```html\n// html\n<!DOCTYPE html>\n<html>\n<head>\n<title></title>\n</head>\n<body>\n<style>\n#show {\n    position: relative;\n    width: 1024px;\n    height: 1px;\n    background-color: black;\n}\n.item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 1px;\n    height: 20px;\n    background-color: red;\n}\n</style>\n<div id=\"show\">\n    <div class=\"item\"></div>\n</div>\n<script type=\"text/javascript\">\n/*\n0 0000 000\n0-256\n*/\nfunction run(power){\n    var arr = [];\n    var all = Math.pow(2, power)\n    for (var i = 0; i < all; i++) {\n        var str = i.toString(2);\n        if (str.length < power) {\n            str = str.padStart(power, '0')\n        }\n        var num = floatStr(str);\n        if (num !== null) {\n            arr.push(num);\n        }\n    }\n    return arr;\n}\n\nfunction renderFloat(arr) {\n    arr.forEach(num => {\n        var show = document.getElementById('show')\n        var div = document.createElement('div');\n        div.className = 'item';\n        div.style.left = (num * 2 + 512) + 'px';\n        show.appendChild(div);\n    });\n}\n\nrenderFloat(run(8));\n\n\n// 0 1111 000\nfunction floatStr(str) {\n    str = str.replace(/\\\\s/g, '');\n    var V = str[0] === '0' ? 1 : -1;\n    var E = str.slice(1,5);\n    var M = str.slice(-3);\n\n    if (E === '0000') {\n        E = 1 - 7;\n        M = parseInt(M, 2);\n        return V * M * Math.pow(2, E - 3);\n    }\n    else if (E === '1111') {\n        return null;\n        if (M === '000') {\n            return V === 1 ? Number.MAX_VALUE : Number.MIN_VALUE;\n        } else {\n            return NaN;\n        }\n    }\n    else {\n        E = parseInt(E, 2) - 7;\n        M = parseInt(M, 2);\n        M = M === 0 ? 1 : Math.pow(M, -3) + 1;\n        return V * M * Math.pow(2, E);\n    }\n}\n</script>\n</body>\n</html>\n```\n","source":"_posts/8-bit-float.md","raw":"---\ntitle: 8位浮点数所有值\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n下面的页面会显示8位浮点数所出现的个数。\n第1个位是符号位\n第2到第5位是指数\n后面3位是有效数字。\n\n计算得到0到255个浮点数\n\n```html\n// html\n<!DOCTYPE html>\n<html>\n<head>\n<title></title>\n</head>\n<body>\n<style>\n#show {\n    position: relative;\n    width: 1024px;\n    height: 1px;\n    background-color: black;\n}\n.item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 1px;\n    height: 20px;\n    background-color: red;\n}\n</style>\n<div id=\"show\">\n    <div class=\"item\"></div>\n</div>\n<script type=\"text/javascript\">\n/*\n0 0000 000\n0-256\n*/\nfunction run(power){\n    var arr = [];\n    var all = Math.pow(2, power)\n    for (var i = 0; i < all; i++) {\n        var str = i.toString(2);\n        if (str.length < power) {\n            str = str.padStart(power, '0')\n        }\n        var num = floatStr(str);\n        if (num !== null) {\n            arr.push(num);\n        }\n    }\n    return arr;\n}\n\nfunction renderFloat(arr) {\n    arr.forEach(num => {\n        var show = document.getElementById('show')\n        var div = document.createElement('div');\n        div.className = 'item';\n        div.style.left = (num * 2 + 512) + 'px';\n        show.appendChild(div);\n    });\n}\n\nrenderFloat(run(8));\n\n\n// 0 1111 000\nfunction floatStr(str) {\n    str = str.replace(/\\\\s/g, '');\n    var V = str[0] === '0' ? 1 : -1;\n    var E = str.slice(1,5);\n    var M = str.slice(-3);\n\n    if (E === '0000') {\n        E = 1 - 7;\n        M = parseInt(M, 2);\n        return V * M * Math.pow(2, E - 3);\n    }\n    else if (E === '1111') {\n        return null;\n        if (M === '000') {\n            return V === 1 ? Number.MAX_VALUE : Number.MIN_VALUE;\n        } else {\n            return NaN;\n        }\n    }\n    else {\n        E = parseInt(E, 2) - 7;\n        M = parseInt(M, 2);\n        M = M === 0 ? 1 : Math.pow(M, -3) + 1;\n        return V * M * Math.pow(2, E);\n    }\n}\n</script>\n</body>\n</html>\n```\n","slug":"8-bit-float","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0vw0000fm5ycm848d00","content":"<p>下面的页面会显示8位浮点数所出现的个数。<br>第1个位是符号位<br>第2到第5位是指数<br>后面3位是有效数字。</p>\n<p>计算得到0到255个浮点数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#show</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1024px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">0 0000 000</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">0-256</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">*/</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">power</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> arr = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, power)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; all; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> str = i.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (str.<span class=\"property\">length</span> &lt; power) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            str = str.<span class=\"title function_\">padStart</span>(power, <span class=\"string\">&#x27;0&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> num = <span class=\"title function_\">floatStr</span>(str);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (num !== <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            arr.<span class=\"title function_\">push</span>(num);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> arr;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderFloat</span>(<span class=\"params\">arr</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> show = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;show&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        div.<span class=\"property\">className</span> = <span class=\"string\">&#x27;item&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = (num * <span class=\"number\">2</span> + <span class=\"number\">512</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        show.<span class=\"title function_\">appendChild</span>(div);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">renderFloat</span>(<span class=\"title function_\">run</span>(<span class=\"number\">8</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 0 1111 000</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">floatStr</span>(<span class=\"params\">str</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> V = str[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;0&#x27;</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> E = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> M = str.<span class=\"title function_\">slice</span>(-<span class=\"number\">3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (E === <span class=\"string\">&#x27;0000&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        E = <span class=\"number\">1</span> - <span class=\"number\">7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = <span class=\"built_in\">parseInt</span>(M, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> V * M * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, E - <span class=\"number\">3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (E === <span class=\"string\">&#x27;1111&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (M === <span class=\"string\">&#x27;000&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> V === <span class=\"number\">1</span> ? <span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span> : <span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"title class_\">NaN</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        E = <span class=\"built_in\">parseInt</span>(E, <span class=\"number\">2</span>) - <span class=\"number\">7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = <span class=\"built_in\">parseInt</span>(M, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = M === <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(M, -<span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> V * M * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, E);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>下面的页面会显示8位浮点数所出现的个数。<br>第1个位是符号位<br>第2到第5位是指数<br>后面3位是有效数字。</p>\n<p>计算得到0到255个浮点数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#show</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1024px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: black;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">0 0000 000</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">0-256</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">*/</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">power</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> arr = [];</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, power)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; all; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> str = i.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (str.<span class=\"property\">length</span> &lt; power) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            str = str.<span class=\"title function_\">padStart</span>(power, <span class=\"string\">&#x27;0&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> num = <span class=\"title function_\">floatStr</span>(str);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (num !== <span class=\"literal\">null</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            arr.<span class=\"title function_\">push</span>(num);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> arr;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderFloat</span>(<span class=\"params\">arr</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> show = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;show&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        div.<span class=\"property\">className</span> = <span class=\"string\">&#x27;item&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        div.<span class=\"property\">style</span>.<span class=\"property\">left</span> = (num * <span class=\"number\">2</span> + <span class=\"number\">512</span>) + <span class=\"string\">&#x27;px&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        show.<span class=\"title function_\">appendChild</span>(div);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">renderFloat</span>(<span class=\"title function_\">run</span>(<span class=\"number\">8</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 0 1111 000</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">floatStr</span>(<span class=\"params\">str</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> V = str[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;0&#x27;</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> E = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> M = str.<span class=\"title function_\">slice</span>(-<span class=\"number\">3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (E === <span class=\"string\">&#x27;0000&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        E = <span class=\"number\">1</span> - <span class=\"number\">7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = <span class=\"built_in\">parseInt</span>(M, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> V * M * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, E - <span class=\"number\">3</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (E === <span class=\"string\">&#x27;1111&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (M === <span class=\"string\">&#x27;000&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> V === <span class=\"number\">1</span> ? <span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span> : <span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"title class_\">NaN</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        E = <span class=\"built_in\">parseInt</span>(E, <span class=\"number\">2</span>) - <span class=\"number\">7</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = <span class=\"built_in\">parseInt</span>(M, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        M = M === <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(M, -<span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> V * M * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, E);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"前端安全——XSS攻击","date":"2023-11-15T13:21:43.523Z","updated":"2023-11-15T13:21:43.524Z","_content":"\n## XSS是什么\n经常听到XSS攻击这个词，那么XSS攻击到底是什么，以及如何防御大家清楚么？\n\nXSS攻击的定义、类型以及防御方法。 什么是XSS攻击？ XSS攻击全称跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。\n\n\n## 攻击类型\nXSS攻击有哪几种类型？ 常见的 XSS 攻击有三种：\n反射型XSS攻击、DOM-based 型XXS攻击以及存储型XSS攻击。 \n+ 反射型XSS攻击 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。反射型XSS通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。 \n+ 存储型XSS攻击 也叫持久型XSS，主要将XSS代码提交存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。当目标用户访问该页面获取数据时，XSS代码会从服务器解析之后加载出来，返回到浏览器做正常的HTML和JS解析执行，XSS攻击就发生了。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。 \n+ DOM-based 型XSS攻击 基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JAVAScript 自身的安全漏洞。\n\n \n## 防御\n如何防御XSS攻击？\n+ 对输入内容的特定字符进行编码，例如表示 html标记的 < > 等符号。 \n+ 对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 \n+ 将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 \n+ 不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 \n+  后端接口也应该要做到关键字符过滤的问题。 \n\n## 最后\n以上，是我给大家分享的关于XSS攻击的全部内容，如今，各种类型网络攻击日益频繁，除了XSS攻击之外，比较常见的网络攻击类型还包括DDoS攻击、CC攻击等，它们非常难以防御这些我以后再说。','2020-02-03 09:13:15","source":"_posts/XSS-attack.md","raw":"---\ntitle: 前端安全——XSS攻击\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n## XSS是什么\n经常听到XSS攻击这个词，那么XSS攻击到底是什么，以及如何防御大家清楚么？\n\nXSS攻击的定义、类型以及防御方法。 什么是XSS攻击？ XSS攻击全称跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。\n\n\n## 攻击类型\nXSS攻击有哪几种类型？ 常见的 XSS 攻击有三种：\n反射型XSS攻击、DOM-based 型XXS攻击以及存储型XSS攻击。 \n+ 反射型XSS攻击 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。反射型XSS通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。 \n+ 存储型XSS攻击 也叫持久型XSS，主要将XSS代码提交存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。当目标用户访问该页面获取数据时，XSS代码会从服务器解析之后加载出来，返回到浏览器做正常的HTML和JS解析执行，XSS攻击就发生了。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。 \n+ DOM-based 型XSS攻击 基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JAVAScript 自身的安全漏洞。\n\n \n## 防御\n如何防御XSS攻击？\n+ 对输入内容的特定字符进行编码，例如表示 html标记的 < > 等符号。 \n+ 对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 \n+ 将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 \n+ 不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 \n+  后端接口也应该要做到关键字符过滤的问题。 \n\n## 最后\n以上，是我给大家分享的关于XSS攻击的全部内容，如今，各种类型网络攻击日益频繁，除了XSS攻击之外，比较常见的网络攻击类型还包括DDoS攻击、CC攻击等，它们非常难以防御这些我以后再说。','2020-02-03 09:13:15","slug":"XSS-attack","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0vz0001fm5yf6yh9rbw","content":"<h2 id=\"XSS是什么\"><a href=\"#XSS是什么\" class=\"headerlink\" title=\"XSS是什么\"></a>XSS是什么</h2><p>经常听到XSS攻击这个词，那么XSS攻击到底是什么，以及如何防御大家清楚么？</p>\n<p>XSS攻击的定义、类型以及防御方法。 什么是XSS攻击？ XSS攻击全称跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p>\n<h2 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h2><p>XSS攻击有哪几种类型？ 常见的 XSS 攻击有三种：<br>反射型XSS攻击、DOM-based 型XXS攻击以及存储型XSS攻击。 </p>\n<ul>\n<li>反射型XSS攻击 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。反射型XSS通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。 </li>\n<li>存储型XSS攻击 也叫持久型XSS，主要将XSS代码提交存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。当目标用户访问该页面获取数据时，XSS代码会从服务器解析之后加载出来，返回到浏览器做正常的HTML和JS解析执行，XSS攻击就发生了。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。 </li>\n<li>DOM-based 型XSS攻击 基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JAVAScript 自身的安全漏洞。</li>\n</ul>\n<h2 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h2><p>如何防御XSS攻击？</p>\n<ul>\n<li>对输入内容的特定字符进行编码，例如表示 html标记的 &lt; &gt; 等符号。 </li>\n<li>对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 </li>\n<li>将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 </li>\n<li>不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 </li>\n<li>后端接口也应该要做到关键字符过滤的问题。</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>以上，是我给大家分享的关于XSS攻击的全部内容，如今，各种类型网络攻击日益频繁，除了XSS攻击之外，比较常见的网络攻击类型还包括DDoS攻击、CC攻击等，它们非常难以防御这些我以后再说。’,’2020-02-03 09:13:15</p>\n","excerpt":"","more":"<h2 id=\"XSS是什么\"><a href=\"#XSS是什么\" class=\"headerlink\" title=\"XSS是什么\"></a>XSS是什么</h2><p>经常听到XSS攻击这个词，那么XSS攻击到底是什么，以及如何防御大家清楚么？</p>\n<p>XSS攻击的定义、类型以及防御方法。 什么是XSS攻击？ XSS攻击全称跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p>\n<h2 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h2><p>XSS攻击有哪几种类型？ 常见的 XSS 攻击有三种：<br>反射型XSS攻击、DOM-based 型XXS攻击以及存储型XSS攻击。 </p>\n<ul>\n<li>反射型XSS攻击 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。反射型XSS通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。 </li>\n<li>存储型XSS攻击 也叫持久型XSS，主要将XSS代码提交存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。当目标用户访问该页面获取数据时，XSS代码会从服务器解析之后加载出来，返回到浏览器做正常的HTML和JS解析执行，XSS攻击就发生了。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。 </li>\n<li>DOM-based 型XSS攻击 基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JAVAScript 自身的安全漏洞。</li>\n</ul>\n<h2 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h2><p>如何防御XSS攻击？</p>\n<ul>\n<li>对输入内容的特定字符进行编码，例如表示 html标记的 &lt; &gt; 等符号。 </li>\n<li>对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 </li>\n<li>将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 </li>\n<li>不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 </li>\n<li>后端接口也应该要做到关键字符过滤的问题。</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>以上，是我给大家分享的关于XSS攻击的全部内容，如今，各种类型网络攻击日益频繁，除了XSS攻击之外，比较常见的网络攻击类型还包括DDoS攻击、CC攻击等，它们非常难以防御这些我以后再说。’,’2020-02-03 09:13:15</p>\n"},{"title":"关于这个博客是怎么建的","date":"2023-11-15T13:21:43.524Z","updated":"2023-11-15T13:21:43.524Z","_content":"我是初学node.js，晚上搜索到这教程[https://github.com/nswbmw/N-blog](https://github.com/nswbmw/N-blog)，然后就跟着一边敲键盘一边学，学完教程就打算把这个改成自己的博客，当然我是有看过node.js的书籍了《深入浅出node.js》《node.js实践》）。\n\n我删掉多用户，用户写进配置js文件。 自己重写了样式，稍微设计了一些页面。\n\n这个博客我也开源到github了，仓库地址: [https://github.com/bzw875/blog](https://github.com/bzw875/blog)\n","source":"_posts/about-blog.md","raw":"---\ntitle: 关于这个博客是怎么建的\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n我是初学node.js，晚上搜索到这教程[https://github.com/nswbmw/N-blog](https://github.com/nswbmw/N-blog)，然后就跟着一边敲键盘一边学，学完教程就打算把这个改成自己的博客，当然我是有看过node.js的书籍了《深入浅出node.js》《node.js实践》）。\n\n我删掉多用户，用户写进配置js文件。 自己重写了样式，稍微设计了一些页面。\n\n这个博客我也开源到github了，仓库地址: [https://github.com/bzw875/blog](https://github.com/bzw875/blog)\n","slug":"about-blog","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w00002fm5y4pnf8d9d","content":"<p>我是初学node.js，晚上搜索到这教程<a href=\"https://github.com/nswbmw/N-blog\">https://github.com/nswbmw/N-blog</a>，然后就跟着一边敲键盘一边学，学完教程就打算把这个改成自己的博客，当然我是有看过node.js的书籍了《深入浅出node.js》《node.js实践》）。</p>\n<p>我删掉多用户，用户写进配置js文件。 自己重写了样式，稍微设计了一些页面。</p>\n<p>这个博客我也开源到github了，仓库地址: <a href=\"https://github.com/bzw875/blog\">https://github.com/bzw875/blog</a></p>\n","excerpt":"","more":"<p>我是初学node.js，晚上搜索到这教程<a href=\"https://github.com/nswbmw/N-blog\">https://github.com/nswbmw/N-blog</a>，然后就跟着一边敲键盘一边学，学完教程就打算把这个改成自己的博客，当然我是有看过node.js的书籍了《深入浅出node.js》《node.js实践》）。</p>\n<p>我删掉多用户，用户写进配置js文件。 自己重写了样式，稍微设计了一些页面。</p>\n<p>这个博客我也开源到github了，仓库地址: <a href=\"https://github.com/bzw875/blog\">https://github.com/bzw875/blog</a></p>\n"},{"title":"静态文件缓存方案","date":"2023-11-15T13:21:43.524Z","updated":"2023-11-15T13:21:43.524Z","_content":"\n\n优化网站性能的一种途径是优化静态资源性能，优化静态资源性能有以下几种途径：\nCDN；压缩js，css，图片体积；通过http头使浏览器缓存静态资源 我的网站采用的方案是压缩js和css，然后设置http头缓存静态资源\n\n首先设置http头让浏览器缓存\n```\nCache-Control:max-age=315360000, public\nExpires:Thu, 31 Dec 2037 23:55:55 GMT\n```\n\n上面的http头是静态文件意思缓存1年（3652460*60），2037年23时55分55秒过期。 这样浏览器就不会重新从服务器下载这里静态资源。\n\nchrome Network截图\n\n如图上面显示(form disk cache)因为不走网络所以占用的时间非常少，我的网站本来就是部署在还美国的主机，流量本来就很慢，所以静态资源缓存可以优化网站性能。 静态文件缓存做好了，接下来是在文件修改之后通知浏览器下载更新的文件。 我现在是用构建工具group来处理的，用它来压缩js、css文件，还有计算它们的md5值用来重命名文件名，这样就可以确保不同的内容有独一无二的文件名了。 group基于node.js所以必须先安装node.js，然后安装group。 安装grount-cli\n``` bash\nnpm install -g grunt-cli\n```\n安装成功 在你需要你项目package.json的devDependencies里面添加grunt需要依赖\n```\n\"grunt\": \"\",\n\"grunt-contrib-cssmin\": \"^2.0.0\",\n\"grunt-contrib-levin-usemin\": \"\",\n\"grunt-contrib-uglify\": \"^2.2.0\",\n\"grunt-rev\": \"\",\n\"html-webpack-plugin\": \"^2.28.0\"\n```\n然后\n``` bash\nnpm install\n```\n我的Gruntfile.js是\n``` javascript\n// javascript\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        rev: { // 配置任务rev 计算js和css文件的md5值并重命名\n            options: {\n                encoding: 'utf8',\n                algorithm: 'md5',\n                length: 8\n            },\n            assets: {\n                src: [\n                 'public/javascripts/**/*.js', // 目标js文件\n                 'public/stylesheets/**/*.css', // 目标css文件\n                ]\n            }\n        },\n        usemin: {\n            css:{\n                files:{\n                    src:['public/stylesheets/**/*.css']\n                }\n            },\n            js:['public/javascripts/**/*.js'],\n            html:['views/**/*.ejs'],\n            options:{\n                assetsDirs: ['static', 'public/'],\n                patterns: {\n                    js: [[/(\\\\/public\\\\/images\\\\/[\\\\/\\\\w-]+\\\\.jpg)/, 'replace image in js']]\n                }\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-rev'); // 引入grunt的插件 ‘grunt-rev’\n    grunt.loadNpmTasks('grunt-contrib-levin-usemin'); // 引入grunt的插件 ‘grunt-contrib-levin-usemin’\n\n    grunt.registerTask('default', ['rev', 'usemin']); // 注册任务default，default任务列表里有2个任务rev和usemin\n};\n```","source":"_posts/cache-static-file.md","raw":"---\ntitle: 静态文件缓存方案\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n\n优化网站性能的一种途径是优化静态资源性能，优化静态资源性能有以下几种途径：\nCDN；压缩js，css，图片体积；通过http头使浏览器缓存静态资源 我的网站采用的方案是压缩js和css，然后设置http头缓存静态资源\n\n首先设置http头让浏览器缓存\n```\nCache-Control:max-age=315360000, public\nExpires:Thu, 31 Dec 2037 23:55:55 GMT\n```\n\n上面的http头是静态文件意思缓存1年（3652460*60），2037年23时55分55秒过期。 这样浏览器就不会重新从服务器下载这里静态资源。\n\nchrome Network截图\n\n如图上面显示(form disk cache)因为不走网络所以占用的时间非常少，我的网站本来就是部署在还美国的主机，流量本来就很慢，所以静态资源缓存可以优化网站性能。 静态文件缓存做好了，接下来是在文件修改之后通知浏览器下载更新的文件。 我现在是用构建工具group来处理的，用它来压缩js、css文件，还有计算它们的md5值用来重命名文件名，这样就可以确保不同的内容有独一无二的文件名了。 group基于node.js所以必须先安装node.js，然后安装group。 安装grount-cli\n``` bash\nnpm install -g grunt-cli\n```\n安装成功 在你需要你项目package.json的devDependencies里面添加grunt需要依赖\n```\n\"grunt\": \"\",\n\"grunt-contrib-cssmin\": \"^2.0.0\",\n\"grunt-contrib-levin-usemin\": \"\",\n\"grunt-contrib-uglify\": \"^2.2.0\",\n\"grunt-rev\": \"\",\n\"html-webpack-plugin\": \"^2.28.0\"\n```\n然后\n``` bash\nnpm install\n```\n我的Gruntfile.js是\n``` javascript\n// javascript\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        rev: { // 配置任务rev 计算js和css文件的md5值并重命名\n            options: {\n                encoding: 'utf8',\n                algorithm: 'md5',\n                length: 8\n            },\n            assets: {\n                src: [\n                 'public/javascripts/**/*.js', // 目标js文件\n                 'public/stylesheets/**/*.css', // 目标css文件\n                ]\n            }\n        },\n        usemin: {\n            css:{\n                files:{\n                    src:['public/stylesheets/**/*.css']\n                }\n            },\n            js:['public/javascripts/**/*.js'],\n            html:['views/**/*.ejs'],\n            options:{\n                assetsDirs: ['static', 'public/'],\n                patterns: {\n                    js: [[/(\\\\/public\\\\/images\\\\/[\\\\/\\\\w-]+\\\\.jpg)/, 'replace image in js']]\n                }\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-rev'); // 引入grunt的插件 ‘grunt-rev’\n    grunt.loadNpmTasks('grunt-contrib-levin-usemin'); // 引入grunt的插件 ‘grunt-contrib-levin-usemin’\n\n    grunt.registerTask('default', ['rev', 'usemin']); // 注册任务default，default任务列表里有2个任务rev和usemin\n};\n```","slug":"cache-static-file","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w00003fm5yendhhpuk","content":"<p>优化网站性能的一种途径是优化静态资源性能，优化静态资源性能有以下几种途径：<br>CDN；压缩js，css，图片体积；通过http头使浏览器缓存静态资源 我的网站采用的方案是压缩js和css，然后设置http头缓存静态资源</p>\n<p>首先设置http头让浏览器缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age=315360000, public</span><br><span class=\"line\">Expires:Thu, 31 Dec 2037 23:55:55 GMT</span><br></pre></td></tr></table></figure>\n\n<p>上面的http头是静态文件意思缓存1年（3652460*60），2037年23时55分55秒过期。 这样浏览器就不会重新从服务器下载这里静态资源。</p>\n<p>chrome Network截图</p>\n<p>如图上面显示(form disk cache)因为不走网络所以占用的时间非常少，我的网站本来就是部署在还美国的主机，流量本来就很慢，所以静态资源缓存可以优化网站性能。 静态文件缓存做好了，接下来是在文件修改之后通知浏览器下载更新的文件。 我现在是用构建工具group来处理的，用它来压缩js、css文件，还有计算它们的md5值用来重命名文件名，这样就可以确保不同的内容有独一无二的文件名了。 group基于node.js所以必须先安装node.js，然后安装group。 安装grount-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>\n<p>安装成功 在你需要你项目package.json的devDependencies里面添加grunt需要依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;grunt&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-cssmin&quot;: &quot;^2.0.0&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-levin-usemin&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-uglify&quot;: &quot;^2.2.0&quot;,</span><br><span class=\"line\">&quot;grunt-rev&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>我的Gruntfile.js是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) &#123;</span><br><span class=\"line\">    grunt.<span class=\"title function_\">initConfig</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">rev</span>: &#123; <span class=\"comment\">// 配置任务rev 计算js和css文件的md5值并重命名</span></span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">encoding</span>: <span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;md5&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">length</span>: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">assets</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">src</span>: [</span><br><span class=\"line\">                 <span class=\"string\">&#x27;public/javascripts/**/*.js&#x27;</span>, <span class=\"comment\">// 目标js文件</span></span><br><span class=\"line\">                 <span class=\"string\">&#x27;public/stylesheets/**/*.css&#x27;</span>, <span class=\"comment\">// 目标css文件</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">usemin</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">css</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">files</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">src</span>:[<span class=\"string\">&#x27;public/stylesheets/**/*.css&#x27;</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">js</span>:[<span class=\"string\">&#x27;public/javascripts/**/*.js&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">html</span>:[<span class=\"string\">&#x27;views/**/*.ejs&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">assetsDirs</span>: [<span class=\"string\">&#x27;static&#x27;</span>, <span class=\"string\">&#x27;public/&#x27;</span>],</span><br><span class=\"line\">                <span class=\"attr\">patterns</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">js</span>: [[<span class=\"regexp\">/(\\\\/</span>public\\\\/images\\\\/[\\\\/\\\\w-]+\\\\.<span class=\"property\">jpg</span>)/, <span class=\"string\">&#x27;replace image in js&#x27;</span>]]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-rev&#x27;</span>); <span class=\"comment\">// 引入grunt的插件 ‘grunt-rev’</span></span><br><span class=\"line\">    grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-contrib-levin-usemin&#x27;</span>); <span class=\"comment\">// 引入grunt的插件 ‘grunt-contrib-levin-usemin’</span></span><br><span class=\"line\"></span><br><span class=\"line\">    grunt.<span class=\"title function_\">registerTask</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;rev&#x27;</span>, <span class=\"string\">&#x27;usemin&#x27;</span>]); <span class=\"comment\">// 注册任务default，default任务列表里有2个任务rev和usemin</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>优化网站性能的一种途径是优化静态资源性能，优化静态资源性能有以下几种途径：<br>CDN；压缩js，css，图片体积；通过http头使浏览器缓存静态资源 我的网站采用的方案是压缩js和css，然后设置http头缓存静态资源</p>\n<p>首先设置http头让浏览器缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age=315360000, public</span><br><span class=\"line\">Expires:Thu, 31 Dec 2037 23:55:55 GMT</span><br></pre></td></tr></table></figure>\n\n<p>上面的http头是静态文件意思缓存1年（3652460*60），2037年23时55分55秒过期。 这样浏览器就不会重新从服务器下载这里静态资源。</p>\n<p>chrome Network截图</p>\n<p>如图上面显示(form disk cache)因为不走网络所以占用的时间非常少，我的网站本来就是部署在还美国的主机，流量本来就很慢，所以静态资源缓存可以优化网站性能。 静态文件缓存做好了，接下来是在文件修改之后通知浏览器下载更新的文件。 我现在是用构建工具group来处理的，用它来压缩js、css文件，还有计算它们的md5值用来重命名文件名，这样就可以确保不同的内容有独一无二的文件名了。 group基于node.js所以必须先安装node.js，然后安装group。 安装grount-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>\n<p>安装成功 在你需要你项目package.json的devDependencies里面添加grunt需要依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;grunt&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-cssmin&quot;: &quot;^2.0.0&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-levin-usemin&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;grunt-contrib-uglify&quot;: &quot;^2.2.0&quot;,</span><br><span class=\"line\">&quot;grunt-rev&quot;: &quot;&quot;,</span><br><span class=\"line\">&quot;html-webpack-plugin&quot;: &quot;^2.28.0&quot;</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>我的Gruntfile.js是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) &#123;</span><br><span class=\"line\">    grunt.<span class=\"title function_\">initConfig</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">rev</span>: &#123; <span class=\"comment\">// 配置任务rev 计算js和css文件的md5值并重命名</span></span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">encoding</span>: <span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;md5&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">length</span>: <span class=\"number\">8</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">assets</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">src</span>: [</span><br><span class=\"line\">                 <span class=\"string\">&#x27;public/javascripts/**/*.js&#x27;</span>, <span class=\"comment\">// 目标js文件</span></span><br><span class=\"line\">                 <span class=\"string\">&#x27;public/stylesheets/**/*.css&#x27;</span>, <span class=\"comment\">// 目标css文件</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">usemin</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">css</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">files</span>:&#123;</span><br><span class=\"line\">                    <span class=\"attr\">src</span>:[<span class=\"string\">&#x27;public/stylesheets/**/*.css&#x27;</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">js</span>:[<span class=\"string\">&#x27;public/javascripts/**/*.js&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">html</span>:[<span class=\"string\">&#x27;views/**/*.ejs&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">options</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">assetsDirs</span>: [<span class=\"string\">&#x27;static&#x27;</span>, <span class=\"string\">&#x27;public/&#x27;</span>],</span><br><span class=\"line\">                <span class=\"attr\">patterns</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">js</span>: [[<span class=\"regexp\">/(\\\\/</span>public\\\\/images\\\\/[\\\\/\\\\w-]+\\\\.<span class=\"property\">jpg</span>)/, <span class=\"string\">&#x27;replace image in js&#x27;</span>]]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-rev&#x27;</span>); <span class=\"comment\">// 引入grunt的插件 ‘grunt-rev’</span></span><br><span class=\"line\">    grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-contrib-levin-usemin&#x27;</span>); <span class=\"comment\">// 引入grunt的插件 ‘grunt-contrib-levin-usemin’</span></span><br><span class=\"line\"></span><br><span class=\"line\">    grunt.<span class=\"title function_\">registerTask</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;rev&#x27;</span>, <span class=\"string\">&#x27;usemin&#x27;</span>]); <span class=\"comment\">// 注册任务default，default任务列表里有2个任务rev和usemin</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"前端代码规范和最佳实践","date":"2023-11-15T13:21:43.524Z","updated":"2023-11-15T13:21:43.524Z","_content":"\n# HTML\n\n### 语法\n\n* 缩进使用soft tab（4个空格）；\n* 嵌套的节点应该缩进；\n* 在属性上，使用双引号，不要使用单引号；\n* 不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；`<img src=\"\">`\n* 不要忽略可选的关闭标签，例：</li> 和 </body>。\n\n### HTML5 doctype\n\n    <!DOCTYPE html>\n\n* 在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；\n* 虽然doctype不区分大小写，但是按照惯例，doctype大写 （关于html属性，大写还是小写）。\n\n\n#### lang属性\n\n根据HTML5规范：应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。\n\n比如\n\n    <html lang=\"zh-cn\">\n    <html lang=\"en-us\">\n    \n    \n### 字符编码\n\n    <meta charset=\"UTF-8\">\n    \n通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为'UTF-8'。\n\n\n### IE兼容模式\n* 用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；\n* 不同doctype在不同浏览器下会触发不同的渲染模式，所以别别忽略文档类型\n\n\n### 标准的HTML5页面应该是这样\n\n    <!DOCTYPE html>\n    <html lang=\"zh-cn\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Document</title>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n    </head>\n    <body>\n        \n    </body>\n    </html>\n    \n\n### 引入CSS, JS\n\n根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值\n\n    <link rel=\"stylesheet\" href=\"code_guide.css\">\n    <script src=\"code_guide.js\"></script>\n    \n\n### boolean属性\n\nboolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；\n    \n    <-- Good -->\n    <input type=\"text\" disabled>\n    \n    <input type=\"checkbox\" value=\"1\" checked>\n    \n    <select>\n        <option value=\"1\" selected>1</option>\n    </select>\n    \n    <-- Bad -->\n    <input type=\"text\" disabled=\"disabled\">\n    \n    <input type=\"checkbox\" value=\"1\" checked=\"checked\">\n    \n    <select>\n        <option value=\"1\" selected>1</option>\n    </select>\n    \n\n### 减少标签数量\n\n    <-- Good -->\n    <label class=\"uiLabel\">\n        &{'administrationgroup.code'}:\n    </label>\n    <input class=\"uiComponent\" type=\"text\"/>\n        \n    <-- Bad -->\n    <span>\n        <label class=\"uiLabel\">\n            &{'administrationgroup.code'}:\n        </label>\n        <span class=\"uiComponent\">\n            <input type=\"text\"/>\n        </span>\n    </span>\n    \n\n# javascript\n\n### 缩进\n使用soft tab（4个空格）。\n\n\n### 单行长度\n\n不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。\n\n\n### 分号\n\n以下几种情况后需加分号：\n\n* 变量声明\n* 表达式\n* return\n* throw\n* break\n* continue\n* do-while\n\n\n\n    var x = 1;\n    \n    x++;\n    \n    return;\n    \n    throw new Error('timeout');\n    \n    break;\n    \n    continue;\n\n    do {\n        x++;\n    } while (x < 10);\n    \n\n### 换行\n\n换行的地方，行末必须有','或者运算符；\n\n以下几种情况不需要换行：\n\n* 下列关键字后：`else, catch, finally`\n* 代码块'{'前\n\n\n以下几种情况需要换行：\n\n* 代码块'{'后和'}'前\n* 变量赋值后\n\n\n    // not good\n    var a = {\n        b: 1\n        , c: 2\n    };\n    \n    x = y\n        ? 1 : 2;\n    \n    // good\n    var a = {\n        b: 1,\n        c: 2\n    };\n    \n    x = y ? 1 : 2;\n    x = y ?\n        1 : 2;\n    \n    // no need line break with 'else', 'catch', 'finally'\n    if (condition) {\n        ...\n    } else {\n        ...\n    }\n    \n    try {\n        ...\n    } catch (e) {\n        ...\n    } finally {\n        ...\n    }\n    \n    // not good\n    function test()\n    {\n        ...\n    }\n    \n    // good\n    function test() {\n        ...\n    }\n    \n    // not good\n    var a, foo = 7, b,\n        c, bar = 8;\n    \n    // good\n    var a,\n        foo = 7,\n        b, c, bar = 8;\n\n\n### 引号\n最外层统一使用单引号。\n\n    // Good\n    function foo (data) {\n        return '<a href=\"#\" onclick=\"clickFn(\\\\''+data.id+'\\\\')\"></a>'\n    }\n    \n    // bad\n    function foo (data) {\n        return \"<a href='#' onclick='clickFn(\\\\'\"+data.id+\"\\\\')'></a>\"\n    }\n\n\n### 括号\n\n下列关键字后必须有大括号（即使代码块的内容只有一行）：`if, else, for, while, do, switch, try, catch, finally, with`。\n\n\n    // not good\n    if (condition)\n        doSomething();\n    \n    // good\n    if (condition) {\n        doSomething();\n    }\n\n### 建议使用 && 、 || 、！!(obj)、三元运算符等\n\n    if(data && data.length) //这是合理的判断，&&是依次判断，遇否中断， 建议\n    var name = data.name || ''; //依次都判断，遇true赋值，建议\n    var isName = names.split(',').lenght > 1 ? '名称正确'： '名称错误';\n    var isCanvas = !!(canvas.getContext('2d'));\n\n### 请使用字面量值创建对象\n\n    // Good\n    var obj = {};\n    var users = [];\n    var str = 'abc';\n    var num = 1;\n    var isDefault = false;\n    \n    // bad\n    var obj = new Object();\n    var users = new Array();\n    var str = new String('abc');\n    var num = new Number(1);\n    var isDefault = new Boolean(false);\n\n\n### 别使用javascript 关键字和保留字\n\n    // 比如 class 是保留字\n    var obj = {\n        name: 'userid',\n        class: 'text-left'\n    };\n\n### 只调用一次的函数就别单独声明了\n\n    function getData () {\n        $.get('/abc', getDataCallback)\n    }\n    function getDataCallback (data) {\n        console.log(data);\n    }\n    \n    function getData () {\n        $.get('/abc', function  (data) {\n            console.log(data);\n        })\n    }\n    \n\n关键字\n\n    break\n    case\n    catch\n    continue\n    default\n    delete\n    do\n    else\n    finally\n    for\n    function\n    if\n    in\n    instanceof\n    new\n    return\n    switch\n    this\n    throw\n    try\n    typeof\n    var\n    void\n    while\n    with\n\n保留字\n\n    abstract\n    boolean\n    byte\n    char\n    class\n    const\n    debugger\n    double\n    enum\n    export\n    extends\n    final\n    float\n    goto\n    implements\n    import\n    int\n    interface\n    long\n    native\n    package\n    private\n    protected\n    public\n    short\n    static\n    super\n    synchronized\n    throws\n    transient\n    volatile\n    \n### 不要使用 eval()\n\n* eval 太神秘了，以至于很多人用错。所以不推荐使用\n* 说到性能问题，在旧的浏览器中如果你使用了eval，性能会下降10倍\n\n \nsetInterval和setTimeout 传递字符串也是变相使用eval\n\n    setInterval('foo()', 100)\n\n\n    \n    \n    \n### 不用switch\n\n* 容易漏掉break\n* 没有 if else 清晰\n* \n\n### 不要用setAttribute 修改元素的布尔类型的属性\n\n**根据官方的建议：具有 true 和 false 两个属性的属性，这些checked、 selected、 readonly、 disabled、 autocomplete、autoplay、loop、muted、preload、autofocus、required、open 使用prop()，其他的使用 attr()**\n\n    // bad\n    $option.attr('selected', 'selected'); // jquery 的方法\n    option.setAttribute('selected', 'selected'); 原生的方法\n    \n    // good\n    $option.prop('selected', true); // jquery 的方法\n    option.selected = true; 原生的方法\n\n### jQuery最佳实践\n\n[jQuery最佳实践](http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html)\n\n\n\n\n\n# 最后\n\n推荐你们都读一遍或者多遍这本书，里面有javascript最好的实践。\n公司有购买的在书架上\n\n![Alt text](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521780545495&di=b26fccd445887ce52807fb3bfa3a43bd&imgtype=0&src=http%3A%2F%2Fec4.images-amazon.com%2Fimages%2FI%2F511yJOQpxvL.jpg)","source":"_posts/code-specifications.md","raw":"---\ntitle: 前端代码规范和最佳实践\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n# HTML\n\n### 语法\n\n* 缩进使用soft tab（4个空格）；\n* 嵌套的节点应该缩进；\n* 在属性上，使用双引号，不要使用单引号；\n* 不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；`<img src=\"\">`\n* 不要忽略可选的关闭标签，例：</li> 和 </body>。\n\n### HTML5 doctype\n\n    <!DOCTYPE html>\n\n* 在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；\n* 虽然doctype不区分大小写，但是按照惯例，doctype大写 （关于html属性，大写还是小写）。\n\n\n#### lang属性\n\n根据HTML5规范：应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。\n\n比如\n\n    <html lang=\"zh-cn\">\n    <html lang=\"en-us\">\n    \n    \n### 字符编码\n\n    <meta charset=\"UTF-8\">\n    \n通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为'UTF-8'。\n\n\n### IE兼容模式\n* 用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；\n* 不同doctype在不同浏览器下会触发不同的渲染模式，所以别别忽略文档类型\n\n\n### 标准的HTML5页面应该是这样\n\n    <!DOCTYPE html>\n    <html lang=\"zh-cn\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Document</title>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n    </head>\n    <body>\n        \n    </body>\n    </html>\n    \n\n### 引入CSS, JS\n\n根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值\n\n    <link rel=\"stylesheet\" href=\"code_guide.css\">\n    <script src=\"code_guide.js\"></script>\n    \n\n### boolean属性\n\nboolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；\n    \n    <-- Good -->\n    <input type=\"text\" disabled>\n    \n    <input type=\"checkbox\" value=\"1\" checked>\n    \n    <select>\n        <option value=\"1\" selected>1</option>\n    </select>\n    \n    <-- Bad -->\n    <input type=\"text\" disabled=\"disabled\">\n    \n    <input type=\"checkbox\" value=\"1\" checked=\"checked\">\n    \n    <select>\n        <option value=\"1\" selected>1</option>\n    </select>\n    \n\n### 减少标签数量\n\n    <-- Good -->\n    <label class=\"uiLabel\">\n        &{'administrationgroup.code'}:\n    </label>\n    <input class=\"uiComponent\" type=\"text\"/>\n        \n    <-- Bad -->\n    <span>\n        <label class=\"uiLabel\">\n            &{'administrationgroup.code'}:\n        </label>\n        <span class=\"uiComponent\">\n            <input type=\"text\"/>\n        </span>\n    </span>\n    \n\n# javascript\n\n### 缩进\n使用soft tab（4个空格）。\n\n\n### 单行长度\n\n不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。\n\n\n### 分号\n\n以下几种情况后需加分号：\n\n* 变量声明\n* 表达式\n* return\n* throw\n* break\n* continue\n* do-while\n\n\n\n    var x = 1;\n    \n    x++;\n    \n    return;\n    \n    throw new Error('timeout');\n    \n    break;\n    \n    continue;\n\n    do {\n        x++;\n    } while (x < 10);\n    \n\n### 换行\n\n换行的地方，行末必须有','或者运算符；\n\n以下几种情况不需要换行：\n\n* 下列关键字后：`else, catch, finally`\n* 代码块'{'前\n\n\n以下几种情况需要换行：\n\n* 代码块'{'后和'}'前\n* 变量赋值后\n\n\n    // not good\n    var a = {\n        b: 1\n        , c: 2\n    };\n    \n    x = y\n        ? 1 : 2;\n    \n    // good\n    var a = {\n        b: 1,\n        c: 2\n    };\n    \n    x = y ? 1 : 2;\n    x = y ?\n        1 : 2;\n    \n    // no need line break with 'else', 'catch', 'finally'\n    if (condition) {\n        ...\n    } else {\n        ...\n    }\n    \n    try {\n        ...\n    } catch (e) {\n        ...\n    } finally {\n        ...\n    }\n    \n    // not good\n    function test()\n    {\n        ...\n    }\n    \n    // good\n    function test() {\n        ...\n    }\n    \n    // not good\n    var a, foo = 7, b,\n        c, bar = 8;\n    \n    // good\n    var a,\n        foo = 7,\n        b, c, bar = 8;\n\n\n### 引号\n最外层统一使用单引号。\n\n    // Good\n    function foo (data) {\n        return '<a href=\"#\" onclick=\"clickFn(\\\\''+data.id+'\\\\')\"></a>'\n    }\n    \n    // bad\n    function foo (data) {\n        return \"<a href='#' onclick='clickFn(\\\\'\"+data.id+\"\\\\')'></a>\"\n    }\n\n\n### 括号\n\n下列关键字后必须有大括号（即使代码块的内容只有一行）：`if, else, for, while, do, switch, try, catch, finally, with`。\n\n\n    // not good\n    if (condition)\n        doSomething();\n    \n    // good\n    if (condition) {\n        doSomething();\n    }\n\n### 建议使用 && 、 || 、！!(obj)、三元运算符等\n\n    if(data && data.length) //这是合理的判断，&&是依次判断，遇否中断， 建议\n    var name = data.name || ''; //依次都判断，遇true赋值，建议\n    var isName = names.split(',').lenght > 1 ? '名称正确'： '名称错误';\n    var isCanvas = !!(canvas.getContext('2d'));\n\n### 请使用字面量值创建对象\n\n    // Good\n    var obj = {};\n    var users = [];\n    var str = 'abc';\n    var num = 1;\n    var isDefault = false;\n    \n    // bad\n    var obj = new Object();\n    var users = new Array();\n    var str = new String('abc');\n    var num = new Number(1);\n    var isDefault = new Boolean(false);\n\n\n### 别使用javascript 关键字和保留字\n\n    // 比如 class 是保留字\n    var obj = {\n        name: 'userid',\n        class: 'text-left'\n    };\n\n### 只调用一次的函数就别单独声明了\n\n    function getData () {\n        $.get('/abc', getDataCallback)\n    }\n    function getDataCallback (data) {\n        console.log(data);\n    }\n    \n    function getData () {\n        $.get('/abc', function  (data) {\n            console.log(data);\n        })\n    }\n    \n\n关键字\n\n    break\n    case\n    catch\n    continue\n    default\n    delete\n    do\n    else\n    finally\n    for\n    function\n    if\n    in\n    instanceof\n    new\n    return\n    switch\n    this\n    throw\n    try\n    typeof\n    var\n    void\n    while\n    with\n\n保留字\n\n    abstract\n    boolean\n    byte\n    char\n    class\n    const\n    debugger\n    double\n    enum\n    export\n    extends\n    final\n    float\n    goto\n    implements\n    import\n    int\n    interface\n    long\n    native\n    package\n    private\n    protected\n    public\n    short\n    static\n    super\n    synchronized\n    throws\n    transient\n    volatile\n    \n### 不要使用 eval()\n\n* eval 太神秘了，以至于很多人用错。所以不推荐使用\n* 说到性能问题，在旧的浏览器中如果你使用了eval，性能会下降10倍\n\n \nsetInterval和setTimeout 传递字符串也是变相使用eval\n\n    setInterval('foo()', 100)\n\n\n    \n    \n    \n### 不用switch\n\n* 容易漏掉break\n* 没有 if else 清晰\n* \n\n### 不要用setAttribute 修改元素的布尔类型的属性\n\n**根据官方的建议：具有 true 和 false 两个属性的属性，这些checked、 selected、 readonly、 disabled、 autocomplete、autoplay、loop、muted、preload、autofocus、required、open 使用prop()，其他的使用 attr()**\n\n    // bad\n    $option.attr('selected', 'selected'); // jquery 的方法\n    option.setAttribute('selected', 'selected'); 原生的方法\n    \n    // good\n    $option.prop('selected', true); // jquery 的方法\n    option.selected = true; 原生的方法\n\n### jQuery最佳实践\n\n[jQuery最佳实践](http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html)\n\n\n\n\n\n# 最后\n\n推荐你们都读一遍或者多遍这本书，里面有javascript最好的实践。\n公司有购买的在书架上\n\n![Alt text](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521780545495&di=b26fccd445887ce52807fb3bfa3a43bd&imgtype=0&src=http%3A%2F%2Fec4.images-amazon.com%2Fimages%2FI%2F511yJOQpxvL.jpg)","slug":"code-specifications","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w00004fm5ydxyh0xah","content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>缩进使用soft tab（4个空格）；</li>\n<li>嵌套的节点应该缩进；</li>\n<li>在属性上，使用双引号，不要使用单引号；</li>\n<li>不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；<code>&lt;img src=&quot;&quot;&gt;</code></li>\n<li>不要忽略可选的关闭标签，例：</li> 和 </body>。</li>\n</ul>\n<h3 id=\"HTML5-doctype\"><a href=\"#HTML5-doctype\" class=\"headerlink\" title=\"HTML5 doctype\"></a>HTML5 doctype</h3><pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>\n<ul>\n<li>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；</li>\n<li>虽然doctype不区分大小写，但是按照惯例，doctype大写 （关于html属性，大写还是小写）。</li>\n</ul>\n<h4 id=\"lang属性\"><a href=\"#lang属性\" class=\"headerlink\" title=\"lang属性\"></a>lang属性</h4><p>根据HTML5规范：应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。</p>\n<p>比如</p>\n<pre><code>&lt;html lang=&quot;zh-cn&quot;&gt;\n&lt;html lang=&quot;en-us&quot;&gt;\n</code></pre>\n<h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;\n</code></pre>\n<p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’。</p>\n<h3 id=\"IE兼容模式\"><a href=\"#IE兼容模式\" class=\"headerlink\" title=\"IE兼容模式\"></a>IE兼容模式</h3><ul>\n<li>用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；</li>\n<li>不同doctype在不同浏览器下会触发不同的渲染模式，所以别别忽略文档类型</li>\n</ul>\n<h3 id=\"标准的HTML5页面应该是这样\"><a href=\"#标准的HTML5页面应该是这样\" class=\"headerlink\" title=\"标准的HTML5页面应该是这样\"></a>标准的HTML5页面应该是这样</h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-cn&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"引入CSS-JS\"><a href=\"#引入CSS-JS\" class=\"headerlink\" title=\"引入CSS, JS\"></a>引入CSS, JS</h3><p>根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text&#x2F;css 和 text&#x2F;javascript 分别是他们的默认值</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;code_guide.css&quot;&gt;\n&lt;script src=&quot;code_guide.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"boolean属性\"><a href=\"#boolean属性\" class=\"headerlink\" title=\"boolean属性\"></a>boolean属性</h3><p>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；</p>\n<pre><code>&lt;-- Good --&gt;\n&lt;input type=&quot;text&quot; disabled&gt;\n\n&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;\n\n&lt;select&gt;\n    &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;-- Bad --&gt;\n&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot;&gt;\n\n&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;\n\n&lt;select&gt;\n    &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<h3 id=\"减少标签数量\"><a href=\"#减少标签数量\" class=\"headerlink\" title=\"减少标签数量\"></a>减少标签数量</h3><pre><code>&lt;-- Good --&gt;\n&lt;label class=&quot;uiLabel&quot;&gt;\n    &amp;&#123;&#39;administrationgroup.code&#39;&#125;:\n&lt;/label&gt;\n&lt;input class=&quot;uiComponent&quot; type=&quot;text&quot;/&gt;\n    \n&lt;-- Bad --&gt;\n&lt;span&gt;\n    &lt;label class=&quot;uiLabel&quot;&gt;\n        &amp;&#123;&#39;administrationgroup.code&#39;&#125;:\n    &lt;/label&gt;\n    &lt;span class=&quot;uiComponent&quot;&gt;\n        &lt;input type=&quot;text&quot;/&gt;\n    &lt;/span&gt;\n&lt;/span&gt;\n</code></pre>\n<h1 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h1><h3 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h3><p>使用soft tab（4个空格）。</p>\n<h3 id=\"单行长度\"><a href=\"#单行长度\" class=\"headerlink\" title=\"单行长度\"></a>单行长度</h3><p>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>以下几种情况后需加分号：</p>\n<ul>\n<li><p>变量声明</p>\n</li>\n<li><p>表达式</p>\n</li>\n<li><p>return</p>\n</li>\n<li><p>throw</p>\n</li>\n<li><p>break</p>\n</li>\n<li><p>continue</p>\n</li>\n<li><p>do-while</p>\n<p>  var x &#x3D; 1;</p>\n<p>  x++;</p>\n<p>  return;</p>\n<p>  throw new Error(‘timeout’);</p>\n<p>  break;</p>\n<p>  continue;</p>\n<p>  do {<br>  x++;<br>  } while (x &lt; 10);</p>\n</li>\n</ul>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><p>换行的地方，行末必须有’,’或者运算符；</p>\n<p>以下几种情况不需要换行：</p>\n<ul>\n<li>下列关键字后：<code>else, catch, finally</code></li>\n<li>代码块’{‘前</li>\n</ul>\n<p>以下几种情况需要换行：</p>\n<ul>\n<li><p>代码块’{‘后和’}’前</p>\n</li>\n<li><p>变量赋值后</p>\n<p>  &#x2F;&#x2F; not good<br>  var a &#x3D; {<br>  b: 1<br>  , c: 2<br>  };</p>\n<p>  x &#x3D; y<br>  ? 1 : 2;<br>  &#x2F;&#x2F; good<br>  var a &#x3D; {<br>  b: 1,<br>  c: 2<br>  };</p>\n<p>  x &#x3D; y ? 1 : 2;<br>  x &#x3D; y ?<br>  1 : 2;<br>  &#x2F;&#x2F; no need line break with ‘else’, ‘catch’, ‘finally’<br>  if (condition) {<br>  …<br>  } else {<br>  …<br>  }</p>\n<p>  try {<br>  …<br>  } catch (e) {<br>  …<br>  } finally {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; not good<br>  function test()<br>  {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; good<br>  function test() {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; not good<br>  var a, foo &#x3D; 7, b,<br>  c, bar &#x3D; 8;<br>  &#x2F;&#x2F; good<br>  var a,<br>  foo &#x3D; 7,<br>  b, c, bar &#x3D; 8;</p>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>最外层统一使用单引号。</p>\n<pre><code>// Good\nfunction foo (data) &#123;\n    return &#39;&lt;a href=&quot;#&quot; onclick=&quot;clickFn(\\\\&#39;&#39;+data.id+&#39;\\\\&#39;)&quot;&gt;&lt;/a&gt;&#39;\n&#125;\n\n// bad\nfunction foo (data) &#123;\n    return &quot;&lt;a href=&#39;#&#39; onclick=&#39;clickFn(\\\\&#39;&quot;+data.id+&quot;\\\\&#39;)&#39;&gt;&lt;/a&gt;&quot;\n&#125;\n</code></pre>\n<h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if, else, for, while, do, switch, try, catch, finally, with</code>。</p>\n<pre><code>// not good\nif (condition)\n    doSomething();\n\n// good\nif (condition) &#123;\n    doSomething();\n&#125;\n</code></pre>\n<h3 id=\"建议使用-、-、！-obj-、三元运算符等\"><a href=\"#建议使用-、-、！-obj-、三元运算符等\" class=\"headerlink\" title=\"建议使用 &amp;&amp; 、 || 、！!(obj)、三元运算符等\"></a>建议使用 &amp;&amp; 、 || 、！!(obj)、三元运算符等</h3><pre><code>if(data &amp;&amp; data.length) //这是合理的判断，&amp;&amp;是依次判断，遇否中断， 建议\nvar name = data.name || &#39;&#39;; //依次都判断，遇true赋值，建议\nvar isName = names.split(&#39;,&#39;).lenght &gt; 1 ? &#39;名称正确&#39;： &#39;名称错误&#39;;\nvar isCanvas = !!(canvas.getContext(&#39;2d&#39;));\n</code></pre>\n<h3 id=\"请使用字面量值创建对象\"><a href=\"#请使用字面量值创建对象\" class=\"headerlink\" title=\"请使用字面量值创建对象\"></a>请使用字面量值创建对象</h3><pre><code>// Good\nvar obj = &#123;&#125;;\nvar users = [];\nvar str = &#39;abc&#39;;\nvar num = 1;\nvar isDefault = false;\n\n// bad\nvar obj = new Object();\nvar users = new Array();\nvar str = new String(&#39;abc&#39;);\nvar num = new Number(1);\nvar isDefault = new Boolean(false);\n</code></pre>\n<h3 id=\"别使用javascript-关键字和保留字\"><a href=\"#别使用javascript-关键字和保留字\" class=\"headerlink\" title=\"别使用javascript 关键字和保留字\"></a>别使用javascript 关键字和保留字</h3><pre><code>// 比如 class 是保留字\nvar obj = &#123;\n    name: &#39;userid&#39;,\n    class: &#39;text-left&#39;\n&#125;;\n</code></pre>\n<h3 id=\"只调用一次的函数就别单独声明了\"><a href=\"#只调用一次的函数就别单独声明了\" class=\"headerlink\" title=\"只调用一次的函数就别单独声明了\"></a>只调用一次的函数就别单独声明了</h3><pre><code>function getData () &#123;\n    $.get(&#39;/abc&#39;, getDataCallback)\n&#125;\nfunction getDataCallback (data) &#123;\n    console.log(data);\n&#125;\n\nfunction getData () &#123;\n    $.get(&#39;/abc&#39;, function  (data) &#123;\n        console.log(data);\n    &#125;)\n&#125;\n</code></pre>\n<p>关键字</p>\n<pre><code>break\ncase\ncatch\ncontinue\ndefault\ndelete\ndo\nelse\nfinally\nfor\nfunction\nif\nin\ninstanceof\nnew\nreturn\nswitch\nthis\nthrow\ntry\ntypeof\nvar\nvoid\nwhile\nwith\n</code></pre>\n<p>保留字</p>\n<pre><code>abstract\nboolean\nbyte\nchar\nclass\nconst\ndebugger\ndouble\nenum\nexport\nextends\nfinal\nfloat\ngoto\nimplements\nimport\nint\ninterface\nlong\nnative\npackage\nprivate\nprotected\npublic\nshort\nstatic\nsuper\nsynchronized\nthrows\ntransient\nvolatile\n</code></pre>\n<h3 id=\"不要使用-eval\"><a href=\"#不要使用-eval\" class=\"headerlink\" title=\"不要使用 eval()\"></a>不要使用 eval()</h3><ul>\n<li>eval 太神秘了，以至于很多人用错。所以不推荐使用</li>\n<li>说到性能问题，在旧的浏览器中如果你使用了eval，性能会下降10倍</li>\n</ul>\n<p>setInterval和setTimeout 传递字符串也是变相使用eval</p>\n<pre><code>setInterval(&#39;foo()&#39;, 100)\n</code></pre>\n<h3 id=\"不用switch\"><a href=\"#不用switch\" class=\"headerlink\" title=\"不用switch\"></a>不用switch</h3><ul>\n<li>容易漏掉break</li>\n<li>没有 if else 清晰</li>\n<li></li>\n</ul>\n<h3 id=\"不要用setAttribute-修改元素的布尔类型的属性\"><a href=\"#不要用setAttribute-修改元素的布尔类型的属性\" class=\"headerlink\" title=\"不要用setAttribute 修改元素的布尔类型的属性\"></a>不要用setAttribute 修改元素的布尔类型的属性</h3><p><strong>根据官方的建议：具有 true 和 false 两个属性的属性，这些checked、 selected、 readonly、 disabled、 autocomplete、autoplay、loop、muted、preload、autofocus、required、open 使用prop()，其他的使用 attr()</strong></p>\n<pre><code>// bad\n$option.attr(&#39;selected&#39;, &#39;selected&#39;); // jquery 的方法\noption.setAttribute(&#39;selected&#39;, &#39;selected&#39;); 原生的方法\n\n// good\n$option.prop(&#39;selected&#39;, true); // jquery 的方法\noption.selected = true; 原生的方法\n</code></pre>\n<h3 id=\"jQuery最佳实践\"><a href=\"#jQuery最佳实践\" class=\"headerlink\" title=\"jQuery最佳实践\"></a>jQuery最佳实践</h3><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">jQuery最佳实践</a></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>推荐你们都读一遍或者多遍这本书，里面有javascript最好的实践。<br>公司有购买的在书架上</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521780545495&di=b26fccd445887ce52807fb3bfa3a43bd&imgtype=0&src=http://ec4.images-amazon.com/images/I/511yJOQpxvL.jpg\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>缩进使用soft tab（4个空格）；</li>\n<li>嵌套的节点应该缩进；</li>\n<li>在属性上，使用双引号，不要使用单引号；</li>\n<li>不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；<code>&lt;img src=&quot;&quot;&gt;</code></li>\n<li>不要忽略可选的关闭标签，例：</li> 和 </body>。</li>\n</ul>\n<h3 id=\"HTML5-doctype\"><a href=\"#HTML5-doctype\" class=\"headerlink\" title=\"HTML5 doctype\"></a>HTML5 doctype</h3><pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>\n<ul>\n<li>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；</li>\n<li>虽然doctype不区分大小写，但是按照惯例，doctype大写 （关于html属性，大写还是小写）。</li>\n</ul>\n<h4 id=\"lang属性\"><a href=\"#lang属性\" class=\"headerlink\" title=\"lang属性\"></a>lang属性</h4><p>根据HTML5规范：应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。</p>\n<p>比如</p>\n<pre><code>&lt;html lang=&quot;zh-cn&quot;&gt;\n&lt;html lang=&quot;en-us&quot;&gt;\n</code></pre>\n<h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;\n</code></pre>\n<p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’。</p>\n<h3 id=\"IE兼容模式\"><a href=\"#IE兼容模式\" class=\"headerlink\" title=\"IE兼容模式\"></a>IE兼容模式</h3><ul>\n<li>用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；</li>\n<li>不同doctype在不同浏览器下会触发不同的渲染模式，所以别别忽略文档类型</li>\n</ul>\n<h3 id=\"标准的HTML5页面应该是这样\"><a href=\"#标准的HTML5页面应该是这样\" class=\"headerlink\" title=\"标准的HTML5页面应该是这样\"></a>标准的HTML5页面应该是这样</h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-cn&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"引入CSS-JS\"><a href=\"#引入CSS-JS\" class=\"headerlink\" title=\"引入CSS, JS\"></a>引入CSS, JS</h3><p>根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text&#x2F;css 和 text&#x2F;javascript 分别是他们的默认值</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;code_guide.css&quot;&gt;\n&lt;script src=&quot;code_guide.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"boolean属性\"><a href=\"#boolean属性\" class=\"headerlink\" title=\"boolean属性\"></a>boolean属性</h3><p>boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；</p>\n<pre><code>&lt;-- Good --&gt;\n&lt;input type=&quot;text&quot; disabled&gt;\n\n&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;\n\n&lt;select&gt;\n    &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;-- Bad --&gt;\n&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot;&gt;\n\n&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked=&quot;checked&quot;&gt;\n\n&lt;select&gt;\n    &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<h3 id=\"减少标签数量\"><a href=\"#减少标签数量\" class=\"headerlink\" title=\"减少标签数量\"></a>减少标签数量</h3><pre><code>&lt;-- Good --&gt;\n&lt;label class=&quot;uiLabel&quot;&gt;\n    &amp;&#123;&#39;administrationgroup.code&#39;&#125;:\n&lt;/label&gt;\n&lt;input class=&quot;uiComponent&quot; type=&quot;text&quot;/&gt;\n    \n&lt;-- Bad --&gt;\n&lt;span&gt;\n    &lt;label class=&quot;uiLabel&quot;&gt;\n        &amp;&#123;&#39;administrationgroup.code&#39;&#125;:\n    &lt;/label&gt;\n    &lt;span class=&quot;uiComponent&quot;&gt;\n        &lt;input type=&quot;text&quot;/&gt;\n    &lt;/span&gt;\n&lt;/span&gt;\n</code></pre>\n<h1 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h1><h3 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h3><p>使用soft tab（4个空格）。</p>\n<h3 id=\"单行长度\"><a href=\"#单行长度\" class=\"headerlink\" title=\"单行长度\"></a>单行长度</h3><p>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。</p>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>以下几种情况后需加分号：</p>\n<ul>\n<li><p>变量声明</p>\n</li>\n<li><p>表达式</p>\n</li>\n<li><p>return</p>\n</li>\n<li><p>throw</p>\n</li>\n<li><p>break</p>\n</li>\n<li><p>continue</p>\n</li>\n<li><p>do-while</p>\n<p>  var x &#x3D; 1;</p>\n<p>  x++;</p>\n<p>  return;</p>\n<p>  throw new Error(‘timeout’);</p>\n<p>  break;</p>\n<p>  continue;</p>\n<p>  do {<br>  x++;<br>  } while (x &lt; 10);</p>\n</li>\n</ul>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><p>换行的地方，行末必须有’,’或者运算符；</p>\n<p>以下几种情况不需要换行：</p>\n<ul>\n<li>下列关键字后：<code>else, catch, finally</code></li>\n<li>代码块’{‘前</li>\n</ul>\n<p>以下几种情况需要换行：</p>\n<ul>\n<li><p>代码块’{‘后和’}’前</p>\n</li>\n<li><p>变量赋值后</p>\n<p>  &#x2F;&#x2F; not good<br>  var a &#x3D; {<br>  b: 1<br>  , c: 2<br>  };</p>\n<p>  x &#x3D; y<br>  ? 1 : 2;<br>  &#x2F;&#x2F; good<br>  var a &#x3D; {<br>  b: 1,<br>  c: 2<br>  };</p>\n<p>  x &#x3D; y ? 1 : 2;<br>  x &#x3D; y ?<br>  1 : 2;<br>  &#x2F;&#x2F; no need line break with ‘else’, ‘catch’, ‘finally’<br>  if (condition) {<br>  …<br>  } else {<br>  …<br>  }</p>\n<p>  try {<br>  …<br>  } catch (e) {<br>  …<br>  } finally {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; not good<br>  function test()<br>  {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; good<br>  function test() {<br>  …<br>  }</p>\n<p>  &#x2F;&#x2F; not good<br>  var a, foo &#x3D; 7, b,<br>  c, bar &#x3D; 8;<br>  &#x2F;&#x2F; good<br>  var a,<br>  foo &#x3D; 7,<br>  b, c, bar &#x3D; 8;</p>\n</li>\n</ul>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>最外层统一使用单引号。</p>\n<pre><code>// Good\nfunction foo (data) &#123;\n    return &#39;&lt;a href=&quot;#&quot; onclick=&quot;clickFn(\\\\&#39;&#39;+data.id+&#39;\\\\&#39;)&quot;&gt;&lt;/a&gt;&#39;\n&#125;\n\n// bad\nfunction foo (data) &#123;\n    return &quot;&lt;a href=&#39;#&#39; onclick=&#39;clickFn(\\\\&#39;&quot;+data.id+&quot;\\\\&#39;)&#39;&gt;&lt;/a&gt;&quot;\n&#125;\n</code></pre>\n<h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if, else, for, while, do, switch, try, catch, finally, with</code>。</p>\n<pre><code>// not good\nif (condition)\n    doSomething();\n\n// good\nif (condition) &#123;\n    doSomething();\n&#125;\n</code></pre>\n<h3 id=\"建议使用-、-、！-obj-、三元运算符等\"><a href=\"#建议使用-、-、！-obj-、三元运算符等\" class=\"headerlink\" title=\"建议使用 &amp;&amp; 、 || 、！!(obj)、三元运算符等\"></a>建议使用 &amp;&amp; 、 || 、！!(obj)、三元运算符等</h3><pre><code>if(data &amp;&amp; data.length) //这是合理的判断，&amp;&amp;是依次判断，遇否中断， 建议\nvar name = data.name || &#39;&#39;; //依次都判断，遇true赋值，建议\nvar isName = names.split(&#39;,&#39;).lenght &gt; 1 ? &#39;名称正确&#39;： &#39;名称错误&#39;;\nvar isCanvas = !!(canvas.getContext(&#39;2d&#39;));\n</code></pre>\n<h3 id=\"请使用字面量值创建对象\"><a href=\"#请使用字面量值创建对象\" class=\"headerlink\" title=\"请使用字面量值创建对象\"></a>请使用字面量值创建对象</h3><pre><code>// Good\nvar obj = &#123;&#125;;\nvar users = [];\nvar str = &#39;abc&#39;;\nvar num = 1;\nvar isDefault = false;\n\n// bad\nvar obj = new Object();\nvar users = new Array();\nvar str = new String(&#39;abc&#39;);\nvar num = new Number(1);\nvar isDefault = new Boolean(false);\n</code></pre>\n<h3 id=\"别使用javascript-关键字和保留字\"><a href=\"#别使用javascript-关键字和保留字\" class=\"headerlink\" title=\"别使用javascript 关键字和保留字\"></a>别使用javascript 关键字和保留字</h3><pre><code>// 比如 class 是保留字\nvar obj = &#123;\n    name: &#39;userid&#39;,\n    class: &#39;text-left&#39;\n&#125;;\n</code></pre>\n<h3 id=\"只调用一次的函数就别单独声明了\"><a href=\"#只调用一次的函数就别单独声明了\" class=\"headerlink\" title=\"只调用一次的函数就别单独声明了\"></a>只调用一次的函数就别单独声明了</h3><pre><code>function getData () &#123;\n    $.get(&#39;/abc&#39;, getDataCallback)\n&#125;\nfunction getDataCallback (data) &#123;\n    console.log(data);\n&#125;\n\nfunction getData () &#123;\n    $.get(&#39;/abc&#39;, function  (data) &#123;\n        console.log(data);\n    &#125;)\n&#125;\n</code></pre>\n<p>关键字</p>\n<pre><code>break\ncase\ncatch\ncontinue\ndefault\ndelete\ndo\nelse\nfinally\nfor\nfunction\nif\nin\ninstanceof\nnew\nreturn\nswitch\nthis\nthrow\ntry\ntypeof\nvar\nvoid\nwhile\nwith\n</code></pre>\n<p>保留字</p>\n<pre><code>abstract\nboolean\nbyte\nchar\nclass\nconst\ndebugger\ndouble\nenum\nexport\nextends\nfinal\nfloat\ngoto\nimplements\nimport\nint\ninterface\nlong\nnative\npackage\nprivate\nprotected\npublic\nshort\nstatic\nsuper\nsynchronized\nthrows\ntransient\nvolatile\n</code></pre>\n<h3 id=\"不要使用-eval\"><a href=\"#不要使用-eval\" class=\"headerlink\" title=\"不要使用 eval()\"></a>不要使用 eval()</h3><ul>\n<li>eval 太神秘了，以至于很多人用错。所以不推荐使用</li>\n<li>说到性能问题，在旧的浏览器中如果你使用了eval，性能会下降10倍</li>\n</ul>\n<p>setInterval和setTimeout 传递字符串也是变相使用eval</p>\n<pre><code>setInterval(&#39;foo()&#39;, 100)\n</code></pre>\n<h3 id=\"不用switch\"><a href=\"#不用switch\" class=\"headerlink\" title=\"不用switch\"></a>不用switch</h3><ul>\n<li>容易漏掉break</li>\n<li>没有 if else 清晰</li>\n<li></li>\n</ul>\n<h3 id=\"不要用setAttribute-修改元素的布尔类型的属性\"><a href=\"#不要用setAttribute-修改元素的布尔类型的属性\" class=\"headerlink\" title=\"不要用setAttribute 修改元素的布尔类型的属性\"></a>不要用setAttribute 修改元素的布尔类型的属性</h3><p><strong>根据官方的建议：具有 true 和 false 两个属性的属性，这些checked、 selected、 readonly、 disabled、 autocomplete、autoplay、loop、muted、preload、autofocus、required、open 使用prop()，其他的使用 attr()</strong></p>\n<pre><code>// bad\n$option.attr(&#39;selected&#39;, &#39;selected&#39;); // jquery 的方法\noption.setAttribute(&#39;selected&#39;, &#39;selected&#39;); 原生的方法\n\n// good\n$option.prop(&#39;selected&#39;, true); // jquery 的方法\noption.selected = true; 原生的方法\n</code></pre>\n<h3 id=\"jQuery最佳实践\"><a href=\"#jQuery最佳实践\" class=\"headerlink\" title=\"jQuery最佳实践\"></a>jQuery最佳实践</h3><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">jQuery最佳实践</a></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>推荐你们都读一遍或者多遍这本书，里面有javascript最好的实践。<br>公司有购买的在书架上</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521780545495&di=b26fccd445887ce52807fb3bfa3a43bd&imgtype=0&src=http://ec4.images-amazon.com/images/I/511yJOQpxvL.jpg\" alt=\"Alt text\"></p>\n"},{"title":"常见算法","date":"2023-11-15T13:21:43.524Z","updated":"2024-07-21T06:09:38.268Z","_content":"\n## 斐波那次数列\n``` javascript\n// 节省内存空间，没有重复计算\nfunction fibonacci(n){\n\tif (n < 2) {\n\t\treturn;\n\t}\n\tlet tmp1 = 1;\n\tlet tmp2 = 1;\n\tlet tmp3;\n\tfor (var i = 1; i < n; i++) {\n\t\ttmp3 = tmp1 + tmp2;\n\t\ttmp1 = tmp2;\n\t\ttmp2 = tmp3;\n\t}\n\treturn tmp3;\n}\nconsole.log(fibonacci(9))\n```\n\n\n## 快速排序\n\n``` javascript\nfunction quickSort(arr) {\n    // 交换\n    function swap(arr, a, b) {\n    \tconsole.log('swap ' + arr[a] + '   ' + arr[b])\n        var temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    }\n\n    // 分区\n    function partition(arr, left, right) {\n        /**\n         * 开始时不知最终pivot的存放位置，可以先将pivot交换到后面去\n         * 这里直接定义最右边的元素为基准\n         */\n        var pivot = arr[right];\n        /**\n         * 存放小于pivot的元素时，是紧挨着上一元素的，否则空隙里存放的可能是大于pivot的元素，\n         * 故声明一个storeIndex变量，并初始化为left来依次紧挨着存放小于pivot的元素。\n         */\n        var storeIndex = left;\n        for (var i = left; i < right; i++) {\n            if (arr[i] < pivot) {\n                /**\n                 * 遍历数组，找到小于的pivot的元素，（大于pivot的元素会跳过）\n                 * 将循环i次时得到的元素，通过swap交换放到storeIndex处，\n                 * 并对storeIndex递增1，表示下一个可能要交换的位置\n                 */\n                swap(arr, storeIndex, i);\n                storeIndex++;\n            }\n        }\n        // 最后： 将pivot交换到storeIndex处，基准元素放置到最终正确位置上\n        swap(arr, right, storeIndex);\n\n    \tconsole.log('storeIndex ' + storeIndex)\n        return storeIndex;\n    }\n\n    function sort(arr, left, right) {\n        if (left > right) return;\n\n        /*\n        \t以最后一个为标准，比它小的移动到前面，\n        \t存储一个index。index最后一个是它，前面是比它小的数。\n        */\n        var storeIndex = partition(arr, left, right);\n        // 然后依次递归调用index左边和右边的项\n        sort(arr, left, storeIndex - 1);\n        sort(arr, storeIndex + 1, right);\n    }\n\n    sort(arr, 0, arr.length - 1);\n    return arr;\n}\n```\n\n## 二叉树\n\n``` javascript\nclass Node {\n  constructor(key) {\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n}\nclass BinarySearchTree {\n  constructor(keys) {\n    this.root = null;\n    keys.forEach((key) => {\n      let newNode = new Node(key)\n      if (this.root === null) {\n        this.root = newNode\n      } else {\n        this.insertNode(this.root, newNode)\n      }\n    })\n  }\n  insertNode(node, newNode) {\n    if (newNode.key < node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        this.insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        this.insertNode(node.right, newNode)\n      }\n    }\n  }\n  traverse(node, order, callback) {\n    if (node !== null) {\n      order === 'root-left-right' && callback(node.key);\n      this.traverse(node.left, order, callback)\n      order === 'left-root-right' && callback(node.key);\n      this.traverse(node.right, order, callback)\n      order === 'left-right-root' && callback(node.key);\n    }\n  }\n  findMin () {\n  \tlet node = this.root;\n  \twhile (node.left) {\n  \t\tnode = node.left;\n  \t}\n  \treturn node.key;\n  }\n  findMax () {\n  \tlet node = this.root;\n  \twhile (node.right) {\n  \t\tnode = node.right;\n  \t}\n  \treturn node.key;\n  }\n}\n/*\n  8\n /  \\\\\n 3   10\n/ \\\\   \\\\\n1 6    14\n / \\\\   /\n4   7 13\n*/\n\nconst keys = [8, 3, 10, 1, 6, 14, 4, 7, 13];\nconst tree = new BinarySearchTree(keys);\ntree.traverse(tree.root, 'left-right-root', (key) => {\n  console.log(key);\n});\nconsole.log('————');\nconsole.log('findMin: ' + tree.findMin());\nconsole.log('findMax: ' + tree.findMax());\n\n```\n\n## 微信红包算法\n - 所有人抢到金额之和等于红包总金额，不能超过，也不能少于；\n - 抢到的红包金额至少是一分钱；\n - 要保证抢到红包的人获取到的红包金额是随机的。\n\n``` javascript\nconst MIN_AMOUNT = 2; // 最小红包\nconst MAX_AMOUNT = 40; // 最大红包\nconst luckyPackages = (num, total) => {\n    const result = new Array(num);\n    result.fill(MIN_AMOUNT);\n    let remainder = total - (num * MIN_AMOUNT);\n    while(remainder > 0) {\n        const ran = Math.random();\n        const i = Math.floor(num * ran);\n        const split = remainder < 1 ? remainder\n             : Number(((remainder/4) * ran).toFixed(1));\n\n        if ((result[i] + split) <= MAX_AMOUNT) {\n            result[i] += split;\n            remainder -= split;\n        } else {\n            remainder -= MAX_AMOUNT - result[i];\n            result[i] = MAX_AMOUNT;\n        }\n    }\n    result.forEach((n, i) => {\n        result[i] = Number(n.toFixed(1))\n    });\n    console.log(result.reduce((total, num) => {\n        return total + Number(num);\n    }, 0))\n    console.log(result.join(', '));\n};\nluckyPackages(20, 200);\n```\n\n\n## js 实现两个字符串数字相加（大数相加）\n\n我面试抖音的面试题，中等难度\n\n``` javascript\nconst addStr = (num1, num2) => {\n  const len = Math.max(num1.length, num2.length);\n  const str1 = num1.padStart(len, '0')\n  const str2 = num2.padStart(len, '0')\n  const result = [];\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(parseInt(str1[i] || 0) + parseInt(str2[i] || 0));\n  }\n  return result.reverse().join('');\n};\nconsole.log(addStr('123454321', '456'))\n```\n\n## 八皇后问题\n\n八皇后问题，是一个古老而著名的问题，是 回溯算法 的典型案例。\n该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。\n使用回溯算法，高斯认为有 76 种方案。1854年在柏林的象棋杂志上不同的作者发表了 40 种不同的解，后来有人用图论的方法解出 92 种结果\n\n``` javascript\nfunction hasConflict(row, column, queens) { //  判断是否与已摆放的皇后冲突\n    return queens.some(a => a[0] === row) || // 同一行\n           queens.some(a => a[1] === column) || // 同一列\n           queens.some(a => Math.abs(a[0] - row) === Math.abs(a[1] - column)); // 同斜线\n}\nfunction printQ(queens){ //   打印结果\n    const str = Array.from({ length: 8 }, () => Array(8).fill('-'));\n    queens.forEach(a => {\n        str[a[0]][a[1]] = 'Q';\n    })\n    console.log(str.map(a => a.join(' ')).join('\\n'))\n}\nlet count = 0;\nfunction find_queen(row, queens) { // 递归放置皇后\n    if (row === 8) {\n        count++;\n        console.log('Eight Queens Solve ' +count)\n        printQ(queens);\n        return;\n    }\n    for(let column = 0; column < 8; column++) {\n        if (!hasConflict(row, column, queens)) {\n            queens.push([row, column]);\n            find_queen(row+1, queens); // 可以放置，接下来继续放置下一行\n            queens.pop(); //  回溯算法 最最重要！！！\n        }\n    }\n}\nfind_queen(0, []);\n```","source":"_posts/common-algorithm.md","raw":"---\ntitle: 常见算法\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n## 斐波那次数列\n``` javascript\n// 节省内存空间，没有重复计算\nfunction fibonacci(n){\n\tif (n < 2) {\n\t\treturn;\n\t}\n\tlet tmp1 = 1;\n\tlet tmp2 = 1;\n\tlet tmp3;\n\tfor (var i = 1; i < n; i++) {\n\t\ttmp3 = tmp1 + tmp2;\n\t\ttmp1 = tmp2;\n\t\ttmp2 = tmp3;\n\t}\n\treturn tmp3;\n}\nconsole.log(fibonacci(9))\n```\n\n\n## 快速排序\n\n``` javascript\nfunction quickSort(arr) {\n    // 交换\n    function swap(arr, a, b) {\n    \tconsole.log('swap ' + arr[a] + '   ' + arr[b])\n        var temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    }\n\n    // 分区\n    function partition(arr, left, right) {\n        /**\n         * 开始时不知最终pivot的存放位置，可以先将pivot交换到后面去\n         * 这里直接定义最右边的元素为基准\n         */\n        var pivot = arr[right];\n        /**\n         * 存放小于pivot的元素时，是紧挨着上一元素的，否则空隙里存放的可能是大于pivot的元素，\n         * 故声明一个storeIndex变量，并初始化为left来依次紧挨着存放小于pivot的元素。\n         */\n        var storeIndex = left;\n        for (var i = left; i < right; i++) {\n            if (arr[i] < pivot) {\n                /**\n                 * 遍历数组，找到小于的pivot的元素，（大于pivot的元素会跳过）\n                 * 将循环i次时得到的元素，通过swap交换放到storeIndex处，\n                 * 并对storeIndex递增1，表示下一个可能要交换的位置\n                 */\n                swap(arr, storeIndex, i);\n                storeIndex++;\n            }\n        }\n        // 最后： 将pivot交换到storeIndex处，基准元素放置到最终正确位置上\n        swap(arr, right, storeIndex);\n\n    \tconsole.log('storeIndex ' + storeIndex)\n        return storeIndex;\n    }\n\n    function sort(arr, left, right) {\n        if (left > right) return;\n\n        /*\n        \t以最后一个为标准，比它小的移动到前面，\n        \t存储一个index。index最后一个是它，前面是比它小的数。\n        */\n        var storeIndex = partition(arr, left, right);\n        // 然后依次递归调用index左边和右边的项\n        sort(arr, left, storeIndex - 1);\n        sort(arr, storeIndex + 1, right);\n    }\n\n    sort(arr, 0, arr.length - 1);\n    return arr;\n}\n```\n\n## 二叉树\n\n``` javascript\nclass Node {\n  constructor(key) {\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n}\nclass BinarySearchTree {\n  constructor(keys) {\n    this.root = null;\n    keys.forEach((key) => {\n      let newNode = new Node(key)\n      if (this.root === null) {\n        this.root = newNode\n      } else {\n        this.insertNode(this.root, newNode)\n      }\n    })\n  }\n  insertNode(node, newNode) {\n    if (newNode.key < node.key) {\n      if (node.left === null) {\n        node.left = newNode\n      } else {\n        this.insertNode(node.left, newNode)\n      }\n    } else {\n      if (node.right === null) {\n        node.right = newNode\n      } else {\n        this.insertNode(node.right, newNode)\n      }\n    }\n  }\n  traverse(node, order, callback) {\n    if (node !== null) {\n      order === 'root-left-right' && callback(node.key);\n      this.traverse(node.left, order, callback)\n      order === 'left-root-right' && callback(node.key);\n      this.traverse(node.right, order, callback)\n      order === 'left-right-root' && callback(node.key);\n    }\n  }\n  findMin () {\n  \tlet node = this.root;\n  \twhile (node.left) {\n  \t\tnode = node.left;\n  \t}\n  \treturn node.key;\n  }\n  findMax () {\n  \tlet node = this.root;\n  \twhile (node.right) {\n  \t\tnode = node.right;\n  \t}\n  \treturn node.key;\n  }\n}\n/*\n  8\n /  \\\\\n 3   10\n/ \\\\   \\\\\n1 6    14\n / \\\\   /\n4   7 13\n*/\n\nconst keys = [8, 3, 10, 1, 6, 14, 4, 7, 13];\nconst tree = new BinarySearchTree(keys);\ntree.traverse(tree.root, 'left-right-root', (key) => {\n  console.log(key);\n});\nconsole.log('————');\nconsole.log('findMin: ' + tree.findMin());\nconsole.log('findMax: ' + tree.findMax());\n\n```\n\n## 微信红包算法\n - 所有人抢到金额之和等于红包总金额，不能超过，也不能少于；\n - 抢到的红包金额至少是一分钱；\n - 要保证抢到红包的人获取到的红包金额是随机的。\n\n``` javascript\nconst MIN_AMOUNT = 2; // 最小红包\nconst MAX_AMOUNT = 40; // 最大红包\nconst luckyPackages = (num, total) => {\n    const result = new Array(num);\n    result.fill(MIN_AMOUNT);\n    let remainder = total - (num * MIN_AMOUNT);\n    while(remainder > 0) {\n        const ran = Math.random();\n        const i = Math.floor(num * ran);\n        const split = remainder < 1 ? remainder\n             : Number(((remainder/4) * ran).toFixed(1));\n\n        if ((result[i] + split) <= MAX_AMOUNT) {\n            result[i] += split;\n            remainder -= split;\n        } else {\n            remainder -= MAX_AMOUNT - result[i];\n            result[i] = MAX_AMOUNT;\n        }\n    }\n    result.forEach((n, i) => {\n        result[i] = Number(n.toFixed(1))\n    });\n    console.log(result.reduce((total, num) => {\n        return total + Number(num);\n    }, 0))\n    console.log(result.join(', '));\n};\nluckyPackages(20, 200);\n```\n\n\n## js 实现两个字符串数字相加（大数相加）\n\n我面试抖音的面试题，中等难度\n\n``` javascript\nconst addStr = (num1, num2) => {\n  const len = Math.max(num1.length, num2.length);\n  const str1 = num1.padStart(len, '0')\n  const str2 = num2.padStart(len, '0')\n  const result = [];\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(parseInt(str1[i] || 0) + parseInt(str2[i] || 0));\n  }\n  return result.reverse().join('');\n};\nconsole.log(addStr('123454321', '456'))\n```\n\n## 八皇后问题\n\n八皇后问题，是一个古老而著名的问题，是 回溯算法 的典型案例。\n该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。\n使用回溯算法，高斯认为有 76 种方案。1854年在柏林的象棋杂志上不同的作者发表了 40 种不同的解，后来有人用图论的方法解出 92 种结果\n\n``` javascript\nfunction hasConflict(row, column, queens) { //  判断是否与已摆放的皇后冲突\n    return queens.some(a => a[0] === row) || // 同一行\n           queens.some(a => a[1] === column) || // 同一列\n           queens.some(a => Math.abs(a[0] - row) === Math.abs(a[1] - column)); // 同斜线\n}\nfunction printQ(queens){ //   打印结果\n    const str = Array.from({ length: 8 }, () => Array(8).fill('-'));\n    queens.forEach(a => {\n        str[a[0]][a[1]] = 'Q';\n    })\n    console.log(str.map(a => a.join(' ')).join('\\n'))\n}\nlet count = 0;\nfunction find_queen(row, queens) { // 递归放置皇后\n    if (row === 8) {\n        count++;\n        console.log('Eight Queens Solve ' +count)\n        printQ(queens);\n        return;\n    }\n    for(let column = 0; column < 8; column++) {\n        if (!hasConflict(row, column, queens)) {\n            queens.push([row, column]);\n            find_queen(row+1, queens); // 可以放置，接下来继续放置下一行\n            queens.pop(); //  回溯算法 最最重要！！！\n        }\n    }\n}\nfind_queen(0, []);\n```","slug":"common-algorithm","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w10005fm5yh3yz4sk3","content":"<h2 id=\"斐波那次数列\"><a href=\"#斐波那次数列\" class=\"headerlink\" title=\"斐波那次数列\"></a>斐波那次数列</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节省内存空间，没有重复计算</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttmp3 = tmp1 + tmp2;</span><br><span class=\"line\">\t\ttmp1 = tmp2;</span><br><span class=\"line\">\t\ttmp2 = tmp3;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tmp3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fibonacci</span>(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 交换</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">swap</span>(<span class=\"params\">arr, a, b</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;swap &#x27;</span> + arr[a] + <span class=\"string\">&#x27;   &#x27;</span> + arr[b])</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[a];</span><br><span class=\"line\">        arr[a] = arr[b];</span><br><span class=\"line\">        arr[b] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分区</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, left, right</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 开始时不知最终pivot的存放位置，可以先将pivot交换到后面去</span></span><br><span class=\"line\"><span class=\"comment\">         * 这里直接定义最右边的元素为基准</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> pivot = arr[right];</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 存放小于pivot的元素时，是紧挨着上一元素的，否则空隙里存放的可能是大于pivot的元素，</span></span><br><span class=\"line\"><span class=\"comment\">         * 故声明一个storeIndex变量，并初始化为left来依次紧挨着存放小于pivot的元素。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> storeIndex = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = left; i &lt; right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 遍历数组，找到小于的pivot的元素，（大于pivot的元素会跳过）</span></span><br><span class=\"line\"><span class=\"comment\">                 * 将循环i次时得到的元素，通过swap交换放到storeIndex处，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 并对storeIndex递增1，表示下一个可能要交换的位置</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"title function_\">swap</span>(arr, storeIndex, i);</span><br><span class=\"line\">                storeIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后： 将pivot交换到storeIndex处，基准元素放置到最终正确位置上</span></span><br><span class=\"line\">        <span class=\"title function_\">swap</span>(arr, right, storeIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;storeIndex &#x27;</span> + storeIndex)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storeIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">arr, left, right</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        \t以最后一个为标准，比它小的移动到前面，</span></span><br><span class=\"line\"><span class=\"comment\">        \t存储一个index。index最后一个是它，前面是比它小的数。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> storeIndex = <span class=\"title function_\">partition</span>(arr, left, right);</span><br><span class=\"line\">        <span class=\"comment\">// 然后依次递归调用index左边和右边的项</span></span><br><span class=\"line\">        <span class=\"title function_\">sort</span>(arr, left, storeIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">sort</span>(arr, storeIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">sort</span>(arr, <span class=\"number\">0</span>, arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">keys</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    keys.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">root</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">insertNode</span>(<span class=\"params\">node, newNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.<span class=\"property\">key</span> &lt; node.<span class=\"property\">key</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.<span class=\"property\">left</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(node.<span class=\"property\">left</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.<span class=\"property\">right</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(node.<span class=\"property\">right</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">traverse</span>(<span class=\"params\">node, order, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;root-left-right&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverse</span>(node.<span class=\"property\">left</span>, order, callback)</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;left-root-right&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverse</span>(node.<span class=\"property\">right</span>, order, callback)</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;left-right-root&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  findMin () &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> node = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">  \t\tnode = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> node.<span class=\"property\">key</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  findMax () &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> node = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">  \t\tnode = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> node.<span class=\"property\">key</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  8</span></span><br><span class=\"line\"><span class=\"comment\"> /  \\\\</span></span><br><span class=\"line\"><span class=\"comment\"> 3   10</span></span><br><span class=\"line\"><span class=\"comment\">/ \\\\   \\\\</span></span><br><span class=\"line\"><span class=\"comment\">1 6    14</span></span><br><span class=\"line\"><span class=\"comment\"> / \\\\   /</span></span><br><span class=\"line\"><span class=\"comment\">4   7 13</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = [<span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> tree = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTree</span>(keys);</span><br><span class=\"line\">tree.<span class=\"title function_\">traverse</span>(tree.<span class=\"property\">root</span>, <span class=\"string\">&#x27;left-right-root&#x27;</span>, <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;————&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;findMin: &#x27;</span> + tree.<span class=\"title function_\">findMin</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;findMax: &#x27;</span> + tree.<span class=\"title function_\">findMax</span>());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"微信红包算法\"><a href=\"#微信红包算法\" class=\"headerlink\" title=\"微信红包算法\"></a>微信红包算法</h2><ul>\n<li>所有人抢到金额之和等于红包总金额，不能超过，也不能少于；</li>\n<li>抢到的红包金额至少是一分钱；</li>\n<li>要保证抢到红包的人获取到的红包金额是随机的。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MIN_AMOUNT</span> = <span class=\"number\">2</span>; <span class=\"comment\">// 最小红包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX_AMOUNT</span> = <span class=\"number\">40</span>; <span class=\"comment\">// 最大红包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">luckyPackages</span> = (<span class=\"params\">num, total</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(num);</span><br><span class=\"line\">    result.<span class=\"title function_\">fill</span>(<span class=\"variable constant_\">MIN_AMOUNT</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remainder = total - (num * <span class=\"variable constant_\">MIN_AMOUNT</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(remainder &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ran = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num * ran);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> split = remainder &lt; <span class=\"number\">1</span> ? remainder</span><br><span class=\"line\">             : <span class=\"title class_\">Number</span>(((remainder/<span class=\"number\">4</span>) * ran).<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((result[i] + split) &lt;= <span class=\"variable constant_\">MAX_AMOUNT</span>) &#123;</span><br><span class=\"line\">            result[i] += split;</span><br><span class=\"line\">            remainder -= split;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            remainder -= <span class=\"variable constant_\">MAX_AMOUNT</span> - result[i];</span><br><span class=\"line\">            result[i] = <span class=\"variable constant_\">MAX_AMOUNT</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = <span class=\"title class_\">Number</span>(n.<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">total, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total + <span class=\"title class_\">Number</span>(num);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;, &#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">luckyPackages</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"js-实现两个字符串数字相加（大数相加）\"><a href=\"#js-实现两个字符串数字相加（大数相加）\" class=\"headerlink\" title=\"js 实现两个字符串数字相加（大数相加）\"></a>js 实现两个字符串数字相加（大数相加）</h2><p>我面试抖音的面试题，中等难度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">addStr</span> = (<span class=\"params\">num1, num2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(num1.<span class=\"property\">length</span>, num2.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str1 = num1.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str2 = num2.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(<span class=\"built_in\">parseInt</span>(str1[i] || <span class=\"number\">0</span>) + <span class=\"built_in\">parseInt</span>(str2[i] || <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addStr</span>(<span class=\"string\">&#x27;123454321&#x27;</span>, <span class=\"string\">&#x27;456&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h2><p>八皇后问题，是一个古老而著名的问题，是 回溯算法 的典型案例。<br>该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。<br>使用回溯算法，高斯认为有 76 种方案。1854年在柏林的象棋杂志上不同的作者发表了 40 种不同的解，后来有人用图论的方法解出 92 种结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasConflict</span>(<span class=\"params\">row, column, queens</span>) &#123; <span class=\"comment\">//  判断是否与已摆放的皇后冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a[<span class=\"number\">0</span>] === row) || <span class=\"comment\">// 同一行</span></span><br><span class=\"line\">           queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a[<span class=\"number\">1</span>] === column) || <span class=\"comment\">// 同一列</span></span><br><span class=\"line\">           queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(a[<span class=\"number\">0</span>] - row) === <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(a[<span class=\"number\">1</span>] - column)); <span class=\"comment\">// 同斜线</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printQ</span>(<span class=\"params\">queens</span>)&#123; <span class=\"comment\">//   打印结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">8</span> &#125;, <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Array</span>(<span class=\"number\">8</span>).<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;-&#x27;</span>));</span><br><span class=\"line\">    queens.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> &#123;</span><br><span class=\"line\">        str[a[<span class=\"number\">0</span>]][a[<span class=\"number\">1</span>]] = <span class=\"string\">&#x27;Q&#x27;</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find_queen</span>(<span class=\"params\">row, queens</span>) &#123; <span class=\"comment\">// 递归放置皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row === <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Eight Queens Solve &#x27;</span> +count)</span><br><span class=\"line\">        <span class=\"title function_\">printQ</span>(queens);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> column = <span class=\"number\">0</span>; column &lt; <span class=\"number\">8</span>; column++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">hasConflict</span>(row, column, queens)) &#123;</span><br><span class=\"line\">            queens.<span class=\"title function_\">push</span>([row, column]);</span><br><span class=\"line\">            <span class=\"title function_\">find_queen</span>(row+<span class=\"number\">1</span>, queens); <span class=\"comment\">// 可以放置，接下来继续放置下一行</span></span><br><span class=\"line\">            queens.<span class=\"title function_\">pop</span>(); <span class=\"comment\">//  回溯算法 最最重要！！！</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">find_queen</span>(<span class=\"number\">0</span>, []);</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"斐波那次数列\"><a href=\"#斐波那次数列\" class=\"headerlink\" title=\"斐波那次数列\"></a>斐波那次数列</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节省内存空间，没有重复计算</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tmp3;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\ttmp3 = tmp1 + tmp2;</span><br><span class=\"line\">\t\ttmp1 = tmp2;</span><br><span class=\"line\">\t\ttmp2 = tmp3;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tmp3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fibonacci</span>(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 交换</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">swap</span>(<span class=\"params\">arr, a, b</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;swap &#x27;</span> + arr[a] + <span class=\"string\">&#x27;   &#x27;</span> + arr[b])</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[a];</span><br><span class=\"line\">        arr[a] = arr[b];</span><br><span class=\"line\">        arr[b] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分区</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, left, right</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 开始时不知最终pivot的存放位置，可以先将pivot交换到后面去</span></span><br><span class=\"line\"><span class=\"comment\">         * 这里直接定义最右边的元素为基准</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> pivot = arr[right];</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 存放小于pivot的元素时，是紧挨着上一元素的，否则空隙里存放的可能是大于pivot的元素，</span></span><br><span class=\"line\"><span class=\"comment\">         * 故声明一个storeIndex变量，并初始化为left来依次紧挨着存放小于pivot的元素。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> storeIndex = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = left; i &lt; right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 遍历数组，找到小于的pivot的元素，（大于pivot的元素会跳过）</span></span><br><span class=\"line\"><span class=\"comment\">                 * 将循环i次时得到的元素，通过swap交换放到storeIndex处，</span></span><br><span class=\"line\"><span class=\"comment\">                 * 并对storeIndex递增1，表示下一个可能要交换的位置</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"title function_\">swap</span>(arr, storeIndex, i);</span><br><span class=\"line\">                storeIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后： 将pivot交换到storeIndex处，基准元素放置到最终正确位置上</span></span><br><span class=\"line\">        <span class=\"title function_\">swap</span>(arr, right, storeIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;storeIndex &#x27;</span> + storeIndex)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storeIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">arr, left, right</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        \t以最后一个为标准，比它小的移动到前面，</span></span><br><span class=\"line\"><span class=\"comment\">        \t存储一个index。index最后一个是它，前面是比它小的数。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> storeIndex = <span class=\"title function_\">partition</span>(arr, left, right);</span><br><span class=\"line\">        <span class=\"comment\">// 然后依次递归调用index左边和右边的项</span></span><br><span class=\"line\">        <span class=\"title function_\">sort</span>(arr, left, storeIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"title function_\">sort</span>(arr, storeIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">sort</span>(arr, <span class=\"number\">0</span>, arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinarySearchTree</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">keys</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    keys.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">root</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">insertNode</span>(<span class=\"params\">node, newNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode.<span class=\"property\">key</span> &lt; node.<span class=\"property\">key</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.<span class=\"property\">left</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(node.<span class=\"property\">left</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.<span class=\"property\">right</span> = newNode</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">insertNode</span>(node.<span class=\"property\">right</span>, newNode)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">traverse</span>(<span class=\"params\">node, order, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;root-left-right&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverse</span>(node.<span class=\"property\">left</span>, order, callback)</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;left-root-right&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">traverse</span>(node.<span class=\"property\">right</span>, order, callback)</span><br><span class=\"line\">      order === <span class=\"string\">&#x27;left-right-root&#x27;</span> &amp;&amp; <span class=\"title function_\">callback</span>(node.<span class=\"property\">key</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  findMin () &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> node = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">  \t\tnode = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> node.<span class=\"property\">key</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  findMax () &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> node = <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">  \t\tnode = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> node.<span class=\"property\">key</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  8</span></span><br><span class=\"line\"><span class=\"comment\"> /  \\\\</span></span><br><span class=\"line\"><span class=\"comment\"> 3   10</span></span><br><span class=\"line\"><span class=\"comment\">/ \\\\   \\\\</span></span><br><span class=\"line\"><span class=\"comment\">1 6    14</span></span><br><span class=\"line\"><span class=\"comment\"> / \\\\   /</span></span><br><span class=\"line\"><span class=\"comment\">4   7 13</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = [<span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> tree = <span class=\"keyword\">new</span> <span class=\"title class_\">BinarySearchTree</span>(keys);</span><br><span class=\"line\">tree.<span class=\"title function_\">traverse</span>(tree.<span class=\"property\">root</span>, <span class=\"string\">&#x27;left-right-root&#x27;</span>, <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;————&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;findMin: &#x27;</span> + tree.<span class=\"title function_\">findMin</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;findMax: &#x27;</span> + tree.<span class=\"title function_\">findMax</span>());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"微信红包算法\"><a href=\"#微信红包算法\" class=\"headerlink\" title=\"微信红包算法\"></a>微信红包算法</h2><ul>\n<li>所有人抢到金额之和等于红包总金额，不能超过，也不能少于；</li>\n<li>抢到的红包金额至少是一分钱；</li>\n<li>要保证抢到红包的人获取到的红包金额是随机的。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MIN_AMOUNT</span> = <span class=\"number\">2</span>; <span class=\"comment\">// 最小红包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX_AMOUNT</span> = <span class=\"number\">40</span>; <span class=\"comment\">// 最大红包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">luckyPackages</span> = (<span class=\"params\">num, total</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(num);</span><br><span class=\"line\">    result.<span class=\"title function_\">fill</span>(<span class=\"variable constant_\">MIN_AMOUNT</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remainder = total - (num * <span class=\"variable constant_\">MIN_AMOUNT</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(remainder &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ran = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(num * ran);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> split = remainder &lt; <span class=\"number\">1</span> ? remainder</span><br><span class=\"line\">             : <span class=\"title class_\">Number</span>(((remainder/<span class=\"number\">4</span>) * ran).<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((result[i] + split) &lt;= <span class=\"variable constant_\">MAX_AMOUNT</span>) &#123;</span><br><span class=\"line\">            result[i] += split;</span><br><span class=\"line\">            remainder -= split;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            remainder -= <span class=\"variable constant_\">MAX_AMOUNT</span> - result[i];</span><br><span class=\"line\">            result[i] = <span class=\"variable constant_\">MAX_AMOUNT</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        result[i] = <span class=\"title class_\">Number</span>(n.<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">total, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total + <span class=\"title class_\">Number</span>(num);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;, &#x27;</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">luckyPackages</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"js-实现两个字符串数字相加（大数相加）\"><a href=\"#js-实现两个字符串数字相加（大数相加）\" class=\"headerlink\" title=\"js 实现两个字符串数字相加（大数相加）\"></a>js 实现两个字符串数字相加（大数相加）</h2><p>我面试抖音的面试题，中等难度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">addStr</span> = (<span class=\"params\">num1, num2</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(num1.<span class=\"property\">length</span>, num2.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str1 = num1.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str2 = num2.<span class=\"title function_\">padStart</span>(len, <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(<span class=\"built_in\">parseInt</span>(str1[i] || <span class=\"number\">0</span>) + <span class=\"built_in\">parseInt</span>(str2[i] || <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addStr</span>(<span class=\"string\">&#x27;123454321&#x27;</span>, <span class=\"string\">&#x27;456&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h2><p>八皇后问题，是一个古老而著名的问题，是 回溯算法 的典型案例。<br>该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。<br>使用回溯算法，高斯认为有 76 种方案。1854年在柏林的象棋杂志上不同的作者发表了 40 种不同的解，后来有人用图论的方法解出 92 种结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasConflict</span>(<span class=\"params\">row, column, queens</span>) &#123; <span class=\"comment\">//  判断是否与已摆放的皇后冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a[<span class=\"number\">0</span>] === row) || <span class=\"comment\">// 同一行</span></span><br><span class=\"line\">           queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a[<span class=\"number\">1</span>] === column) || <span class=\"comment\">// 同一列</span></span><br><span class=\"line\">           queens.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(a[<span class=\"number\">0</span>] - row) === <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(a[<span class=\"number\">1</span>] - column)); <span class=\"comment\">// 同斜线</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printQ</span>(<span class=\"params\">queens</span>)&#123; <span class=\"comment\">//   打印结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">8</span> &#125;, <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Array</span>(<span class=\"number\">8</span>).<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;-&#x27;</span>));</span><br><span class=\"line\">    queens.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> &#123;</span><br><span class=\"line\">        str[a[<span class=\"number\">0</span>]][a[<span class=\"number\">1</span>]] = <span class=\"string\">&#x27;Q&#x27;</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find_queen</span>(<span class=\"params\">row, queens</span>) &#123; <span class=\"comment\">// 递归放置皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row === <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Eight Queens Solve &#x27;</span> +count)</span><br><span class=\"line\">        <span class=\"title function_\">printQ</span>(queens);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> column = <span class=\"number\">0</span>; column &lt; <span class=\"number\">8</span>; column++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">hasConflict</span>(row, column, queens)) &#123;</span><br><span class=\"line\">            queens.<span class=\"title function_\">push</span>([row, column]);</span><br><span class=\"line\">            <span class=\"title function_\">find_queen</span>(row+<span class=\"number\">1</span>, queens); <span class=\"comment\">// 可以放置，接下来继续放置下一行</span></span><br><span class=\"line\">            queens.<span class=\"title function_\">pop</span>(); <span class=\"comment\">//  回溯算法 最最重要！！！</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">find_queen</span>(<span class=\"number\">0</span>, []);</span><br></pre></td></tr></table></figure>"},{"title":"深入理解计算机系统（csapp）作业解答","date":"2023-11-15T13:21:43.525Z","updated":"2023-11-15T13:21:43.525Z","_content":"\n# 第二部分\n## 第二章\n2.55 实现show_bytes\n2.56 试着用不同的值运行show_bytes\n``` c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len) {\nint i;\n\tfor(i=0; i<len; i++) {\n\t\tprintf(\"%.2x \", a[i]);\n\t}\n\tprintf(\"\\\\n\");\n}\nint main() {\n    int a = 123456789;\n    printf(\"show int %d\\\\n\", a);\n    show_bytes((byte_pointer)&a, sizeof(a));\n    return 0;\n}\n```\n2.57 编写show_short, show_long, show_double\n``` c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len) {\nint i;\n\tfor(i=0; i<len; i++) {\n\t\tprintf(\"%.2x \", a[i]);\n\t}\n\tprintf(\"\\\\n\");\n}\nvoid show_short(short s)\n{\n    printf(\"the value of short %d is:\", s);\n    show_bytes((char *)&s, sizeof(short));\n}\n\nvoid show_long(long long l)\n{\n    printf(\"the value of short %lld is:\", l);\n    show_bytes((char *)&l, sizeof(long long));\n}\n\nvoid show_double(double d)\n{\n    printf(\"the value of short %lf is:\", d);\n    show_bytes((char *)&d, sizeof(double));\n}\n\n\nint main() {\n    short a = 8;\n    show_short(a);\n    long b = 12345678;\n    show_long(b);\n    double c = 1234.5678;\n    show_double(c);\n    return 0;\n}\n```\n2.58 实现is_little_endian\n``` c\n#include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nint is_little_endian()\n{\n    int val = 0x00000001;\n    byte_pointer valp = (byte_pointer)&val;\n    int temp;\n    temp = valp[0];\n    if (temp == 1)\n        return 1;\n    else\n        return 0;\n}\n\nint main()\n{\n    int result = is_little_endian();\n    printf(\"is_little_endian: %d\", result);\n    return 1;\n}\n```\n2.59生成一个字，由X的最低有效字节和y剩下的字节组成\n``` c\n#include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len)\n{\n    int i;\n    for (i = 0; i < len; i++)\n    {\n        printf(\"%.2x \", a[i]);\n    }\n    printf(\"\\\\n\");\n}\n\nint main()\n{\n    int x = 0x89ABCDEF;\n    int y = 0x76543210;\n    int z = (x & 0xFF) | (y & ~0xFF);\n    show_bytes((byte_pointer)&z, sizeof(z));\n    return 1;\n}\n```\n2.60\n将一个w位的字中的字节从0到w/8-1编号，用C实现返回一个无符号值，其中参数x的字节i位被替换成字节b\n``` c\n#include <stdio.h>\n#include <inttypes.h>\n\ntypedef unsigned char *char_point;\n\nuint32_t replace_byte(uint32_t x, int i, unsigned char b)\n{\n    if (i > 3 || i < 0)\n    {\n        return -1;\n    }\n\n    char_point char_date_point = ((char_point)&x) + i;\n\n    *char_date_point = b;\n\n    printf(\"result : %X\\\\r\\\\n\", x);\n    return x;\n}\n\nint main(void)\n{\n    unsigned char replace_data = 0xAB;\n\n    uint32_t x = 0x12345678;\n    uint32_t r_x = 0x12AB5678;\n    int i_x = 2;\n\n    uint32_t y = x;\n    uint32_t r_y = 0x123456AB;\n    int i_y = 0;\n\n    printf(\"r_x == result : %d\\\\r\\\\n\", r_x == replace_byte(x, i_x, replace_data));\n    printf(\"r_y == result : %d\\\\r\\\\n\", r_y == replace_byte(y, i_y, replace_data));\n\n    return 1;\n}\n```","source":"_posts/csapp-homework.md","raw":"---\ntitle: 深入理解计算机系统（csapp）作业解答\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n# 第二部分\n## 第二章\n2.55 实现show_bytes\n2.56 试着用不同的值运行show_bytes\n``` c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len) {\nint i;\n\tfor(i=0; i<len; i++) {\n\t\tprintf(\"%.2x \", a[i]);\n\t}\n\tprintf(\"\\\\n\");\n}\nint main() {\n    int a = 123456789;\n    printf(\"show int %d\\\\n\", a);\n    show_bytes((byte_pointer)&a, sizeof(a));\n    return 0;\n}\n```\n2.57 编写show_short, show_long, show_double\n``` c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len) {\nint i;\n\tfor(i=0; i<len; i++) {\n\t\tprintf(\"%.2x \", a[i]);\n\t}\n\tprintf(\"\\\\n\");\n}\nvoid show_short(short s)\n{\n    printf(\"the value of short %d is:\", s);\n    show_bytes((char *)&s, sizeof(short));\n}\n\nvoid show_long(long long l)\n{\n    printf(\"the value of short %lld is:\", l);\n    show_bytes((char *)&l, sizeof(long long));\n}\n\nvoid show_double(double d)\n{\n    printf(\"the value of short %lf is:\", d);\n    show_bytes((char *)&d, sizeof(double));\n}\n\n\nint main() {\n    short a = 8;\n    show_short(a);\n    long b = 12345678;\n    show_long(b);\n    double c = 1234.5678;\n    show_double(c);\n    return 0;\n}\n```\n2.58 实现is_little_endian\n``` c\n#include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nint is_little_endian()\n{\n    int val = 0x00000001;\n    byte_pointer valp = (byte_pointer)&val;\n    int temp;\n    temp = valp[0];\n    if (temp == 1)\n        return 1;\n    else\n        return 0;\n}\n\nint main()\n{\n    int result = is_little_endian();\n    printf(\"is_little_endian: %d\", result);\n    return 1;\n}\n```\n2.59生成一个字，由X的最低有效字节和y剩下的字节组成\n``` c\n#include <stdio.h>\n\ntypedef unsigned char *byte_pointer;\n\nvoid show_bytes(byte_pointer a, int len)\n{\n    int i;\n    for (i = 0; i < len; i++)\n    {\n        printf(\"%.2x \", a[i]);\n    }\n    printf(\"\\\\n\");\n}\n\nint main()\n{\n    int x = 0x89ABCDEF;\n    int y = 0x76543210;\n    int z = (x & 0xFF) | (y & ~0xFF);\n    show_bytes((byte_pointer)&z, sizeof(z));\n    return 1;\n}\n```\n2.60\n将一个w位的字中的字节从0到w/8-1编号，用C实现返回一个无符号值，其中参数x的字节i位被替换成字节b\n``` c\n#include <stdio.h>\n#include <inttypes.h>\n\ntypedef unsigned char *char_point;\n\nuint32_t replace_byte(uint32_t x, int i, unsigned char b)\n{\n    if (i > 3 || i < 0)\n    {\n        return -1;\n    }\n\n    char_point char_date_point = ((char_point)&x) + i;\n\n    *char_date_point = b;\n\n    printf(\"result : %X\\\\r\\\\n\", x);\n    return x;\n}\n\nint main(void)\n{\n    unsigned char replace_data = 0xAB;\n\n    uint32_t x = 0x12345678;\n    uint32_t r_x = 0x12AB5678;\n    int i_x = 2;\n\n    uint32_t y = x;\n    uint32_t r_y = 0x123456AB;\n    int i_y = 0;\n\n    printf(\"r_x == result : %d\\\\r\\\\n\", r_x == replace_byte(x, i_x, replace_data));\n    printf(\"r_y == result : %d\\\\r\\\\n\", r_y == replace_byte(y, i_y, replace_data));\n\n    return 1;\n}\n```","slug":"csapp-homework","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w10006fm5ybal9hs14","content":"<h1 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h1><h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>2.55 实现show_bytes<br>2.56 试着用不同的值运行show_bytes</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;show int %d\\\\n&quot;</span>, a);</span><br><span class=\"line\">    show_bytes((byte_pointer)&amp;a, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.57 编写show_short, show_long, show_double</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_short</span><span class=\"params\">(<span class=\"type\">short</span> s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %d is:&quot;</span>, s);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;s, <span class=\"keyword\">sizeof</span>(<span class=\"type\">short</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_long</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> l)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %lld is:&quot;</span>, l);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;l, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_double</span><span class=\"params\">(<span class=\"type\">double</span> d)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %lf is:&quot;</span>, d);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;d, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">short</span> a = <span class=\"number\">8</span>;</span><br><span class=\"line\">    show_short(a);</span><br><span class=\"line\">    <span class=\"type\">long</span> b = <span class=\"number\">12345678</span>;</span><br><span class=\"line\">    show_long(b);</span><br><span class=\"line\">    <span class=\"type\">double</span> c = <span class=\"number\">1234.5678</span>;</span><br><span class=\"line\">    show_double(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.58 实现is_little_endian</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_little_endian</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">0x00000001</span>;</span><br><span class=\"line\">    byte_pointer valp = (byte_pointer)&amp;val;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp = valp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = is_little_endian();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;is_little_endian: %d&quot;</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.59生成一个字，由X的最低有效字节和y剩下的字节组成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0x89ABCDEF</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = <span class=\"number\">0x76543210</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z = (x &amp; <span class=\"number\">0xFF</span>) | (y &amp; ~<span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    show_bytes((byte_pointer)&amp;z, <span class=\"keyword\">sizeof</span>(z));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.60<br>将一个w位的字中的字节从0到w&#x2F;8-1编号，用C实现返回一个无符号值，其中参数x的字节i位被替换成字节b</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *char_point;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> <span class=\"title function_\">replace_byte</span><span class=\"params\">(<span class=\"type\">uint32_t</span> x, <span class=\"type\">int</span> i, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    char_point char_date_point = ((char_point)&amp;x) + i;</span><br><span class=\"line\"></span><br><span class=\"line\">    *char_date_point = b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result : %X\\\\r\\\\n&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> replace_data = <span class=\"number\">0xAB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> x = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> r_x = <span class=\"number\">0x12AB5678</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_x = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> y = x;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> r_y = <span class=\"number\">0x123456AB</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;r_x == result : %d\\\\r\\\\n&quot;</span>, r_x == replace_byte(x, i_x, replace_data));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;r_y == result : %d\\\\r\\\\n&quot;</span>, r_y == replace_byte(y, i_y, replace_data));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h1><h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>2.55 实现show_bytes<br>2.56 试着用不同的值运行show_bytes</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;show int %d\\\\n&quot;</span>, a);</span><br><span class=\"line\">    show_bytes((byte_pointer)&amp;a, <span class=\"keyword\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.57 编写show_short, show_long, show_double</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_short</span><span class=\"params\">(<span class=\"type\">short</span> s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %d is:&quot;</span>, s);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;s, <span class=\"keyword\">sizeof</span>(<span class=\"type\">short</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_long</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> l)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %lld is:&quot;</span>, l);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;l, <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span> <span class=\"type\">long</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_double</span><span class=\"params\">(<span class=\"type\">double</span> d)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the value of short %lf is:&quot;</span>, d);</span><br><span class=\"line\">    show_bytes((<span class=\"type\">char</span> *)&amp;d, <span class=\"keyword\">sizeof</span>(<span class=\"type\">double</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">short</span> a = <span class=\"number\">8</span>;</span><br><span class=\"line\">    show_short(a);</span><br><span class=\"line\">    <span class=\"type\">long</span> b = <span class=\"number\">12345678</span>;</span><br><span class=\"line\">    show_long(b);</span><br><span class=\"line\">    <span class=\"type\">double</span> c = <span class=\"number\">1234.5678</span>;</span><br><span class=\"line\">    show_double(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.58 实现is_little_endian</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">is_little_endian</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">0x00000001</span>;</span><br><span class=\"line\">    byte_pointer valp = (byte_pointer)&amp;val;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    temp = valp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result = is_little_endian();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;is_little_endian: %d&quot;</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.59生成一个字，由X的最低有效字节和y剩下的字节组成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *byte_pointer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">show_bytes</span><span class=\"params\">(byte_pointer a, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0x89ABCDEF</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = <span class=\"number\">0x76543210</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> z = (x &amp; <span class=\"number\">0xFF</span>) | (y &amp; ~<span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    show_bytes((byte_pointer)&amp;z, <span class=\"keyword\">sizeof</span>(z));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.60<br>将一个w位的字中的字节从0到w&#x2F;8-1编号，用C实现返回一个无符号值，其中参数x的字节i位被替换成字节b</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *char_point;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> <span class=\"title function_\">replace_byte</span><span class=\"params\">(<span class=\"type\">uint32_t</span> x, <span class=\"type\">int</span> i, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> b)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">3</span> || i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    char_point char_date_point = ((char_point)&amp;x) + i;</span><br><span class=\"line\"></span><br><span class=\"line\">    *char_date_point = b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result : %X\\\\r\\\\n&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> replace_data = <span class=\"number\">0xAB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> x = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> r_x = <span class=\"number\">0x12AB5678</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_x = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> y = x;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> r_y = <span class=\"number\">0x123456AB</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i_y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;r_x == result : %d\\\\r\\\\n&quot;</span>, r_x == replace_byte(x, i_x, replace_data));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;r_y == result : %d\\\\r\\\\n&quot;</span>, r_y == replace_byte(y, i_y, replace_data));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript实现康威生命游戏","date":"2023-11-15T13:21:43.526Z","updated":"2023-11-15T13:21:43.526Z","_content":"\n\n### 演示demo\n[生命游戏](https://raw.githack.com/bzw875/GameOfLife/master/00.html)\n\n### 定义\n\n康威生命游戏（英语：Conway's Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。\n它最初于1970年10月在《科学美国人》杂志上马丁·葛登能的“数学游戏”专栏出现。\n\n\n### 规则\n生命游戏中，对于任意细胞，规则如下：\n\n* 每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动（黑色为存活，白色为死亡）\n* 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）\n* 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。\n* 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n* 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\n\n可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后，可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。\n\n\n### 规则用代码表示\n``` javascript\n假如有个生命\nvar a = { x: 4, y: 4 }\n// 周围存活数为\nvar n = neighborLifeNumber();\n\n// 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。\nif (n < 2 && a.isLeft) {\n    a.isLeft = false;\n}\n\n// 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样\nif (n === 2 || n === 3 && a.isLeft) {\n    // 什么也不做\n}\n\n// 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\nif (n > 3 && a.isLeft) {\n    a.isLeft = false;\n}\n\n\n// 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\nif (n >= 3 && !a.isLeft) {\n    a.isLeft = true;\n}\n```\n\n### 核心算法就是\n* 假设现存的生命为 left\n* 根据 left 算计出邻居生命 neighbor (这里面有很多重复的生命)\n* 算出 neighbor 生命出现的次数并去重，得出 frequency\n* 从 frequency 过滤出现3次的生命得出 newLife（因为不管是死是活都会在下一轮转为活）\n* 从 frequency 过滤出现2次的生命得出 countIsTwo\n* 从 countIsTwo 、 left 算出同时出现的生命 nowlife ，这个是旧left因为有2个邻居而活下来的生命\n* 合并 newLife 、 nowlife得出下一轮活的生命\n\n\n### github 地址\n[github.com/bzw875/GameOfLife](https://github.com/bzw875/GameOfLife)\n\n### 完整代码\n\n``` javascript\n// 怎么使用\nnew CellLife({\n  width: 100, // 网格宽度\n  height: 100, // 网格高度\n  initialNumber: 500, // 初始化生命个数\n  cycleTime: 200, // 生命更新毫秒数\n  box: document.getElementById('root')\n});\n\n// 构造类\n\nclass CellLife {\n    constructor(options) {\n        const { width, height, cycleTime, initialNumber, box} = options;\n        this.width     = width;\n        this.height    = height;\n        this.cycleTime = cycleTime;\n        this.initialNumber = initialNumber;\n        this.box = box;\n\n        this.life = this.createCellByRandom();\n        this.createCheckerboard();\n    }\n    tick (callback) {\n        var newLife = this.updateCell();\n        callback(newLife);\n        if (newLife.length === 0) {\n            callback([]);\n        }\n    }\n\n    updateCell () {\n        const neighbor   = this.findNeighbor(this.life);\n        const frequency  = this.countFrequency(neighbor, this.life);\n        const newLife    = this.filterCountIsThree(frequency);\n        const countIsTwo = this.filterCountIsTwo(frequency);\n        const nowlife    = this.mergeNewLifeAndSurvive(newLife, countIsTwo, this.life);\n        this.life = nowlife;\n        return nowlife;\n    }\n\n    createCellByRandom () {\n        const life = new Set();\n        while (life.size < this.initialNumber) {\n            life.add({\n                x: Math.floor(Math.random() * this.width),\n                y: Math.floor(Math.random() * this.height)\n            });\n        }\n        return [...life];\n    }\n\n    findNeighbor (life) {\n        const allNeighbor = [];\n        life.forEach(cell => allNeighbor.push(...this.neighborCell(cell.x, cell.y)));\n        return allNeighbor;\n    }\n\n    neighborCell (self_x, self_y) {\n        const neighbor = [];\n        const that = this;\n        [-1, 0, 1].forEach(function(i) {\n            [-1, 0, 1].forEach(function(j) {\n                const x = self_x + i;\n                const y = self_y + j;\n                if (that.isValidCell(x, y, self_x, self_y)) {\n                    neighbor.push({ x, y });\n                }\n            });\n        });\n        return neighbor;\n    }\n\n    isValidCell (x, y, self_x, self_y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height && (self_x !== x || self_y !== y);\n    }\n\n    countFrequency (neighbor) {\n        var mapCell = {};\n        const frequency = [];\n        var len = neighbor.length;\n        for (var i = 0; i < len; i++) {\n            var ele = neighbor[i];\n            var sameEle = mapCell[ele.x+''+ele.y];\n            if (sameEle) {\n                sameEle.count += 1;\n            } else {\n                sameEle = {\n                    x: ele.x,\n                    y: ele.y,\n                    count: 1\n                };\n                mapCell[ele.x+''+ele.y] = sameEle;\n                frequency.push(sameEle);\n            }\n        }\n        mapCell = null;\n        return frequency;\n    }\n\n    filterCountIsThree (frequency) {\n        return frequency.filter(cell => cell.count === 3);\n    }\n\n    filterCountIsTwo (frequency) {\n        return frequency.filter(cell => cell.count === 2);\n    }\n\n    mergeNewLifeAndSurvive (newLife, countIsTwo, life) {\n        var len,\n            ele,\n            mapCell = {},\n            survive = [];\n\n        \n        len = life.length;\n        for (var i = 0; i < len; i++) {\n            ele = life[i];\n            mapCell[ele.x+''+ele.y] = ele;\n        }\n\n        \n        len = countIsTwo.length;\n        for (var i = 0; i < len; i++) {\n            ele = countIsTwo[i];\n            if (mapCell[ele.x+''+ele.y]) {\n                survive.push(ele);\n            }\n        }\n\n        return [...newLife, ...survive];\n    }\n    createCheckerboard(){\n        var td = new Array(this.height+5).join( '<tr>'+(new Array(this.width+5)).join('<td></td>')+'</tr>' );\n        var table = '<table><tbody>'+td+'</tbody></table>';\n        this.box.innerHTML = table;\n\n        var table = this.box.querySelector('tbody');\n        var tds = table.querySelectorAll('td');\n        var trs = table.querySelectorAll('tr');\n\n        clearInterval(this.timer);\n        this.timer = setInterval(()=> {\n            this.tick(life =>{\n                \n                tds.forEach((ele, i)=>{\n                    ele.className = '';\n                });\n                \n                for (var i = 0, len = life.length; i < len; i++) {\n                    var cell = life[i];\n                    trs[cell.y+2].children[cell.x+2].className = 'life';\n                }\n                if (life.length === 0) {\n                    clearInterval(this.timer);\n                }\n                \n            });\n            \n        }, this.cycleTime);\n    }\n\n    destroy() {\n        this.box.innerHTML = '';\n        clearInterval(this.timer);\n    }\n}\n```","source":"_posts/game-of-life.md","raw":"---\ntitle: JavaScript实现康威生命游戏\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n\n### 演示demo\n[生命游戏](https://raw.githack.com/bzw875/GameOfLife/master/00.html)\n\n### 定义\n\n康威生命游戏（英语：Conway's Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。\n它最初于1970年10月在《科学美国人》杂志上马丁·葛登能的“数学游戏”专栏出现。\n\n\n### 规则\n生命游戏中，对于任意细胞，规则如下：\n\n* 每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动（黑色为存活，白色为死亡）\n* 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）\n* 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。\n* 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n* 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\n\n可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后，可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。\n\n\n### 规则用代码表示\n``` javascript\n假如有个生命\nvar a = { x: 4, y: 4 }\n// 周围存活数为\nvar n = neighborLifeNumber();\n\n// 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。\nif (n < 2 && a.isLeft) {\n    a.isLeft = false;\n}\n\n// 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样\nif (n === 2 || n === 3 && a.isLeft) {\n    // 什么也不做\n}\n\n// 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\nif (n > 3 && a.isLeft) {\n    a.isLeft = false;\n}\n\n\n// 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\nif (n >= 3 && !a.isLeft) {\n    a.isLeft = true;\n}\n```\n\n### 核心算法就是\n* 假设现存的生命为 left\n* 根据 left 算计出邻居生命 neighbor (这里面有很多重复的生命)\n* 算出 neighbor 生命出现的次数并去重，得出 frequency\n* 从 frequency 过滤出现3次的生命得出 newLife（因为不管是死是活都会在下一轮转为活）\n* 从 frequency 过滤出现2次的生命得出 countIsTwo\n* 从 countIsTwo 、 left 算出同时出现的生命 nowlife ，这个是旧left因为有2个邻居而活下来的生命\n* 合并 newLife 、 nowlife得出下一轮活的生命\n\n\n### github 地址\n[github.com/bzw875/GameOfLife](https://github.com/bzw875/GameOfLife)\n\n### 完整代码\n\n``` javascript\n// 怎么使用\nnew CellLife({\n  width: 100, // 网格宽度\n  height: 100, // 网格高度\n  initialNumber: 500, // 初始化生命个数\n  cycleTime: 200, // 生命更新毫秒数\n  box: document.getElementById('root')\n});\n\n// 构造类\n\nclass CellLife {\n    constructor(options) {\n        const { width, height, cycleTime, initialNumber, box} = options;\n        this.width     = width;\n        this.height    = height;\n        this.cycleTime = cycleTime;\n        this.initialNumber = initialNumber;\n        this.box = box;\n\n        this.life = this.createCellByRandom();\n        this.createCheckerboard();\n    }\n    tick (callback) {\n        var newLife = this.updateCell();\n        callback(newLife);\n        if (newLife.length === 0) {\n            callback([]);\n        }\n    }\n\n    updateCell () {\n        const neighbor   = this.findNeighbor(this.life);\n        const frequency  = this.countFrequency(neighbor, this.life);\n        const newLife    = this.filterCountIsThree(frequency);\n        const countIsTwo = this.filterCountIsTwo(frequency);\n        const nowlife    = this.mergeNewLifeAndSurvive(newLife, countIsTwo, this.life);\n        this.life = nowlife;\n        return nowlife;\n    }\n\n    createCellByRandom () {\n        const life = new Set();\n        while (life.size < this.initialNumber) {\n            life.add({\n                x: Math.floor(Math.random() * this.width),\n                y: Math.floor(Math.random() * this.height)\n            });\n        }\n        return [...life];\n    }\n\n    findNeighbor (life) {\n        const allNeighbor = [];\n        life.forEach(cell => allNeighbor.push(...this.neighborCell(cell.x, cell.y)));\n        return allNeighbor;\n    }\n\n    neighborCell (self_x, self_y) {\n        const neighbor = [];\n        const that = this;\n        [-1, 0, 1].forEach(function(i) {\n            [-1, 0, 1].forEach(function(j) {\n                const x = self_x + i;\n                const y = self_y + j;\n                if (that.isValidCell(x, y, self_x, self_y)) {\n                    neighbor.push({ x, y });\n                }\n            });\n        });\n        return neighbor;\n    }\n\n    isValidCell (x, y, self_x, self_y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height && (self_x !== x || self_y !== y);\n    }\n\n    countFrequency (neighbor) {\n        var mapCell = {};\n        const frequency = [];\n        var len = neighbor.length;\n        for (var i = 0; i < len; i++) {\n            var ele = neighbor[i];\n            var sameEle = mapCell[ele.x+''+ele.y];\n            if (sameEle) {\n                sameEle.count += 1;\n            } else {\n                sameEle = {\n                    x: ele.x,\n                    y: ele.y,\n                    count: 1\n                };\n                mapCell[ele.x+''+ele.y] = sameEle;\n                frequency.push(sameEle);\n            }\n        }\n        mapCell = null;\n        return frequency;\n    }\n\n    filterCountIsThree (frequency) {\n        return frequency.filter(cell => cell.count === 3);\n    }\n\n    filterCountIsTwo (frequency) {\n        return frequency.filter(cell => cell.count === 2);\n    }\n\n    mergeNewLifeAndSurvive (newLife, countIsTwo, life) {\n        var len,\n            ele,\n            mapCell = {},\n            survive = [];\n\n        \n        len = life.length;\n        for (var i = 0; i < len; i++) {\n            ele = life[i];\n            mapCell[ele.x+''+ele.y] = ele;\n        }\n\n        \n        len = countIsTwo.length;\n        for (var i = 0; i < len; i++) {\n            ele = countIsTwo[i];\n            if (mapCell[ele.x+''+ele.y]) {\n                survive.push(ele);\n            }\n        }\n\n        return [...newLife, ...survive];\n    }\n    createCheckerboard(){\n        var td = new Array(this.height+5).join( '<tr>'+(new Array(this.width+5)).join('<td></td>')+'</tr>' );\n        var table = '<table><tbody>'+td+'</tbody></table>';\n        this.box.innerHTML = table;\n\n        var table = this.box.querySelector('tbody');\n        var tds = table.querySelectorAll('td');\n        var trs = table.querySelectorAll('tr');\n\n        clearInterval(this.timer);\n        this.timer = setInterval(()=> {\n            this.tick(life =>{\n                \n                tds.forEach((ele, i)=>{\n                    ele.className = '';\n                });\n                \n                for (var i = 0, len = life.length; i < len; i++) {\n                    var cell = life[i];\n                    trs[cell.y+2].children[cell.x+2].className = 'life';\n                }\n                if (life.length === 0) {\n                    clearInterval(this.timer);\n                }\n                \n            });\n            \n        }, this.cycleTime);\n    }\n\n    destroy() {\n        this.box.innerHTML = '';\n        clearInterval(this.timer);\n    }\n}\n```","slug":"game-of-life","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w10007fm5yf9pp5rx4","content":"<h3 id=\"演示demo\"><a href=\"#演示demo\" class=\"headerlink\" title=\"演示demo\"></a>演示demo</h3><p><a href=\"https://raw.githack.com/bzw875/GameOfLife/master/00.html\">生命游戏</a></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>康威生命游戏（英语：Conway’s Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。<br>它最初于1970年10月在《科学美国人》杂志上马丁·葛登能的“数学游戏”专栏出现。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>生命游戏中，对于任意细胞，规则如下：</p>\n<ul>\n<li>每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动（黑色为存活，白色为死亡）</li>\n<li>当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）</li>\n<li>当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。</li>\n<li>当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</li>\n<li>当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</li>\n</ul>\n<p>可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后，可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p>\n<h3 id=\"规则用代码表示\"><a href=\"#规则用代码表示\" class=\"headerlink\" title=\"规则用代码表示\"></a>规则用代码表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假如有个生命</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">x</span>: <span class=\"number\">4</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 周围存活数为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"title function_\">neighborLifeNumber</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n === <span class=\"number\">2</span> || n === <span class=\"number\">3</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 什么也不做</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">3</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">3</span> &amp;&amp; !a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心算法就是\"><a href=\"#核心算法就是\" class=\"headerlink\" title=\"核心算法就是\"></a>核心算法就是</h3><ul>\n<li>假设现存的生命为 left</li>\n<li>根据 left 算计出邻居生命 neighbor (这里面有很多重复的生命)</li>\n<li>算出 neighbor 生命出现的次数并去重，得出 frequency</li>\n<li>从 frequency 过滤出现3次的生命得出 newLife（因为不管是死是活都会在下一轮转为活）</li>\n<li>从 frequency 过滤出现2次的生命得出 countIsTwo</li>\n<li>从 countIsTwo 、 left 算出同时出现的生命 nowlife ，这个是旧left因为有2个邻居而活下来的生命</li>\n<li>合并 newLife 、 nowlife得出下一轮活的生命</li>\n</ul>\n<h3 id=\"github-地址\"><a href=\"#github-地址\" class=\"headerlink\" title=\"github 地址\"></a>github 地址</h3><p><a href=\"https://github.com/bzw875/GameOfLife\">github.com&#x2F;bzw875&#x2F;GameOfLife</a></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 怎么使用</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CellLife</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"comment\">// 网格宽度</span></span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"comment\">// 网格高度</span></span><br><span class=\"line\">  <span class=\"attr\">initialNumber</span>: <span class=\"number\">500</span>, <span class=\"comment\">// 初始化生命个数</span></span><br><span class=\"line\">  <span class=\"attr\">cycleTime</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 生命更新毫秒数</span></span><br><span class=\"line\">  <span class=\"attr\">box</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CellLife</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; width, height, cycleTime, initialNumber, box&#125; = options;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">width</span>     = width;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>    = height;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cycleTime</span> = cycleTime;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">initialNumber</span> = initialNumber;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span> = box;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">life</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">createCellByRandom</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">createCheckerboard</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tick (callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newLife = <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCell</span>();</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(newLife);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newLife.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">callback</span>([]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    updateCell () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> neighbor   = <span class=\"variable language_\">this</span>.<span class=\"title function_\">findNeighbor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> frequency  = <span class=\"variable language_\">this</span>.<span class=\"title function_\">countFrequency</span>(neighbor, <span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newLife    = <span class=\"variable language_\">this</span>.<span class=\"title function_\">filterCountIsThree</span>(frequency);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> countIsTwo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">filterCountIsTwo</span>(frequency);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowlife    = <span class=\"variable language_\">this</span>.<span class=\"title function_\">mergeNewLifeAndSurvive</span>(newLife, countIsTwo, <span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">life</span> = nowlife;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nowlife;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createCellByRandom () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> life = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (life.<span class=\"property\">size</span> &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">initialNumber</span>) &#123;</span><br><span class=\"line\">            life.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">width</span>),</span><br><span class=\"line\">                <span class=\"attr\">y</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...life];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findNeighbor (life) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allNeighbor = [];</span><br><span class=\"line\">        life.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> allNeighbor.<span class=\"title function_\">push</span>(...<span class=\"variable language_\">this</span>.<span class=\"title function_\">neighborCell</span>(cell.<span class=\"property\">x</span>, cell.<span class=\"property\">y</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allNeighbor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    neighborCell (self_x, self_y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> neighbor = [];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        [-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">            [-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">j</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = self_x + i;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> y = self_y + j;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (that.<span class=\"title function_\">isValidCell</span>(x, y, self_x, self_y)) &#123;</span><br><span class=\"line\">                    neighbor.<span class=\"title function_\">push</span>(&#123; x, y &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> neighbor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isValidCell (x, y, self_x, self_y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> &amp;&amp; y &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> &amp;&amp; (self_x !== x || self_y !== y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    countFrequency (neighbor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mapCell = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> frequency = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = neighbor.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ele = neighbor[i];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sameEle = mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sameEle) &#123;</span><br><span class=\"line\">                sameEle.<span class=\"property\">count</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sameEle = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: ele.<span class=\"property\">x</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: ele.<span class=\"property\">y</span>,</span><br><span class=\"line\">                    <span class=\"attr\">count</span>: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>] = sameEle;</span><br><span class=\"line\">                frequency.<span class=\"title function_\">push</span>(sameEle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mapCell = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    filterCountIsThree (frequency) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> cell.<span class=\"property\">count</span> === <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    filterCountIsTwo (frequency) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> cell.<span class=\"property\">count</span> === <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mergeNewLifeAndSurvive (newLife, countIsTwo, life) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len,</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            mapCell = &#123;&#125;,</span><br><span class=\"line\">            survive = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        len = life.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ele = life[i];</span><br><span class=\"line\">            mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>] = ele;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        len = countIsTwo.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ele = countIsTwo[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>]) &#123;</span><br><span class=\"line\">                survive.<span class=\"title function_\">push</span>(ele);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...newLife, ...survive];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">createCheckerboard</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> td = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">height</span>+<span class=\"number\">5</span>).<span class=\"title function_\">join</span>( <span class=\"string\">&#x27;&lt;tr&gt;&#x27;</span>+(<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">width</span>+<span class=\"number\">5</span>)).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&lt;td&gt;&lt;/td&gt;&#x27;</span>)+<span class=\"string\">&#x27;&lt;/tr&gt;&#x27;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">var</span> table = <span class=\"string\">&#x27;&lt;table&gt;&lt;tbody&gt;&#x27;</span>+td+<span class=\"string\">&#x27;&lt;/tbody&gt;&lt;/table&gt;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"property\">innerHTML</span> = table;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> table = <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;tbody&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tds = table.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;td&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> trs = table.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;tr&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">tick</span>(<span class=\"function\"><span class=\"params\">life</span> =&gt;</span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                tds.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele, i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    ele.<span class=\"property\">className</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = life.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> cell = life[i];</span><br><span class=\"line\">                    trs[cell.<span class=\"property\">y</span>+<span class=\"number\">2</span>].<span class=\"property\">children</span>[cell.<span class=\"property\">x</span>+<span class=\"number\">2</span>].<span class=\"property\">className</span> = <span class=\"string\">&#x27;life&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (life.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">cycleTime</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">destroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"演示demo\"><a href=\"#演示demo\" class=\"headerlink\" title=\"演示demo\"></a>演示demo</h3><p><a href=\"https://raw.githack.com/bzw875/GameOfLife/master/00.html\">生命游戏</a></p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>康威生命游戏（英语：Conway’s Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。<br>它最初于1970年10月在《科学美国人》杂志上马丁·葛登能的“数学游戏”专栏出现。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>生命游戏中，对于任意细胞，规则如下：</p>\n<ul>\n<li>每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动（黑色为存活，白色为死亡）</li>\n<li>当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）</li>\n<li>当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。</li>\n<li>当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</li>\n<li>当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</li>\n</ul>\n<p>可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后，可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p>\n<h3 id=\"规则用代码表示\"><a href=\"#规则用代码表示\" class=\"headerlink\" title=\"规则用代码表示\"></a>规则用代码表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假如有个生命</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">x</span>: <span class=\"number\">4</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 周围存活数为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"title function_\">neighborLifeNumber</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n === <span class=\"number\">2</span> || n === <span class=\"number\">3</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 什么也不做</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt; <span class=\"number\">3</span> &amp;&amp; a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">3</span> &amp;&amp; !a.<span class=\"property\">isLeft</span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">isLeft</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"核心算法就是\"><a href=\"#核心算法就是\" class=\"headerlink\" title=\"核心算法就是\"></a>核心算法就是</h3><ul>\n<li>假设现存的生命为 left</li>\n<li>根据 left 算计出邻居生命 neighbor (这里面有很多重复的生命)</li>\n<li>算出 neighbor 生命出现的次数并去重，得出 frequency</li>\n<li>从 frequency 过滤出现3次的生命得出 newLife（因为不管是死是活都会在下一轮转为活）</li>\n<li>从 frequency 过滤出现2次的生命得出 countIsTwo</li>\n<li>从 countIsTwo 、 left 算出同时出现的生命 nowlife ，这个是旧left因为有2个邻居而活下来的生命</li>\n<li>合并 newLife 、 nowlife得出下一轮活的生命</li>\n</ul>\n<h3 id=\"github-地址\"><a href=\"#github-地址\" class=\"headerlink\" title=\"github 地址\"></a>github 地址</h3><p><a href=\"https://github.com/bzw875/GameOfLife\">github.com&#x2F;bzw875&#x2F;GameOfLife</a></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 怎么使用</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CellLife</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"comment\">// 网格宽度</span></span><br><span class=\"line\">  <span class=\"attr\">height</span>: <span class=\"number\">100</span>, <span class=\"comment\">// 网格高度</span></span><br><span class=\"line\">  <span class=\"attr\">initialNumber</span>: <span class=\"number\">500</span>, <span class=\"comment\">// 初始化生命个数</span></span><br><span class=\"line\">  <span class=\"attr\">cycleTime</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 生命更新毫秒数</span></span><br><span class=\"line\">  <span class=\"attr\">box</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CellLife</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; width, height, cycleTime, initialNumber, box&#125; = options;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">width</span>     = width;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>    = height;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cycleTime</span> = cycleTime;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">initialNumber</span> = initialNumber;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span> = box;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">life</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">createCellByRandom</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">createCheckerboard</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tick (callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> newLife = <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateCell</span>();</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(newLife);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newLife.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">callback</span>([]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    updateCell () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> neighbor   = <span class=\"variable language_\">this</span>.<span class=\"title function_\">findNeighbor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> frequency  = <span class=\"variable language_\">this</span>.<span class=\"title function_\">countFrequency</span>(neighbor, <span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newLife    = <span class=\"variable language_\">this</span>.<span class=\"title function_\">filterCountIsThree</span>(frequency);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> countIsTwo = <span class=\"variable language_\">this</span>.<span class=\"title function_\">filterCountIsTwo</span>(frequency);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nowlife    = <span class=\"variable language_\">this</span>.<span class=\"title function_\">mergeNewLifeAndSurvive</span>(newLife, countIsTwo, <span class=\"variable language_\">this</span>.<span class=\"property\">life</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">life</span> = nowlife;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nowlife;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createCellByRandom () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> life = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (life.<span class=\"property\">size</span> &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">initialNumber</span>) &#123;</span><br><span class=\"line\">            life.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">width</span>),</span><br><span class=\"line\">                <span class=\"attr\">y</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...life];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findNeighbor (life) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allNeighbor = [];</span><br><span class=\"line\">        life.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> allNeighbor.<span class=\"title function_\">push</span>(...<span class=\"variable language_\">this</span>.<span class=\"title function_\">neighborCell</span>(cell.<span class=\"property\">x</span>, cell.<span class=\"property\">y</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allNeighbor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    neighborCell (self_x, self_y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> neighbor = [];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        [-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">            [-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">j</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> x = self_x + i;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> y = self_y + j;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (that.<span class=\"title function_\">isValidCell</span>(x, y, self_x, self_y)) &#123;</span><br><span class=\"line\">                    neighbor.<span class=\"title function_\">push</span>(&#123; x, y &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> neighbor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isValidCell (x, y, self_x, self_y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> &amp;&amp; y &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> &amp;&amp; (self_x !== x || self_y !== y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    countFrequency (neighbor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mapCell = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> frequency = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = neighbor.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ele = neighbor[i];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> sameEle = mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sameEle) &#123;</span><br><span class=\"line\">                sameEle.<span class=\"property\">count</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sameEle = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: ele.<span class=\"property\">x</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: ele.<span class=\"property\">y</span>,</span><br><span class=\"line\">                    <span class=\"attr\">count</span>: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>] = sameEle;</span><br><span class=\"line\">                frequency.<span class=\"title function_\">push</span>(sameEle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mapCell = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    filterCountIsThree (frequency) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> cell.<span class=\"property\">count</span> === <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    filterCountIsTwo (frequency) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frequency.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cell</span> =&gt;</span> cell.<span class=\"property\">count</span> === <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mergeNewLifeAndSurvive (newLife, countIsTwo, life) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len,</span><br><span class=\"line\">            ele,</span><br><span class=\"line\">            mapCell = &#123;&#125;,</span><br><span class=\"line\">            survive = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        len = life.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ele = life[i];</span><br><span class=\"line\">            mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>] = ele;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        len = countIsTwo.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            ele = countIsTwo[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mapCell[ele.<span class=\"property\">x</span>+<span class=\"string\">&#x27;&#x27;</span>+ele.<span class=\"property\">y</span>]) &#123;</span><br><span class=\"line\">                survive.<span class=\"title function_\">push</span>(ele);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...newLife, ...survive];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">createCheckerboard</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> td = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">height</span>+<span class=\"number\">5</span>).<span class=\"title function_\">join</span>( <span class=\"string\">&#x27;&lt;tr&gt;&#x27;</span>+(<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">width</span>+<span class=\"number\">5</span>)).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&lt;td&gt;&lt;/td&gt;&#x27;</span>)+<span class=\"string\">&#x27;&lt;/tr&gt;&#x27;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">var</span> table = <span class=\"string\">&#x27;&lt;table&gt;&lt;tbody&gt;&#x27;</span>+td+<span class=\"string\">&#x27;&lt;/tbody&gt;&lt;/table&gt;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"property\">innerHTML</span> = table;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> table = <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;tbody&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tds = table.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;td&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> trs = table.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;tr&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">tick</span>(<span class=\"function\"><span class=\"params\">life</span> =&gt;</span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                tds.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele, i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    ele.<span class=\"property\">className</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = life.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> cell = life[i];</span><br><span class=\"line\">                    trs[cell.<span class=\"property\">y</span>+<span class=\"number\">2</span>].<span class=\"property\">children</span>[cell.<span class=\"property\">x</span>+<span class=\"number\">2</span>].<span class=\"property\">className</span> = <span class=\"string\">&#x27;life&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (life.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">cycleTime</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">destroy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">box</span>.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CSS简单教程","date":"2023-11-15T13:21:43.525Z","updated":"2023-11-15T13:21:43.526Z","_content":"\n# 一、常用css属性\n## (1) *block（区块）\n行高 line-height:数值 | inherit | normal;\n\n字间距 letter-spacing: 数值 | inherit | normal;\n\n词间距 word-spacing: 数值 | inherit | normal;\n\n空格 white-space: pre(保留) | nowrap(不换行) | normal;\n\n```\n/*表格宽度自适应*/\nth {\nwhite-space: nowrap;\n}\n```\n### 显示\n```\ndisplay:none; /*不显示，使用的场景非常多*/\n    block; /*把内联标签变成块级标签*/\n    inline; /*把块级标签变成内联标签*/\n    list-item; /*列表项*/\n    run-in; /*追加部分*/\n    compact; /*紧凑*/\n    marker; /*标记*/\n    table;\n    inline-table;\n    table-raw-group;\n    table-header-group;\n    table-footer-group;\n    table-raw;\n    table-column-group;\n    table-column;\n    table-cell;\n    table-caption; /*表格标题*/\n```\n## (2) *box（盒子）\n宽度 width: 长度 | 百分比 | auto;\n\n高度 height: 长度 | 百分比 | auto;\n\n清除 clear: none | left | right | both;\n\n边界 margin: 上 右 下 左 ;\n\n填充 padding: 上 右 下 左 ;\n\n定位 position: absolute | relative | static;\n\n透明度 visibility: inherit | visible | hidden;\n\n溢出 overflow: visible | hidden | scroll auto;\n\n裁切 clip: rect(12px,auto,12px,auto)\n\n## (3) float（漂浮）\n漂浮 float: left | right | none; 在页面布局的时候用的最多\n\n常见用法\n```\n<div style='background-color:red;float:left;width: 50%;' >div1</div>\n<div style='background-color:green;float:right;width: 50%;' >div2</div>\n```\n一个问题\n子标签使用了float时候，父标签的样式失效\n\n```\n<div style='background-color:red;'>\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n</div>\n```\n\n解决方案一：clear: both\n\n```\n<div style='background-color:red;'>\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n    <div style=\"clear: both;\"></div> <!--加上clear：both之后就正常了-->\n</div>\n```\n解决方案二：clearfix\n```\n<div style='background-color:red;' class=\"clearfix\">\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n</div>\n.clearfix:after{\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n```\n## (4) position（定位）\nfixed\n一般用来写网页顶端的固定导航条，或者两侧的菜单。\n\n```\n<!--对于块级标签来说加上position:fixed之后，该div就不会占一整行，一般需要手动定义宽度，如width:100%-->\n \n<div style=\"position:fixed;height:10%;background-color:lightskyblue;color:white;width:100%;top:0px;\">我是导航</div>\n<div style=\"\">\n    <div style=\"position:fixed;bottom: 0px;top:10%;float: left;width: 20%;background-color:indianred\">我是菜单</div>\n    <div style=\"float: right;width:80%;\"><p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n    </div>\n</div>\n```\nabsolute与relative\n这两者一般配合使用，用于调整div之间的相对位置\n```\n<div style=\"position:relative;width: 300px;height: 150px;\">\n    <div style=\"position:absolute;float: left;width: 20%;background-color:indianred;bottom: 0px;right: 0px;\">我是菜单</div>\n</div>\n\n```\n## (5) 透明度\n```\n.image{\n    opacity: 0.5\n}\n<img src=\"http://www.jotlab.com/wp-content/uploads/2008/08/python.jpg\" style=\"opacity: 0.5; width:50%; height:50%; \">\n```\n## (6) font（字体）\n```\n颜色 color: 数值;\n大小 font-size: 数值;\n字体 font-family: \"Courier New\", Courier, monospace, \"Times New Roman\", Times, serif, Arial, Helvetica, sans-serif, Verdana\n样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)\n粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)\n变体 font-variant: small-caps;(小型大写字母) normal;(正常)\n```\n## (4) background（背景）\n```\n背景 background: transparent; /透视背景*/\n颜色 background-color: 数值;\n图片 background-image: url() | none;\n重复 background-repeat: inherit | no-repeat | repeat | repeat-x | repeat-y;\n\nbackground-repeat : repeat; /*重复排列-网页默认*/\nbackground-repeat : no-repeat; /*不重复排列*/\nbackground-repeat : repeat-x; /*在x轴重复排列*/\nbackground-repeat : repeat-y; /*在y轴重复排列*/\n滚动 background-attachment: fixed | scroll;\n位置 background-position:数值 | top | bottom | left | right | center;\n\nbackground-position : 90% 90%; /*背景图片x与y轴的位置*/\nbackground-position : top; /*向上对齐*/\nbackground-position : buttom; /*向下对齐*/\nbackground-position : left; /*向左对齐*/\nbackground-position : right; /*向右对齐*/\nbackground-position : center; /*居中对齐*/\n简写 background:背景颜色 | 背景图象 | 背景重复 | 背景附件 | 背景位置 ;\n```\n## (7) text（文本）\n```\n大小写 text-transform: capitalize | uppercase | lowercase | none;\n修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)\n排列 text-align: justify | left | right | center;\n缩进 text-indent: 数值 | inherit;\n阴影 text-shadow:数值;\n```\n\n## (8) border（边框）\n```\n边框样式 border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;\n边框宽度 border-width: ;\n边框颜色 border-color: top值 right值 bottom值 left值;\n简写 border: width style color;\n\n边　　框 {border:border-width border-style color}\n上 边 框 {border-top:border-top-width border-style color}\n右 边 框 {border-right:border-right-width border-style color}\n下 边 框 {border-bottom:border-bottom-width border-style color}\n左 边 框 {border-left:border-left-width border-style color}\n```\n## (9) list-style（列表样式）\n```\n\n类型 list-style-type: disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none;\n\nlist-style-type:none; /*不编号*/\nlist-style-type:decimal; /*阿拉伯数字*/\nlist-style-type:lower-roman; /*小写罗马数字*/\nlist-style-type:upper-roman; /*大写罗马数字*/\nlist-style-type:lower-alpha; /*小写英文字母*/\nlist-style-type:upper-alpha; /*大写英文字母*/\nlist-style-type:disc; /*实心圆形符号*/\nlist-style-type:circle; /*空心圆形符号*/\nlist-style-type:square; /*实心方形符号*/\n位置 list-style-position: outside | inside;\n图像 list-style-image: URL;\n简写 list-style:目录样式类型 | 目录样式位置 | url;\n```\n## (10) margin（边界）\n\n```\nmargin-top:10px; (上边界)\nmargin-right:10px; (右边界)\nmargin-bottom:10px; (下边界值)\nmargin-left:10px; (左边界值)\nmargin-inside:;\nmargin-outside:;\n\n```\n## (11) padding（填充）\n```\npadding-top:10px; /*上边框留空白*/\npadding-right:10px; /*右边框留空白*/\npadding-bottom:10px; /*下边框留空白*/\npadding-left:10px; /*左边框留空白\n```\n## (12) vertical（垂直）\n```\nvertical-align:sub; /*下标字*/\nvertical-align:super; /*上标字*/\nvertical-align:top; /*垂直向上对齐*/\nvertical-align:bottom; /*垂直向下对齐*/\nvertical-align:middle; /*垂直居中对齐*/\nvertical-align:text-top; /*文字垂直向上对齐*/\nvertical-align:text-bottom; /*文字垂直向下对齐*/\n```\n## (13) a（链接）\n```\na /*所有超链接*/\na:link /*超链接文字格式*/\na:visited /*浏览过的链接文字格式*/\na:active /*按下链接的格式*/\na:hover /*鼠标转到链接*/\n```\n## (14) cursor（光标）\n```\n光标形状 cursor:hand | crosshair | text | wait | move | help | e-resize | nw-resize | w-resize | s-resize | se-resize | sw-resize;\n\n/*也可以自定义*/\ncursor: hand; /*链接手指*/\ncursor: crosshair /*十字体 */\ncursor: s-resize /*箭头朝下 */\ncursor: move /*十字箭头, 朝右*/\ncursor: help /*加一问号 */\ncursor: w-resize /*箭头朝左 */\ncursor: n-resize /*箭头朝上 */\ncursor: ne-resize /*箭头朝右上 */\ncursor: nw-resize /*箭头朝左上 */\ncursor: text /*文字型*/\ncursor: se-resize /*箭头斜右下 */\ncursor: sw-resize /*箭头斜左下*/\ncursor: wait /*漏斗*/\n```\n# 二、css实践\n## (1) css的三种写法\n行内样式：写在对应标签的style属性里面\n```\n<html>\n    <head>  \n        <title>Test</title>\n    </head>\n\n    <body>\n        <div style='background-color:red'>123</div>\n    </body>\n</html>\n```\n内页样式：写在HTML页面里面的style标签里面\n```\n<html>\n    <head>\n        <title>Test</title>\n        <style>\n            .logo{\n                background-color:red;\n            }\n        </style>\n    </head>\n\n    <body>\n        <div class='logo'>123</div>\n    </body>\n</html>\n\n```\n外部样式：通过link标签引入CSS样式\n\n```\n<html>\n    <head>\n        <title>Test</title>\n        <link rel='stylesheet' href='common1.css'/>\n    </head>\n\n    <body>\n        <div class=\"logo\">123</div>\n    </body>\n</html>\n.logo {\n    background-color: red;\n    color: white;\n}\n```\n## (2) 常规用例\n```\np {font-family: \"sans serif\";}  /*值为若干单词，则要给值加引号*/\n\n.logo {background-color: red;}\n\n.logo a,.logo p {background-color: red;}\n\n#morra {background-color: green;}\n\na, div { color: red;}   /*a或div都使用这个css*/\n\na div { color: red;}    /*只有a下面的div使用该css*/\n```\n注：css 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。\n\n三、Demo\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>This is a demo</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <style type=\"text/css\">\n        body {\n            background-color: #e1ddd9;\n            font-size: 12px;\n            font-family: Verdana, Arial, Helvetica, SunSans-Regular, Sans-Serif;\n            color: #564b47;\n            padding: 0px;\n            margin: 0px;\n        }\n        #inhalt {\n            position: absolute;\n            height: 200px;\n            width: 400px;\n            margin: -100px 0px 0px -200px;\n            top: 50%;\n            left: 50%;\n            text-align: center;\n            padding: 0px;\n            background-color: #f5f5f5;\n            border: 1px dotted #000000;\n            overflow: auto;\n        }\n        p, h1 {\n            margin: 0px;\n            padding: 10px;\n        }\n        h1 {\n            font-size: 11px;\n            text-transform: uppercase;\n            text-align: center;\n            color: #564b47;\n            background-color: #90897a;\n        }\n        a {\n            color: #ff66cc;\n            font-size: 11px;\n            background-color: transparent;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n<div id=\"inhalt\">\n    <p>\n    <h1>Morra's Demo</h1><br/><br/>\n    This area should be horizontally and vertically centered.<br/>\n    This text stays left aligned<br/>\n    <a href=\"http://www.cnblogs.com/whatisfantasy/\">what is fantasy?</a>\n    </p>\n    <p>\n</div>\n</body>\n</html>\n```\n\n\n# 盒模型\n盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：\"every element in web design is a rectangular box\"。如图：\n\nbox-model\n![](D:/work/front-end-tutorial/box-sizing.png)\n\nCSS3中新增了一种盒模型计算方式：```box-sizing```熟悉。盒模型默认的值是content-box, 新增的值是```padding-box```和```border-box```，几种盒模型计算元素宽高的区别如下：\n\n## content-box（默认）\n布局所占宽度Width：\n```\nWidth = width + padding-left + padding-right + border-left + border-right\n```\n布局所占高度Height:\n```\nHeight = height + padding-top + padding-bottom + border-top + border-bottom\n```\n## padding-box\n布局所占宽度Width：\n```\nWidth = width(包含padding-left + padding-right) + border-top + border-bottom\n```\n布局所占高度Height:\n```\nHeight = height(包含padding-top + padding-bottom) + border-top + border-bottom\n```\n## border-box\n布局所占宽度Width：\n```\nWidth = width(包含padding-left + padding-right + border-left + border-right)\n```\n布局所占高度Height:\n```\nHeight = height(包含padding-top + padding-bottom + border-top + border-bottom)\n```\n## margin叠加\n外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。\n\n一般来说， 垂直外边距叠加有三种情况：\n\n* 元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。\n* 相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。\n* 包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。\n\n\n# CSS普通流（文档流）\n首先明确一点的是，W3C规范中没有document flow这个概念，只有normal-flow, 文档流的叫法主要还是多数中文译者的翻译方式问题。\n\n## 定义\n什么是普通流？简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。并且这种过程遵循标准的描述。\n\n## 调节普通流元素位置\n一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。\n\n只要不是float和绝对定位方式布局的，都在普通流里面。\n\n# CSS定位方式\n## display属性\n每一个元素都有默认的display属性，使用最多的是block, inline和inline-block，不常用的是table-cell。\n\n根据display属性，我们可以将元素分为块级元素(block)和内联级元素(inline)。它们最大区别是:block元素可以设置宽度，独占一行。inline元素宽度由内容决定，与其他元素并列在一行。\n\n常见的block属性元素有：div, h1-h6, ul, li, ol, dl, dd, dt。\n\n常见的inline属性元素有: span, a, em。\n\n## block\n宽高可以自行设置，默认宽度由父容器决定，默认高度有内容决定。自己独占一行。\n\n## inline\n宽度和高度都有内容决定，与其他元素共占一行。\n\n## inline-block\n宽度可以自行设置，类似block，但是与其他元素共占一行，类似inline。长用于设置垂直居中。\n\n## table-cell\n此属性指让标签元素以表格单元格的形式呈现，单元格有一些比较特殊的属性，可以设置元素的垂直居中等。\n\n# position属性\n元素在页面中的布局遵守一套文档流的方式，默认的定位属性值为static。它其实是未被设置定位的。\n\n元素如果被定位了，那么它的top,left,bottom,right值就会生效，能设置定位的属性是relative,absolute和fixed。\n\n需要注意的另一点是被定位的元素层次(z-index)会得到提高。\n\n## relative（相对定位）\n设置了相对定位之后，通过修改top,left,bottom,right值，元素会在自身文档流所在位置上被移动，其他的元素则不会调整位置来弥补它偏离后剩下的空隙。\n\n## absolute（绝对定位）\n设置了绝对定位之后，元素脱离文档流，其他的元素会调整位置来弥补它偏离后剩下的空隙。元素偏移是相对于是它最近的设置了定位属性（position值不为static）的元素。\n\n且如果元素为块级元素（display属性值为block)，那么它的宽度也会由内容撑开。因为：\n\n默认文档流中块级元素如果没有设置宽度属性，会自动填满整行。\n\n## fixed(固定定位)\n设置了固定定位之后，元素相对的偏移的参考是可视窗口，即使页面滚动，元素仍然会在固定位置。\n\n\n# CSS浮动相关\n这也是CSS定位机制的一种。\n\n首先了解两个概念：\n\n文档流：文档流是文档中可显示对象在排列时所占用的位置。\n* 浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。\n* 浮动的实际用途，可设置文字环绕或使元素宽度由内容填充（类似Inline-block)。使用浮动需要注意的是如果浮动的元素高度比父级容器还高，那么需要设置父级容器的overflow属性为auto,使其自动撑满。\n\n\n[清除浮动](http://www.iyunlu.com/view/css-xhtml/55.html)\n\n\n# CSS选择器\n选择器是匹配元素的一种模式，不只是在CSS中，JavaScript对CSS的选择器也是支持的，比如document.document.querySelectorAll。\n\n## 关于CSS解析器\nHTML 经过解析生成 DOM Tree（这个我们比较熟悉）；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。\n\nRender Tree 中的元素（WebKit 中称为「renderers」，Firefox 下为「frames」）与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。\n\n在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。\n\n## 解析顺序\nCSS匹配不是从左到右进行查找，而是从右到左进行查找。如果从左到右的顺序，那么每条选择器都需要遍历整个DOM树，性能很受影响。所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找, 所以选择器最好写的简洁一点。\n\n## 选择器权重\n权重，也就是选择器的优先级，每条选择器的规则都有其权重，权重大的会覆盖掉权重小的，很多CSS出现问题的场景，都是某处定义了一个更高权重的规则，导致此处规则不生效。\n\n根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） > style标签 > link标签。\n\n另外一点需要注意的是!improtant,凡是属性值后加上了!important，那么它的值不会被其他值替换。\n\n权重的计算\n通过这篇文章你应该知道的一些事情——CSS权重。了解下权重的计算，主要的规则就是:\n\nid选择器 > 类，属性选择器和伪类选择器 > 元素和伪元素\n\n## 基本选择器\n通配符选择器（＊）\nid选择器（\\\\#ID）\n类选择器（.className）\n元素选择器(E)\n后代选择器（Ｅ Ｆ）\n子元素选择器(E>F)\n相邻兄弟元素选择器(E + F)\n群组选择器（selector1,selector2,...,selectorN）\n属性选择器\n使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。\n\nE[attr]：只使用属性名，但没有确定任何属性值\nE[attr=\"value\"]：指定属性名，并指定了该属性的属性值\nE[attr~=\"value\"]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写\nE[attr^=\"value\"]：指定了属性名，并且有属性值，属性值是以value开头的；\nE[attr$=\"value\"]：指定了属性名，并且有属性值，而且属性值是以value结束的；\nE[attr*=\"value\"]：指定了属性名，并且有属性值，而且属值中包含了value；\nE[attr|=\"value\"]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;\n## 伪类选择器\n伪类选择器的形式就是:xxx， 比如:hover, :link, :nth。\n\n## 动态伪类\n这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如\":link\",\":visited\";另外一种被称作用户行为伪类，如“:hover”,\":active\"和\":focus\"。先来看最常见的锚点伪类。\n\nhover: 用于当用户把鼠标移动到元素上面时的效果\nactive: 用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）\nfocus: 用于元素成为焦点，这个经常用在表单元素上\n## UI元素状态伪类\n主要是针对于HTML中的Form元素操作, IE8不支持\":checked\",\":enabled\",\":disabled\"这三种选择器。\n\n## CSS3的:nth选择器\n主要注意的是CSS3添加的nth选择器在IE8下不支持。\n\nfist-child: 选择某个元素的第一个子元素；\nlast-child: 选择某个元素的最后一个子元素；\nnth-child(): 选择某个元素的一个或多个特定的子元素；\n其他： 常用的就是上面三种了，其他自行了解。\n选择器分类总结\n\n见图:\n\ncss-selector\n![](D:/work/front-end-tutorial/css-selector.jpg)\n选择器兼容性\n选择器的兼容性:\n\ncss选择器兼容性\n![](D:/work/front-end-tutorial/cssSelect2.jpg)\n选择器的优化","source":"_posts/css-tutorial.md","raw":"---\ntitle: CSS简单教程\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n# 一、常用css属性\n## (1) *block（区块）\n行高 line-height:数值 | inherit | normal;\n\n字间距 letter-spacing: 数值 | inherit | normal;\n\n词间距 word-spacing: 数值 | inherit | normal;\n\n空格 white-space: pre(保留) | nowrap(不换行) | normal;\n\n```\n/*表格宽度自适应*/\nth {\nwhite-space: nowrap;\n}\n```\n### 显示\n```\ndisplay:none; /*不显示，使用的场景非常多*/\n    block; /*把内联标签变成块级标签*/\n    inline; /*把块级标签变成内联标签*/\n    list-item; /*列表项*/\n    run-in; /*追加部分*/\n    compact; /*紧凑*/\n    marker; /*标记*/\n    table;\n    inline-table;\n    table-raw-group;\n    table-header-group;\n    table-footer-group;\n    table-raw;\n    table-column-group;\n    table-column;\n    table-cell;\n    table-caption; /*表格标题*/\n```\n## (2) *box（盒子）\n宽度 width: 长度 | 百分比 | auto;\n\n高度 height: 长度 | 百分比 | auto;\n\n清除 clear: none | left | right | both;\n\n边界 margin: 上 右 下 左 ;\n\n填充 padding: 上 右 下 左 ;\n\n定位 position: absolute | relative | static;\n\n透明度 visibility: inherit | visible | hidden;\n\n溢出 overflow: visible | hidden | scroll auto;\n\n裁切 clip: rect(12px,auto,12px,auto)\n\n## (3) float（漂浮）\n漂浮 float: left | right | none; 在页面布局的时候用的最多\n\n常见用法\n```\n<div style='background-color:red;float:left;width: 50%;' >div1</div>\n<div style='background-color:green;float:right;width: 50%;' >div2</div>\n```\n一个问题\n子标签使用了float时候，父标签的样式失效\n\n```\n<div style='background-color:red;'>\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n</div>\n```\n\n解决方案一：clear: both\n\n```\n<div style='background-color:red;'>\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n    <div style=\"clear: both;\"></div> <!--加上clear：both之后就正常了-->\n</div>\n```\n解决方案二：clearfix\n```\n<div style='background-color:red;' class=\"clearfix\">\n    <div style=\"float: left\">div1</div>\n    <div style=\"float: left\">div2</div>\n</div>\n.clearfix:after{\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n```\n## (4) position（定位）\nfixed\n一般用来写网页顶端的固定导航条，或者两侧的菜单。\n\n```\n<!--对于块级标签来说加上position:fixed之后，该div就不会占一整行，一般需要手动定义宽度，如width:100%-->\n \n<div style=\"position:fixed;height:10%;background-color:lightskyblue;color:white;width:100%;top:0px;\">我是导航</div>\n<div style=\"\">\n    <div style=\"position:fixed;bottom: 0px;top:10%;float: left;width: 20%;background-color:indianred\">我是菜单</div>\n    <div style=\"float: right;width:80%;\"><p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n        <p>我是内容</p>\n    </div>\n</div>\n```\nabsolute与relative\n这两者一般配合使用，用于调整div之间的相对位置\n```\n<div style=\"position:relative;width: 300px;height: 150px;\">\n    <div style=\"position:absolute;float: left;width: 20%;background-color:indianred;bottom: 0px;right: 0px;\">我是菜单</div>\n</div>\n\n```\n## (5) 透明度\n```\n.image{\n    opacity: 0.5\n}\n<img src=\"http://www.jotlab.com/wp-content/uploads/2008/08/python.jpg\" style=\"opacity: 0.5; width:50%; height:50%; \">\n```\n## (6) font（字体）\n```\n颜色 color: 数值;\n大小 font-size: 数值;\n字体 font-family: \"Courier New\", Courier, monospace, \"Times New Roman\", Times, serif, Arial, Helvetica, sans-serif, Verdana\n样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)\n粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)\n变体 font-variant: small-caps;(小型大写字母) normal;(正常)\n```\n## (4) background（背景）\n```\n背景 background: transparent; /透视背景*/\n颜色 background-color: 数值;\n图片 background-image: url() | none;\n重复 background-repeat: inherit | no-repeat | repeat | repeat-x | repeat-y;\n\nbackground-repeat : repeat; /*重复排列-网页默认*/\nbackground-repeat : no-repeat; /*不重复排列*/\nbackground-repeat : repeat-x; /*在x轴重复排列*/\nbackground-repeat : repeat-y; /*在y轴重复排列*/\n滚动 background-attachment: fixed | scroll;\n位置 background-position:数值 | top | bottom | left | right | center;\n\nbackground-position : 90% 90%; /*背景图片x与y轴的位置*/\nbackground-position : top; /*向上对齐*/\nbackground-position : buttom; /*向下对齐*/\nbackground-position : left; /*向左对齐*/\nbackground-position : right; /*向右对齐*/\nbackground-position : center; /*居中对齐*/\n简写 background:背景颜色 | 背景图象 | 背景重复 | 背景附件 | 背景位置 ;\n```\n## (7) text（文本）\n```\n大小写 text-transform: capitalize | uppercase | lowercase | none;\n修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)\n排列 text-align: justify | left | right | center;\n缩进 text-indent: 数值 | inherit;\n阴影 text-shadow:数值;\n```\n\n## (8) border（边框）\n```\n边框样式 border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;\n边框宽度 border-width: ;\n边框颜色 border-color: top值 right值 bottom值 left值;\n简写 border: width style color;\n\n边　　框 {border:border-width border-style color}\n上 边 框 {border-top:border-top-width border-style color}\n右 边 框 {border-right:border-right-width border-style color}\n下 边 框 {border-bottom:border-bottom-width border-style color}\n左 边 框 {border-left:border-left-width border-style color}\n```\n## (9) list-style（列表样式）\n```\n\n类型 list-style-type: disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none;\n\nlist-style-type:none; /*不编号*/\nlist-style-type:decimal; /*阿拉伯数字*/\nlist-style-type:lower-roman; /*小写罗马数字*/\nlist-style-type:upper-roman; /*大写罗马数字*/\nlist-style-type:lower-alpha; /*小写英文字母*/\nlist-style-type:upper-alpha; /*大写英文字母*/\nlist-style-type:disc; /*实心圆形符号*/\nlist-style-type:circle; /*空心圆形符号*/\nlist-style-type:square; /*实心方形符号*/\n位置 list-style-position: outside | inside;\n图像 list-style-image: URL;\n简写 list-style:目录样式类型 | 目录样式位置 | url;\n```\n## (10) margin（边界）\n\n```\nmargin-top:10px; (上边界)\nmargin-right:10px; (右边界)\nmargin-bottom:10px; (下边界值)\nmargin-left:10px; (左边界值)\nmargin-inside:;\nmargin-outside:;\n\n```\n## (11) padding（填充）\n```\npadding-top:10px; /*上边框留空白*/\npadding-right:10px; /*右边框留空白*/\npadding-bottom:10px; /*下边框留空白*/\npadding-left:10px; /*左边框留空白\n```\n## (12) vertical（垂直）\n```\nvertical-align:sub; /*下标字*/\nvertical-align:super; /*上标字*/\nvertical-align:top; /*垂直向上对齐*/\nvertical-align:bottom; /*垂直向下对齐*/\nvertical-align:middle; /*垂直居中对齐*/\nvertical-align:text-top; /*文字垂直向上对齐*/\nvertical-align:text-bottom; /*文字垂直向下对齐*/\n```\n## (13) a（链接）\n```\na /*所有超链接*/\na:link /*超链接文字格式*/\na:visited /*浏览过的链接文字格式*/\na:active /*按下链接的格式*/\na:hover /*鼠标转到链接*/\n```\n## (14) cursor（光标）\n```\n光标形状 cursor:hand | crosshair | text | wait | move | help | e-resize | nw-resize | w-resize | s-resize | se-resize | sw-resize;\n\n/*也可以自定义*/\ncursor: hand; /*链接手指*/\ncursor: crosshair /*十字体 */\ncursor: s-resize /*箭头朝下 */\ncursor: move /*十字箭头, 朝右*/\ncursor: help /*加一问号 */\ncursor: w-resize /*箭头朝左 */\ncursor: n-resize /*箭头朝上 */\ncursor: ne-resize /*箭头朝右上 */\ncursor: nw-resize /*箭头朝左上 */\ncursor: text /*文字型*/\ncursor: se-resize /*箭头斜右下 */\ncursor: sw-resize /*箭头斜左下*/\ncursor: wait /*漏斗*/\n```\n# 二、css实践\n## (1) css的三种写法\n行内样式：写在对应标签的style属性里面\n```\n<html>\n    <head>  \n        <title>Test</title>\n    </head>\n\n    <body>\n        <div style='background-color:red'>123</div>\n    </body>\n</html>\n```\n内页样式：写在HTML页面里面的style标签里面\n```\n<html>\n    <head>\n        <title>Test</title>\n        <style>\n            .logo{\n                background-color:red;\n            }\n        </style>\n    </head>\n\n    <body>\n        <div class='logo'>123</div>\n    </body>\n</html>\n\n```\n外部样式：通过link标签引入CSS样式\n\n```\n<html>\n    <head>\n        <title>Test</title>\n        <link rel='stylesheet' href='common1.css'/>\n    </head>\n\n    <body>\n        <div class=\"logo\">123</div>\n    </body>\n</html>\n.logo {\n    background-color: red;\n    color: white;\n}\n```\n## (2) 常规用例\n```\np {font-family: \"sans serif\";}  /*值为若干单词，则要给值加引号*/\n\n.logo {background-color: red;}\n\n.logo a,.logo p {background-color: red;}\n\n#morra {background-color: green;}\n\na, div { color: red;}   /*a或div都使用这个css*/\n\na div { color: red;}    /*只有a下面的div使用该css*/\n```\n注：css 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。\n\n三、Demo\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>This is a demo</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <style type=\"text/css\">\n        body {\n            background-color: #e1ddd9;\n            font-size: 12px;\n            font-family: Verdana, Arial, Helvetica, SunSans-Regular, Sans-Serif;\n            color: #564b47;\n            padding: 0px;\n            margin: 0px;\n        }\n        #inhalt {\n            position: absolute;\n            height: 200px;\n            width: 400px;\n            margin: -100px 0px 0px -200px;\n            top: 50%;\n            left: 50%;\n            text-align: center;\n            padding: 0px;\n            background-color: #f5f5f5;\n            border: 1px dotted #000000;\n            overflow: auto;\n        }\n        p, h1 {\n            margin: 0px;\n            padding: 10px;\n        }\n        h1 {\n            font-size: 11px;\n            text-transform: uppercase;\n            text-align: center;\n            color: #564b47;\n            background-color: #90897a;\n        }\n        a {\n            color: #ff66cc;\n            font-size: 11px;\n            background-color: transparent;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n<div id=\"inhalt\">\n    <p>\n    <h1>Morra's Demo</h1><br/><br/>\n    This area should be horizontally and vertically centered.<br/>\n    This text stays left aligned<br/>\n    <a href=\"http://www.cnblogs.com/whatisfantasy/\">what is fantasy?</a>\n    </p>\n    <p>\n</div>\n</body>\n</html>\n```\n\n\n# 盒模型\n盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：\"every element in web design is a rectangular box\"。如图：\n\nbox-model\n![](D:/work/front-end-tutorial/box-sizing.png)\n\nCSS3中新增了一种盒模型计算方式：```box-sizing```熟悉。盒模型默认的值是content-box, 新增的值是```padding-box```和```border-box```，几种盒模型计算元素宽高的区别如下：\n\n## content-box（默认）\n布局所占宽度Width：\n```\nWidth = width + padding-left + padding-right + border-left + border-right\n```\n布局所占高度Height:\n```\nHeight = height + padding-top + padding-bottom + border-top + border-bottom\n```\n## padding-box\n布局所占宽度Width：\n```\nWidth = width(包含padding-left + padding-right) + border-top + border-bottom\n```\n布局所占高度Height:\n```\nHeight = height(包含padding-top + padding-bottom) + border-top + border-bottom\n```\n## border-box\n布局所占宽度Width：\n```\nWidth = width(包含padding-left + padding-right + border-left + border-right)\n```\n布局所占高度Height:\n```\nHeight = height(包含padding-top + padding-bottom + border-top + border-bottom)\n```\n## margin叠加\n外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。\n\n一般来说， 垂直外边距叠加有三种情况：\n\n* 元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。\n* 相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。\n* 包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。\n\n\n# CSS普通流（文档流）\n首先明确一点的是，W3C规范中没有document flow这个概念，只有normal-flow, 文档流的叫法主要还是多数中文译者的翻译方式问题。\n\n## 定义\n什么是普通流？简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。并且这种过程遵循标准的描述。\n\n## 调节普通流元素位置\n一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。\n\n只要不是float和绝对定位方式布局的，都在普通流里面。\n\n# CSS定位方式\n## display属性\n每一个元素都有默认的display属性，使用最多的是block, inline和inline-block，不常用的是table-cell。\n\n根据display属性，我们可以将元素分为块级元素(block)和内联级元素(inline)。它们最大区别是:block元素可以设置宽度，独占一行。inline元素宽度由内容决定，与其他元素并列在一行。\n\n常见的block属性元素有：div, h1-h6, ul, li, ol, dl, dd, dt。\n\n常见的inline属性元素有: span, a, em。\n\n## block\n宽高可以自行设置，默认宽度由父容器决定，默认高度有内容决定。自己独占一行。\n\n## inline\n宽度和高度都有内容决定，与其他元素共占一行。\n\n## inline-block\n宽度可以自行设置，类似block，但是与其他元素共占一行，类似inline。长用于设置垂直居中。\n\n## table-cell\n此属性指让标签元素以表格单元格的形式呈现，单元格有一些比较特殊的属性，可以设置元素的垂直居中等。\n\n# position属性\n元素在页面中的布局遵守一套文档流的方式，默认的定位属性值为static。它其实是未被设置定位的。\n\n元素如果被定位了，那么它的top,left,bottom,right值就会生效，能设置定位的属性是relative,absolute和fixed。\n\n需要注意的另一点是被定位的元素层次(z-index)会得到提高。\n\n## relative（相对定位）\n设置了相对定位之后，通过修改top,left,bottom,right值，元素会在自身文档流所在位置上被移动，其他的元素则不会调整位置来弥补它偏离后剩下的空隙。\n\n## absolute（绝对定位）\n设置了绝对定位之后，元素脱离文档流，其他的元素会调整位置来弥补它偏离后剩下的空隙。元素偏移是相对于是它最近的设置了定位属性（position值不为static）的元素。\n\n且如果元素为块级元素（display属性值为block)，那么它的宽度也会由内容撑开。因为：\n\n默认文档流中块级元素如果没有设置宽度属性，会自动填满整行。\n\n## fixed(固定定位)\n设置了固定定位之后，元素相对的偏移的参考是可视窗口，即使页面滚动，元素仍然会在固定位置。\n\n\n# CSS浮动相关\n这也是CSS定位机制的一种。\n\n首先了解两个概念：\n\n文档流：文档流是文档中可显示对象在排列时所占用的位置。\n* 浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。\n* 浮动的实际用途，可设置文字环绕或使元素宽度由内容填充（类似Inline-block)。使用浮动需要注意的是如果浮动的元素高度比父级容器还高，那么需要设置父级容器的overflow属性为auto,使其自动撑满。\n\n\n[清除浮动](http://www.iyunlu.com/view/css-xhtml/55.html)\n\n\n# CSS选择器\n选择器是匹配元素的一种模式，不只是在CSS中，JavaScript对CSS的选择器也是支持的，比如document.document.querySelectorAll。\n\n## 关于CSS解析器\nHTML 经过解析生成 DOM Tree（这个我们比较熟悉）；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。\n\nRender Tree 中的元素（WebKit 中称为「renderers」，Firefox 下为「frames」）与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。\n\n在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。\n\n## 解析顺序\nCSS匹配不是从左到右进行查找，而是从右到左进行查找。如果从左到右的顺序，那么每条选择器都需要遍历整个DOM树，性能很受影响。所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找, 所以选择器最好写的简洁一点。\n\n## 选择器权重\n权重，也就是选择器的优先级，每条选择器的规则都有其权重，权重大的会覆盖掉权重小的，很多CSS出现问题的场景，都是某处定义了一个更高权重的规则，导致此处规则不生效。\n\n根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） > style标签 > link标签。\n\n另外一点需要注意的是!improtant,凡是属性值后加上了!important，那么它的值不会被其他值替换。\n\n权重的计算\n通过这篇文章你应该知道的一些事情——CSS权重。了解下权重的计算，主要的规则就是:\n\nid选择器 > 类，属性选择器和伪类选择器 > 元素和伪元素\n\n## 基本选择器\n通配符选择器（＊）\nid选择器（\\\\#ID）\n类选择器（.className）\n元素选择器(E)\n后代选择器（Ｅ Ｆ）\n子元素选择器(E>F)\n相邻兄弟元素选择器(E + F)\n群组选择器（selector1,selector2,...,selectorN）\n属性选择器\n使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。\n\nE[attr]：只使用属性名，但没有确定任何属性值\nE[attr=\"value\"]：指定属性名，并指定了该属性的属性值\nE[attr~=\"value\"]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写\nE[attr^=\"value\"]：指定了属性名，并且有属性值，属性值是以value开头的；\nE[attr$=\"value\"]：指定了属性名，并且有属性值，而且属性值是以value结束的；\nE[attr*=\"value\"]：指定了属性名，并且有属性值，而且属值中包含了value；\nE[attr|=\"value\"]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;\n## 伪类选择器\n伪类选择器的形式就是:xxx， 比如:hover, :link, :nth。\n\n## 动态伪类\n这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如\":link\",\":visited\";另外一种被称作用户行为伪类，如“:hover”,\":active\"和\":focus\"。先来看最常见的锚点伪类。\n\nhover: 用于当用户把鼠标移动到元素上面时的效果\nactive: 用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）\nfocus: 用于元素成为焦点，这个经常用在表单元素上\n## UI元素状态伪类\n主要是针对于HTML中的Form元素操作, IE8不支持\":checked\",\":enabled\",\":disabled\"这三种选择器。\n\n## CSS3的:nth选择器\n主要注意的是CSS3添加的nth选择器在IE8下不支持。\n\nfist-child: 选择某个元素的第一个子元素；\nlast-child: 选择某个元素的最后一个子元素；\nnth-child(): 选择某个元素的一个或多个特定的子元素；\n其他： 常用的就是上面三种了，其他自行了解。\n选择器分类总结\n\n见图:\n\ncss-selector\n![](D:/work/front-end-tutorial/css-selector.jpg)\n选择器兼容性\n选择器的兼容性:\n\ncss选择器兼容性\n![](D:/work/front-end-tutorial/cssSelect2.jpg)\n选择器的优化","slug":"css-tutorial","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w10008fm5y7g5m7db9","content":"<h1 id=\"一、常用css属性\"><a href=\"#一、常用css属性\" class=\"headerlink\" title=\"一、常用css属性\"></a>一、常用css属性</h1><h2 id=\"1-block（区块）\"><a href=\"#1-block（区块）\" class=\"headerlink\" title=\"(1) *block（区块）\"></a>(1) *block（区块）</h2><p>行高 line-height:数值 | inherit | normal;</p>\n<p>字间距 letter-spacing: 数值 | inherit | normal;</p>\n<p>词间距 word-spacing: 数值 | inherit | normal;</p>\n<p>空格 white-space: pre(保留) | nowrap(不换行) | normal;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*表格宽度自适应*/</span><br><span class=\"line\">th &#123;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示\"></a>显示</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:none; /*不显示，使用的场景非常多*/</span><br><span class=\"line\">    block; /*把内联标签变成块级标签*/</span><br><span class=\"line\">    inline; /*把块级标签变成内联标签*/</span><br><span class=\"line\">    list-item; /*列表项*/</span><br><span class=\"line\">    run-in; /*追加部分*/</span><br><span class=\"line\">    compact; /*紧凑*/</span><br><span class=\"line\">    marker; /*标记*/</span><br><span class=\"line\">    table;</span><br><span class=\"line\">    inline-table;</span><br><span class=\"line\">    table-raw-group;</span><br><span class=\"line\">    table-header-group;</span><br><span class=\"line\">    table-footer-group;</span><br><span class=\"line\">    table-raw;</span><br><span class=\"line\">    table-column-group;</span><br><span class=\"line\">    table-column;</span><br><span class=\"line\">    table-cell;</span><br><span class=\"line\">    table-caption; /*表格标题*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-box（盒子）\"><a href=\"#2-box（盒子）\" class=\"headerlink\" title=\"(2) *box（盒子）\"></a>(2) *box（盒子）</h2><p>宽度 width: 长度 | 百分比 | auto;</p>\n<p>高度 height: 长度 | 百分比 | auto;</p>\n<p>清除 clear: none | left | right | both;</p>\n<p>边界 margin: 上 右 下 左 ;</p>\n<p>填充 padding: 上 右 下 左 ;</p>\n<p>定位 position: absolute | relative | static;</p>\n<p>透明度 visibility: inherit | visible | hidden;</p>\n<p>溢出 overflow: visible | hidden | scroll auto;</p>\n<p>裁切 clip: rect(12px,auto,12px,auto)</p>\n<h2 id=\"3-float（漂浮）\"><a href=\"#3-float（漂浮）\" class=\"headerlink\" title=\"(3) float（漂浮）\"></a>(3) float（漂浮）</h2><p>漂浮 float: left | right | none; 在页面布局的时候用的最多</p>\n<p>常见用法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;float:left;width: 50%;&#x27; &gt;div1&lt;/div&gt;</span><br><span class=\"line\">&lt;div style=&#x27;background-color:green;float:right;width: 50%;&#x27; &gt;div2&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>一个问题<br>子标签使用了float时候，父标签的样式失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解决方案一：clear: both</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt; &lt;!--加上clear：both之后就正常了--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>解决方案二：clearfix</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27; class=&quot;clearfix&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">    content: &quot;.&quot;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-position（定位）\"><a href=\"#4-position（定位）\" class=\"headerlink\" title=\"(4) position（定位）\"></a>(4) position（定位）</h2><p>fixed<br>一般用来写网页顶端的固定导航条，或者两侧的菜单。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--对于块级标签来说加上position:fixed之后，该div就不会占一整行，一般需要手动定义宽度，如width:100%--&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;div style=&quot;position:fixed;height:10%;background-color:lightskyblue;color:white;width:100%;top:0px;&quot;&gt;我是导航&lt;/div&gt;</span><br><span class=\"line\">&lt;div style=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;position:fixed;bottom: 0px;top:10%;float: left;width: 20%;background-color:indianred&quot;&gt;我是菜单&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: right;width:80%;&quot;&gt;&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>absolute与relative<br>这两者一般配合使用，用于调整div之间的相对位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;position:relative;width: 300px;height: 150px;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;position:absolute;float: left;width: 20%;background-color:indianred;bottom: 0px;right: 0px;&quot;&gt;我是菜单&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-透明度\"><a href=\"#5-透明度\" class=\"headerlink\" title=\"(5) 透明度\"></a>(5) 透明度</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.image&#123;</span><br><span class=\"line\">    opacity: 0.5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;img src=&quot;http://www.jotlab.com/wp-content/uploads/2008/08/python.jpg&quot; style=&quot;opacity: 0.5; width:50%; height:50%; &quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-font（字体）\"><a href=\"#6-font（字体）\" class=\"headerlink\" title=\"(6) font（字体）\"></a>(6) font（字体）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">颜色 color: 数值;</span><br><span class=\"line\">大小 font-size: 数值;</span><br><span class=\"line\">字体 font-family: &quot;Courier New&quot;, Courier, monospace, &quot;Times New Roman&quot;, Times, serif, Arial, Helvetica, sans-serif, Verdana</span><br><span class=\"line\">样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)</span><br><span class=\"line\">粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)</span><br><span class=\"line\">变体 font-variant: small-caps;(小型大写字母) normal;(正常)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-background（背景）\"><a href=\"#4-background（背景）\" class=\"headerlink\" title=\"(4) background（背景）\"></a>(4) background（背景）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">背景 background: transparent; /透视背景*/</span><br><span class=\"line\">颜色 background-color: 数值;</span><br><span class=\"line\">图片 background-image: url() | none;</span><br><span class=\"line\">重复 background-repeat: inherit | no-repeat | repeat | repeat-x | repeat-y;</span><br><span class=\"line\"></span><br><span class=\"line\">background-repeat : repeat; /*重复排列-网页默认*/</span><br><span class=\"line\">background-repeat : no-repeat; /*不重复排列*/</span><br><span class=\"line\">background-repeat : repeat-x; /*在x轴重复排列*/</span><br><span class=\"line\">background-repeat : repeat-y; /*在y轴重复排列*/</span><br><span class=\"line\">滚动 background-attachment: fixed | scroll;</span><br><span class=\"line\">位置 background-position:数值 | top | bottom | left | right | center;</span><br><span class=\"line\"></span><br><span class=\"line\">background-position : 90% 90%; /*背景图片x与y轴的位置*/</span><br><span class=\"line\">background-position : top; /*向上对齐*/</span><br><span class=\"line\">background-position : buttom; /*向下对齐*/</span><br><span class=\"line\">background-position : left; /*向左对齐*/</span><br><span class=\"line\">background-position : right; /*向右对齐*/</span><br><span class=\"line\">background-position : center; /*居中对齐*/</span><br><span class=\"line\">简写 background:背景颜色 | 背景图象 | 背景重复 | 背景附件 | 背景位置 ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-text（文本）\"><a href=\"#7-text（文本）\" class=\"headerlink\" title=\"(7) text（文本）\"></a>(7) text（文本）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大小写 text-transform: capitalize | uppercase | lowercase | none;</span><br><span class=\"line\">修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)</span><br><span class=\"line\">排列 text-align: justify | left | right | center;</span><br><span class=\"line\">缩进 text-indent: 数值 | inherit;</span><br><span class=\"line\">阴影 text-shadow:数值;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-border（边框）\"><a href=\"#8-border（边框）\" class=\"headerlink\" title=\"(8) border（边框）\"></a>(8) border（边框）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">边框样式 border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;</span><br><span class=\"line\">边框宽度 border-width: ;</span><br><span class=\"line\">边框颜色 border-color: top值 right值 bottom值 left值;</span><br><span class=\"line\">简写 border: width style color;</span><br><span class=\"line\"></span><br><span class=\"line\">边　　框 &#123;border:border-width border-style color&#125;</span><br><span class=\"line\">上 边 框 &#123;border-top:border-top-width border-style color&#125;</span><br><span class=\"line\">右 边 框 &#123;border-right:border-right-width border-style color&#125;</span><br><span class=\"line\">下 边 框 &#123;border-bottom:border-bottom-width border-style color&#125;</span><br><span class=\"line\">左 边 框 &#123;border-left:border-left-width border-style color&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-list-style（列表样式）\"><a href=\"#9-list-style（列表样式）\" class=\"headerlink\" title=\"(9) list-style（列表样式）\"></a>(9) list-style（列表样式）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">类型 list-style-type: disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none;</span><br><span class=\"line\"></span><br><span class=\"line\">list-style-type:none; /*不编号*/</span><br><span class=\"line\">list-style-type:decimal; /*阿拉伯数字*/</span><br><span class=\"line\">list-style-type:lower-roman; /*小写罗马数字*/</span><br><span class=\"line\">list-style-type:upper-roman; /*大写罗马数字*/</span><br><span class=\"line\">list-style-type:lower-alpha; /*小写英文字母*/</span><br><span class=\"line\">list-style-type:upper-alpha; /*大写英文字母*/</span><br><span class=\"line\">list-style-type:disc; /*实心圆形符号*/</span><br><span class=\"line\">list-style-type:circle; /*空心圆形符号*/</span><br><span class=\"line\">list-style-type:square; /*实心方形符号*/</span><br><span class=\"line\">位置 list-style-position: outside | inside;</span><br><span class=\"line\">图像 list-style-image: URL;</span><br><span class=\"line\">简写 list-style:目录样式类型 | 目录样式位置 | url;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-margin（边界）\"><a href=\"#10-margin（边界）\" class=\"headerlink\" title=\"(10) margin（边界）\"></a>(10) margin（边界）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin-top:10px; (上边界)</span><br><span class=\"line\">margin-right:10px; (右边界)</span><br><span class=\"line\">margin-bottom:10px; (下边界值)</span><br><span class=\"line\">margin-left:10px; (左边界值)</span><br><span class=\"line\">margin-inside:;</span><br><span class=\"line\">margin-outside:;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"11-padding（填充）\"><a href=\"#11-padding（填充）\" class=\"headerlink\" title=\"(11) padding（填充）\"></a>(11) padding（填充）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-top:10px; /*上边框留空白*/</span><br><span class=\"line\">padding-right:10px; /*右边框留空白*/</span><br><span class=\"line\">padding-bottom:10px; /*下边框留空白*/</span><br><span class=\"line\">padding-left:10px; /*左边框留空白</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-vertical（垂直）\"><a href=\"#12-vertical（垂直）\" class=\"headerlink\" title=\"(12) vertical（垂直）\"></a>(12) vertical（垂直）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical-align:sub; /*下标字*/</span><br><span class=\"line\">vertical-align:super; /*上标字*/</span><br><span class=\"line\">vertical-align:top; /*垂直向上对齐*/</span><br><span class=\"line\">vertical-align:bottom; /*垂直向下对齐*/</span><br><span class=\"line\">vertical-align:middle; /*垂直居中对齐*/</span><br><span class=\"line\">vertical-align:text-top; /*文字垂直向上对齐*/</span><br><span class=\"line\">vertical-align:text-bottom; /*文字垂直向下对齐*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-a（链接）\"><a href=\"#13-a（链接）\" class=\"headerlink\" title=\"(13) a（链接）\"></a>(13) a（链接）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a /*所有超链接*/</span><br><span class=\"line\">a:link /*超链接文字格式*/</span><br><span class=\"line\">a:visited /*浏览过的链接文字格式*/</span><br><span class=\"line\">a:active /*按下链接的格式*/</span><br><span class=\"line\">a:hover /*鼠标转到链接*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-cursor（光标）\"><a href=\"#14-cursor（光标）\" class=\"headerlink\" title=\"(14) cursor（光标）\"></a>(14) cursor（光标）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">光标形状 cursor:hand | crosshair | text | wait | move | help | e-resize | nw-resize | w-resize | s-resize | se-resize | sw-resize;</span><br><span class=\"line\"></span><br><span class=\"line\">/*也可以自定义*/</span><br><span class=\"line\">cursor: hand; /*链接手指*/</span><br><span class=\"line\">cursor: crosshair /*十字体 */</span><br><span class=\"line\">cursor: s-resize /*箭头朝下 */</span><br><span class=\"line\">cursor: move /*十字箭头, 朝右*/</span><br><span class=\"line\">cursor: help /*加一问号 */</span><br><span class=\"line\">cursor: w-resize /*箭头朝左 */</span><br><span class=\"line\">cursor: n-resize /*箭头朝上 */</span><br><span class=\"line\">cursor: ne-resize /*箭头朝右上 */</span><br><span class=\"line\">cursor: nw-resize /*箭头朝左上 */</span><br><span class=\"line\">cursor: text /*文字型*/</span><br><span class=\"line\">cursor: se-resize /*箭头斜右下 */</span><br><span class=\"line\">cursor: sw-resize /*箭头斜左下*/</span><br><span class=\"line\">cursor: wait /*漏斗*/</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、css实践\"><a href=\"#二、css实践\" class=\"headerlink\" title=\"二、css实践\"></a>二、css实践</h1><h2 id=\"1-css的三种写法\"><a href=\"#1-css的三种写法\" class=\"headerlink\" title=\"(1) css的三种写法\"></a>(1) css的三种写法</h2><p>行内样式：写在对应标签的style属性里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;  </span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div style=&#x27;background-color:red&#x27;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>内页样式：写在HTML页面里面的style标签里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            .logo&#123;</span><br><span class=\"line\">                background-color:red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&#x27;logo&#x27;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>外部样式：通过link标签引入CSS样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">        &lt;link rel=&#x27;stylesheet&#x27; href=&#x27;common1.css&#x27;/&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&quot;logo&quot;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">.logo &#123;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">    color: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-常规用例\"><a href=\"#2-常规用例\" class=\"headerlink\" title=\"(2) 常规用例\"></a>(2) 常规用例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;font-family: &quot;sans serif&quot;;&#125;  /*值为若干单词，则要给值加引号*/</span><br><span class=\"line\"></span><br><span class=\"line\">.logo &#123;background-color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.logo a,.logo p &#123;background-color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#morra &#123;background-color: green;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a, div &#123; color: red;&#125;   /*a或div都使用这个css*/</span><br><span class=\"line\"></span><br><span class=\"line\">a div &#123; color: red;&#125;    /*只有a下面的div使用该css*/</span><br></pre></td></tr></table></figure>\n<p>注：css 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。</p>\n<p>三、Demo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;This is a demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            background-color: #e1ddd9;</span><br><span class=\"line\">            font-size: 12px;</span><br><span class=\"line\">            font-family: Verdana, Arial, Helvetica, SunSans-Regular, Sans-Serif;</span><br><span class=\"line\">            color: #564b47;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #inhalt &#123;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">            width: 400px;</span><br><span class=\"line\">            margin: -100px 0px 0px -200px;</span><br><span class=\"line\">            top: 50%;</span><br><span class=\"line\">            left: 50%;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">            background-color: #f5f5f5;</span><br><span class=\"line\">            border: 1px dotted #000000;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p, h1 &#123;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">            padding: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h1 &#123;</span><br><span class=\"line\">            font-size: 11px;</span><br><span class=\"line\">            text-transform: uppercase;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            color: #564b47;</span><br><span class=\"line\">            background-color: #90897a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a &#123;</span><br><span class=\"line\">            color: #ff66cc;</span><br><span class=\"line\">            font-size: 11px;</span><br><span class=\"line\">            background-color: transparent;</span><br><span class=\"line\">            text-decoration: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;inhalt&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">    &lt;h1&gt;Morra&#x27;s Demo&lt;/h1&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">    This area should be horizontally and vertically centered.&lt;br/&gt;</span><br><span class=\"line\">    This text stays left aligned&lt;br/&gt;</span><br><span class=\"line\">    &lt;a href=&quot;http://www.cnblogs.com/whatisfantasy/&quot;&gt;what is fantasy?&lt;/a&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h1><p>盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：”every element in web design is a rectangular box”。如图：</p>\n<p>box-model<br><img src=\"D:/work/front-end-tutorial/box-sizing.png\"></p>\n<p>CSS3中新增了一种盒模型计算方式：<code>box-sizing</code>熟悉。盒模型默认的值是content-box, 新增的值是<code>padding-box</code>和<code>border-box</code>，几种盒模型计算元素宽高的区别如下：</p>\n<h2 id=\"content-box（默认）\"><a href=\"#content-box（默认）\" class=\"headerlink\" title=\"content-box（默认）\"></a>content-box（默认）</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width + padding-left + padding-right + border-left + border-right</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height + padding-top + padding-bottom + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<h2 id=\"padding-box\"><a href=\"#padding-box\" class=\"headerlink\" title=\"padding-box\"></a>padding-box</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width(包含padding-left + padding-right) + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height(包含padding-top + padding-bottom) + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<h2 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width(包含padding-left + padding-right + border-left + border-right)</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height(包含padding-top + padding-bottom + border-top + border-bottom)</span><br></pre></td></tr></table></figure>\n<h2 id=\"margin叠加\"><a href=\"#margin叠加\" class=\"headerlink\" title=\"margin叠加\"></a>margin叠加</h2><p>外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。</p>\n<p>一般来说， 垂直外边距叠加有三种情况：</p>\n<ul>\n<li>元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。</li>\n<li>相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。</li>\n<li>包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。</li>\n</ul>\n<h1 id=\"CSS普通流（文档流）\"><a href=\"#CSS普通流（文档流）\" class=\"headerlink\" title=\"CSS普通流（文档流）\"></a>CSS普通流（文档流）</h1><p>首先明确一点的是，W3C规范中没有document flow这个概念，只有normal-flow, 文档流的叫法主要还是多数中文译者的翻译方式问题。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>什么是普通流？简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。并且这种过程遵循标准的描述。</p>\n<h2 id=\"调节普通流元素位置\"><a href=\"#调节普通流元素位置\" class=\"headerlink\" title=\"调节普通流元素位置\"></a>调节普通流元素位置</h2><p>一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。</p>\n<p>只要不是float和绝对定位方式布局的，都在普通流里面。</p>\n<h1 id=\"CSS定位方式\"><a href=\"#CSS定位方式\" class=\"headerlink\" title=\"CSS定位方式\"></a>CSS定位方式</h1><h2 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h2><p>每一个元素都有默认的display属性，使用最多的是block, inline和inline-block，不常用的是table-cell。</p>\n<p>根据display属性，我们可以将元素分为块级元素(block)和内联级元素(inline)。它们最大区别是:block元素可以设置宽度，独占一行。inline元素宽度由内容决定，与其他元素并列在一行。</p>\n<p>常见的block属性元素有：div, h1-h6, ul, li, ol, dl, dd, dt。</p>\n<p>常见的inline属性元素有: span, a, em。</p>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>宽高可以自行设置，默认宽度由父容器决定，默认高度有内容决定。自己独占一行。</p>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>宽度和高度都有内容决定，与其他元素共占一行。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>宽度可以自行设置，类似block，但是与其他元素共占一行，类似inline。长用于设置垂直居中。</p>\n<h2 id=\"table-cell\"><a href=\"#table-cell\" class=\"headerlink\" title=\"table-cell\"></a>table-cell</h2><p>此属性指让标签元素以表格单元格的形式呈现，单元格有一些比较特殊的属性，可以设置元素的垂直居中等。</p>\n<h1 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h1><p>元素在页面中的布局遵守一套文档流的方式，默认的定位属性值为static。它其实是未被设置定位的。</p>\n<p>元素如果被定位了，那么它的top,left,bottom,right值就会生效，能设置定位的属性是relative,absolute和fixed。</p>\n<p>需要注意的另一点是被定位的元素层次(z-index)会得到提高。</p>\n<h2 id=\"relative（相对定位）\"><a href=\"#relative（相对定位）\" class=\"headerlink\" title=\"relative（相对定位）\"></a>relative（相对定位）</h2><p>设置了相对定位之后，通过修改top,left,bottom,right值，元素会在自身文档流所在位置上被移动，其他的元素则不会调整位置来弥补它偏离后剩下的空隙。</p>\n<h2 id=\"absolute（绝对定位）\"><a href=\"#absolute（绝对定位）\" class=\"headerlink\" title=\"absolute（绝对定位）\"></a>absolute（绝对定位）</h2><p>设置了绝对定位之后，元素脱离文档流，其他的元素会调整位置来弥补它偏离后剩下的空隙。元素偏移是相对于是它最近的设置了定位属性（position值不为static）的元素。</p>\n<p>且如果元素为块级元素（display属性值为block)，那么它的宽度也会由内容撑开。因为：</p>\n<p>默认文档流中块级元素如果没有设置宽度属性，会自动填满整行。</p>\n<h2 id=\"fixed-固定定位\"><a href=\"#fixed-固定定位\" class=\"headerlink\" title=\"fixed(固定定位)\"></a>fixed(固定定位)</h2><p>设置了固定定位之后，元素相对的偏移的参考是可视窗口，即使页面滚动，元素仍然会在固定位置。</p>\n<h1 id=\"CSS浮动相关\"><a href=\"#CSS浮动相关\" class=\"headerlink\" title=\"CSS浮动相关\"></a>CSS浮动相关</h1><p>这也是CSS定位机制的一种。</p>\n<p>首先了解两个概念：</p>\n<p>文档流：文档流是文档中可显示对象在排列时所占用的位置。</p>\n<ul>\n<li>浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。</li>\n<li>浮动的实际用途，可设置文字环绕或使元素宽度由内容填充（类似Inline-block)。使用浮动需要注意的是如果浮动的元素高度比父级容器还高，那么需要设置父级容器的overflow属性为auto,使其自动撑满。</li>\n</ul>\n<p><a href=\"http://www.iyunlu.com/view/css-xhtml/55.html\">清除浮动</a></p>\n<h1 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h1><p>选择器是匹配元素的一种模式，不只是在CSS中，JavaScript对CSS的选择器也是支持的，比如document.document.querySelectorAll。</p>\n<h2 id=\"关于CSS解析器\"><a href=\"#关于CSS解析器\" class=\"headerlink\" title=\"关于CSS解析器\"></a>关于CSS解析器</h2><p>HTML 经过解析生成 DOM Tree（这个我们比较熟悉）；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。</p>\n<p>Render Tree 中的元素（WebKit 中称为「renderers」，Firefox 下为「frames」）与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。</p>\n<p>在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。</p>\n<h2 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h2><p>CSS匹配不是从左到右进行查找，而是从右到左进行查找。如果从左到右的顺序，那么每条选择器都需要遍历整个DOM树，性能很受影响。所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找, 所以选择器最好写的简洁一点。</p>\n<h2 id=\"选择器权重\"><a href=\"#选择器权重\" class=\"headerlink\" title=\"选择器权重\"></a>选择器权重</h2><p>权重，也就是选择器的优先级，每条选择器的规则都有其权重，权重大的会覆盖掉权重小的，很多CSS出现问题的场景，都是某处定义了一个更高权重的规则，导致此处规则不生效。</p>\n<p>根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） &gt; style标签 &gt; link标签。</p>\n<p>另外一点需要注意的是!improtant,凡是属性值后加上了!important，那么它的值不会被其他值替换。</p>\n<p>权重的计算<br>通过这篇文章你应该知道的一些事情——CSS权重。了解下权重的计算，主要的规则就是:</p>\n<p>id选择器 &gt; 类，属性选择器和伪类选择器 &gt; 元素和伪元素</p>\n<h2 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h2><p>通配符选择器（＊）<br>id选择器（\\#ID）<br>类选择器（.className）<br>元素选择器(E)<br>后代选择器（Ｅ Ｆ）<br>子元素选择器(E&gt;F)<br>相邻兄弟元素选择器(E + F)<br>群组选择器（selector1,selector2,…,selectorN）<br>属性选择器<br>使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。</p>\n<p>E[attr]：只使用属性名，但没有确定任何属性值<br>E[attr&#x3D;”value”]：指定属性名，并指定了该属性的属性值<br>E[attr~&#x3D;”value”]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写<br>E[attr^&#x3D;”value”]：指定了属性名，并且有属性值，属性值是以value开头的；<br>E[attr$&#x3D;”value”]：指定了属性名，并且有属性值，而且属性值是以value结束的；<br>E[attr*&#x3D;”value”]：指定了属性名，并且有属性值，而且属值中包含了value；<br>E[attr|&#x3D;”value”]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>伪类选择器的形式就是:xxx， 比如:hover, :link, :nth。</p>\n<h2 id=\"动态伪类\"><a href=\"#动态伪类\" class=\"headerlink\" title=\"动态伪类\"></a>动态伪类</h2><p>这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如”:link”,”:visited”;另外一种被称作用户行为伪类，如“:hover”,”:active”和”:focus”。先来看最常见的锚点伪类。</p>\n<p>hover: 用于当用户把鼠标移动到元素上面时的效果<br>active: 用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）<br>focus: 用于元素成为焦点，这个经常用在表单元素上</p>\n<h2 id=\"UI元素状态伪类\"><a href=\"#UI元素状态伪类\" class=\"headerlink\" title=\"UI元素状态伪类\"></a>UI元素状态伪类</h2><p>主要是针对于HTML中的Form元素操作, IE8不支持”:checked”,”:enabled”,”:disabled”这三种选择器。</p>\n<h2 id=\"CSS3的-nth选择器\"><a href=\"#CSS3的-nth选择器\" class=\"headerlink\" title=\"CSS3的:nth选择器\"></a>CSS3的:nth选择器</h2><p>主要注意的是CSS3添加的nth选择器在IE8下不支持。</p>\n<p>fist-child: 选择某个元素的第一个子元素；<br>last-child: 选择某个元素的最后一个子元素；<br>nth-child(): 选择某个元素的一个或多个特定的子元素；<br>其他： 常用的就是上面三种了，其他自行了解。<br>选择器分类总结</p>\n<p>见图:</p>\n<p>css-selector<br><img src=\"D:/work/front-end-tutorial/css-selector.jpg\"><br>选择器兼容性<br>选择器的兼容性:</p>\n<p>css选择器兼容性<br><img src=\"D:/work/front-end-tutorial/cssSelect2.jpg\"><br>选择器的优化</p>\n","excerpt":"","more":"<h1 id=\"一、常用css属性\"><a href=\"#一、常用css属性\" class=\"headerlink\" title=\"一、常用css属性\"></a>一、常用css属性</h1><h2 id=\"1-block（区块）\"><a href=\"#1-block（区块）\" class=\"headerlink\" title=\"(1) *block（区块）\"></a>(1) *block（区块）</h2><p>行高 line-height:数值 | inherit | normal;</p>\n<p>字间距 letter-spacing: 数值 | inherit | normal;</p>\n<p>词间距 word-spacing: 数值 | inherit | normal;</p>\n<p>空格 white-space: pre(保留) | nowrap(不换行) | normal;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*表格宽度自适应*/</span><br><span class=\"line\">th &#123;</span><br><span class=\"line\">white-space: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示\"></a>显示</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display:none; /*不显示，使用的场景非常多*/</span><br><span class=\"line\">    block; /*把内联标签变成块级标签*/</span><br><span class=\"line\">    inline; /*把块级标签变成内联标签*/</span><br><span class=\"line\">    list-item; /*列表项*/</span><br><span class=\"line\">    run-in; /*追加部分*/</span><br><span class=\"line\">    compact; /*紧凑*/</span><br><span class=\"line\">    marker; /*标记*/</span><br><span class=\"line\">    table;</span><br><span class=\"line\">    inline-table;</span><br><span class=\"line\">    table-raw-group;</span><br><span class=\"line\">    table-header-group;</span><br><span class=\"line\">    table-footer-group;</span><br><span class=\"line\">    table-raw;</span><br><span class=\"line\">    table-column-group;</span><br><span class=\"line\">    table-column;</span><br><span class=\"line\">    table-cell;</span><br><span class=\"line\">    table-caption; /*表格标题*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-box（盒子）\"><a href=\"#2-box（盒子）\" class=\"headerlink\" title=\"(2) *box（盒子）\"></a>(2) *box（盒子）</h2><p>宽度 width: 长度 | 百分比 | auto;</p>\n<p>高度 height: 长度 | 百分比 | auto;</p>\n<p>清除 clear: none | left | right | both;</p>\n<p>边界 margin: 上 右 下 左 ;</p>\n<p>填充 padding: 上 右 下 左 ;</p>\n<p>定位 position: absolute | relative | static;</p>\n<p>透明度 visibility: inherit | visible | hidden;</p>\n<p>溢出 overflow: visible | hidden | scroll auto;</p>\n<p>裁切 clip: rect(12px,auto,12px,auto)</p>\n<h2 id=\"3-float（漂浮）\"><a href=\"#3-float（漂浮）\" class=\"headerlink\" title=\"(3) float（漂浮）\"></a>(3) float（漂浮）</h2><p>漂浮 float: left | right | none; 在页面布局的时候用的最多</p>\n<p>常见用法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;float:left;width: 50%;&#x27; &gt;div1&lt;/div&gt;</span><br><span class=\"line\">&lt;div style=&#x27;background-color:green;float:right;width: 50%;&#x27; &gt;div2&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>一个问题<br>子标签使用了float时候，父标签的样式失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解决方案一：clear: both</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt; &lt;!--加上clear：both之后就正常了--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>解决方案二：clearfix</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&#x27;background-color:red;&#x27; class=&quot;clearfix&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: left&quot;&gt;div2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">    content: &quot;.&quot;;</span><br><span class=\"line\">    display: block;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">    visibility: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-position（定位）\"><a href=\"#4-position（定位）\" class=\"headerlink\" title=\"(4) position（定位）\"></a>(4) position（定位）</h2><p>fixed<br>一般用来写网页顶端的固定导航条，或者两侧的菜单。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--对于块级标签来说加上position:fixed之后，该div就不会占一整行，一般需要手动定义宽度，如width:100%--&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;div style=&quot;position:fixed;height:10%;background-color:lightskyblue;color:white;width:100%;top:0px;&quot;&gt;我是导航&lt;/div&gt;</span><br><span class=\"line\">&lt;div style=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;position:fixed;bottom: 0px;top:10%;float: left;width: 20%;background-color:indianred&quot;&gt;我是菜单&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;float: right;width:80%;&quot;&gt;&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">        &lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>absolute与relative<br>这两者一般配合使用，用于调整div之间的相对位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;position:relative;width: 300px;height: 150px;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;position:absolute;float: left;width: 20%;background-color:indianred;bottom: 0px;right: 0px;&quot;&gt;我是菜单&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-透明度\"><a href=\"#5-透明度\" class=\"headerlink\" title=\"(5) 透明度\"></a>(5) 透明度</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.image&#123;</span><br><span class=\"line\">    opacity: 0.5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;img src=&quot;http://www.jotlab.com/wp-content/uploads/2008/08/python.jpg&quot; style=&quot;opacity: 0.5; width:50%; height:50%; &quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-font（字体）\"><a href=\"#6-font（字体）\" class=\"headerlink\" title=\"(6) font（字体）\"></a>(6) font（字体）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">颜色 color: 数值;</span><br><span class=\"line\">大小 font-size: 数值;</span><br><span class=\"line\">字体 font-family: &quot;Courier New&quot;, Courier, monospace, &quot;Times New Roman&quot;, Times, serif, Arial, Helvetica, sans-serif, Verdana</span><br><span class=\"line\">样式 font-style: oblique;(偏斜体) italic;(斜体) normal;(正常)</span><br><span class=\"line\">粗细 font-weight: bold;(粗体) lighter;(细体) normal;(正常)</span><br><span class=\"line\">变体 font-variant: small-caps;(小型大写字母) normal;(正常)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-background（背景）\"><a href=\"#4-background（背景）\" class=\"headerlink\" title=\"(4) background（背景）\"></a>(4) background（背景）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">背景 background: transparent; /透视背景*/</span><br><span class=\"line\">颜色 background-color: 数值;</span><br><span class=\"line\">图片 background-image: url() | none;</span><br><span class=\"line\">重复 background-repeat: inherit | no-repeat | repeat | repeat-x | repeat-y;</span><br><span class=\"line\"></span><br><span class=\"line\">background-repeat : repeat; /*重复排列-网页默认*/</span><br><span class=\"line\">background-repeat : no-repeat; /*不重复排列*/</span><br><span class=\"line\">background-repeat : repeat-x; /*在x轴重复排列*/</span><br><span class=\"line\">background-repeat : repeat-y; /*在y轴重复排列*/</span><br><span class=\"line\">滚动 background-attachment: fixed | scroll;</span><br><span class=\"line\">位置 background-position:数值 | top | bottom | left | right | center;</span><br><span class=\"line\"></span><br><span class=\"line\">background-position : 90% 90%; /*背景图片x与y轴的位置*/</span><br><span class=\"line\">background-position : top; /*向上对齐*/</span><br><span class=\"line\">background-position : buttom; /*向下对齐*/</span><br><span class=\"line\">background-position : left; /*向左对齐*/</span><br><span class=\"line\">background-position : right; /*向右对齐*/</span><br><span class=\"line\">background-position : center; /*居中对齐*/</span><br><span class=\"line\">简写 background:背景颜色 | 背景图象 | 背景重复 | 背景附件 | 背景位置 ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-text（文本）\"><a href=\"#7-text（文本）\" class=\"headerlink\" title=\"(7) text（文本）\"></a>(7) text（文本）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大小写 text-transform: capitalize | uppercase | lowercase | none;</span><br><span class=\"line\">修饰 text-decoration: underline;(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)</span><br><span class=\"line\">排列 text-align: justify | left | right | center;</span><br><span class=\"line\">缩进 text-indent: 数值 | inherit;</span><br><span class=\"line\">阴影 text-shadow:数值;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-border（边框）\"><a href=\"#8-border（边框）\" class=\"headerlink\" title=\"(8) border（边框）\"></a>(8) border（边框）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">边框样式 border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;</span><br><span class=\"line\">边框宽度 border-width: ;</span><br><span class=\"line\">边框颜色 border-color: top值 right值 bottom值 left值;</span><br><span class=\"line\">简写 border: width style color;</span><br><span class=\"line\"></span><br><span class=\"line\">边　　框 &#123;border:border-width border-style color&#125;</span><br><span class=\"line\">上 边 框 &#123;border-top:border-top-width border-style color&#125;</span><br><span class=\"line\">右 边 框 &#123;border-right:border-right-width border-style color&#125;</span><br><span class=\"line\">下 边 框 &#123;border-bottom:border-bottom-width border-style color&#125;</span><br><span class=\"line\">左 边 框 &#123;border-left:border-left-width border-style color&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-list-style（列表样式）\"><a href=\"#9-list-style（列表样式）\" class=\"headerlink\" title=\"(9) list-style（列表样式）\"></a>(9) list-style（列表样式）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">类型 list-style-type: disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none;</span><br><span class=\"line\"></span><br><span class=\"line\">list-style-type:none; /*不编号*/</span><br><span class=\"line\">list-style-type:decimal; /*阿拉伯数字*/</span><br><span class=\"line\">list-style-type:lower-roman; /*小写罗马数字*/</span><br><span class=\"line\">list-style-type:upper-roman; /*大写罗马数字*/</span><br><span class=\"line\">list-style-type:lower-alpha; /*小写英文字母*/</span><br><span class=\"line\">list-style-type:upper-alpha; /*大写英文字母*/</span><br><span class=\"line\">list-style-type:disc; /*实心圆形符号*/</span><br><span class=\"line\">list-style-type:circle; /*空心圆形符号*/</span><br><span class=\"line\">list-style-type:square; /*实心方形符号*/</span><br><span class=\"line\">位置 list-style-position: outside | inside;</span><br><span class=\"line\">图像 list-style-image: URL;</span><br><span class=\"line\">简写 list-style:目录样式类型 | 目录样式位置 | url;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-margin（边界）\"><a href=\"#10-margin（边界）\" class=\"headerlink\" title=\"(10) margin（边界）\"></a>(10) margin（边界）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin-top:10px; (上边界)</span><br><span class=\"line\">margin-right:10px; (右边界)</span><br><span class=\"line\">margin-bottom:10px; (下边界值)</span><br><span class=\"line\">margin-left:10px; (左边界值)</span><br><span class=\"line\">margin-inside:;</span><br><span class=\"line\">margin-outside:;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"11-padding（填充）\"><a href=\"#11-padding（填充）\" class=\"headerlink\" title=\"(11) padding（填充）\"></a>(11) padding（填充）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding-top:10px; /*上边框留空白*/</span><br><span class=\"line\">padding-right:10px; /*右边框留空白*/</span><br><span class=\"line\">padding-bottom:10px; /*下边框留空白*/</span><br><span class=\"line\">padding-left:10px; /*左边框留空白</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-vertical（垂直）\"><a href=\"#12-vertical（垂直）\" class=\"headerlink\" title=\"(12) vertical（垂直）\"></a>(12) vertical（垂直）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vertical-align:sub; /*下标字*/</span><br><span class=\"line\">vertical-align:super; /*上标字*/</span><br><span class=\"line\">vertical-align:top; /*垂直向上对齐*/</span><br><span class=\"line\">vertical-align:bottom; /*垂直向下对齐*/</span><br><span class=\"line\">vertical-align:middle; /*垂直居中对齐*/</span><br><span class=\"line\">vertical-align:text-top; /*文字垂直向上对齐*/</span><br><span class=\"line\">vertical-align:text-bottom; /*文字垂直向下对齐*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-a（链接）\"><a href=\"#13-a（链接）\" class=\"headerlink\" title=\"(13) a（链接）\"></a>(13) a（链接）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a /*所有超链接*/</span><br><span class=\"line\">a:link /*超链接文字格式*/</span><br><span class=\"line\">a:visited /*浏览过的链接文字格式*/</span><br><span class=\"line\">a:active /*按下链接的格式*/</span><br><span class=\"line\">a:hover /*鼠标转到链接*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-cursor（光标）\"><a href=\"#14-cursor（光标）\" class=\"headerlink\" title=\"(14) cursor（光标）\"></a>(14) cursor（光标）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">光标形状 cursor:hand | crosshair | text | wait | move | help | e-resize | nw-resize | w-resize | s-resize | se-resize | sw-resize;</span><br><span class=\"line\"></span><br><span class=\"line\">/*也可以自定义*/</span><br><span class=\"line\">cursor: hand; /*链接手指*/</span><br><span class=\"line\">cursor: crosshair /*十字体 */</span><br><span class=\"line\">cursor: s-resize /*箭头朝下 */</span><br><span class=\"line\">cursor: move /*十字箭头, 朝右*/</span><br><span class=\"line\">cursor: help /*加一问号 */</span><br><span class=\"line\">cursor: w-resize /*箭头朝左 */</span><br><span class=\"line\">cursor: n-resize /*箭头朝上 */</span><br><span class=\"line\">cursor: ne-resize /*箭头朝右上 */</span><br><span class=\"line\">cursor: nw-resize /*箭头朝左上 */</span><br><span class=\"line\">cursor: text /*文字型*/</span><br><span class=\"line\">cursor: se-resize /*箭头斜右下 */</span><br><span class=\"line\">cursor: sw-resize /*箭头斜左下*/</span><br><span class=\"line\">cursor: wait /*漏斗*/</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、css实践\"><a href=\"#二、css实践\" class=\"headerlink\" title=\"二、css实践\"></a>二、css实践</h1><h2 id=\"1-css的三种写法\"><a href=\"#1-css的三种写法\" class=\"headerlink\" title=\"(1) css的三种写法\"></a>(1) css的三种写法</h2><p>行内样式：写在对应标签的style属性里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;  </span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div style=&#x27;background-color:red&#x27;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>内页样式：写在HTML页面里面的style标签里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            .logo&#123;</span><br><span class=\"line\">                background-color:red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&#x27;logo&#x27;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>外部样式：通过link标签引入CSS样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">        &lt;link rel=&#x27;stylesheet&#x27; href=&#x27;common1.css&#x27;/&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div class=&quot;logo&quot;&gt;123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">.logo &#123;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">    color: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-常规用例\"><a href=\"#2-常规用例\" class=\"headerlink\" title=\"(2) 常规用例\"></a>(2) 常规用例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;font-family: &quot;sans serif&quot;;&#125;  /*值为若干单词，则要给值加引号*/</span><br><span class=\"line\"></span><br><span class=\"line\">.logo &#123;background-color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.logo a,.logo p &#123;background-color: red;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#morra &#123;background-color: green;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a, div &#123; color: red;&#125;   /*a或div都使用这个css*/</span><br><span class=\"line\"></span><br><span class=\"line\">a div &#123; color: red;&#125;    /*只有a下面的div使用该css*/</span><br></pre></td></tr></table></figure>\n<p>注：css 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。</p>\n<p>三、Demo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;This is a demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            background-color: #e1ddd9;</span><br><span class=\"line\">            font-size: 12px;</span><br><span class=\"line\">            font-family: Verdana, Arial, Helvetica, SunSans-Regular, Sans-Serif;</span><br><span class=\"line\">            color: #564b47;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #inhalt &#123;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">            width: 400px;</span><br><span class=\"line\">            margin: -100px 0px 0px -200px;</span><br><span class=\"line\">            top: 50%;</span><br><span class=\"line\">            left: 50%;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            padding: 0px;</span><br><span class=\"line\">            background-color: #f5f5f5;</span><br><span class=\"line\">            border: 1px dotted #000000;</span><br><span class=\"line\">            overflow: auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p, h1 &#123;</span><br><span class=\"line\">            margin: 0px;</span><br><span class=\"line\">            padding: 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h1 &#123;</span><br><span class=\"line\">            font-size: 11px;</span><br><span class=\"line\">            text-transform: uppercase;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">            color: #564b47;</span><br><span class=\"line\">            background-color: #90897a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a &#123;</span><br><span class=\"line\">            color: #ff66cc;</span><br><span class=\"line\">            font-size: 11px;</span><br><span class=\"line\">            background-color: transparent;</span><br><span class=\"line\">            text-decoration: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;inhalt&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">    &lt;h1&gt;Morra&#x27;s Demo&lt;/h1&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">    This area should be horizontally and vertically centered.&lt;br/&gt;</span><br><span class=\"line\">    This text stays left aligned&lt;br/&gt;</span><br><span class=\"line\">    &lt;a href=&quot;http://www.cnblogs.com/whatisfantasy/&quot;&gt;what is fantasy?&lt;/a&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h1><p>盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。需要记住的是：”every element in web design is a rectangular box”。如图：</p>\n<p>box-model<br><img src=\"D:/work/front-end-tutorial/box-sizing.png\"></p>\n<p>CSS3中新增了一种盒模型计算方式：<code>box-sizing</code>熟悉。盒模型默认的值是content-box, 新增的值是<code>padding-box</code>和<code>border-box</code>，几种盒模型计算元素宽高的区别如下：</p>\n<h2 id=\"content-box（默认）\"><a href=\"#content-box（默认）\" class=\"headerlink\" title=\"content-box（默认）\"></a>content-box（默认）</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width + padding-left + padding-right + border-left + border-right</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height + padding-top + padding-bottom + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<h2 id=\"padding-box\"><a href=\"#padding-box\" class=\"headerlink\" title=\"padding-box\"></a>padding-box</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width(包含padding-left + padding-right) + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height(包含padding-top + padding-bottom) + border-top + border-bottom</span><br></pre></td></tr></table></figure>\n<h2 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h2><p>布局所占宽度Width：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Width = width(包含padding-left + padding-right + border-left + border-right)</span><br></pre></td></tr></table></figure>\n<p>布局所占高度Height:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Height = height(包含padding-top + padding-bottom + border-top + border-bottom)</span><br></pre></td></tr></table></figure>\n<h2 id=\"margin叠加\"><a href=\"#margin叠加\" class=\"headerlink\" title=\"margin叠加\"></a>margin叠加</h2><p>外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。</p>\n<p>一般来说， 垂直外边距叠加有三种情况：</p>\n<ul>\n<li>元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。</li>\n<li>相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。</li>\n<li>包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。</li>\n</ul>\n<h1 id=\"CSS普通流（文档流）\"><a href=\"#CSS普通流（文档流）\" class=\"headerlink\" title=\"CSS普通流（文档流）\"></a>CSS普通流（文档流）</h1><p>首先明确一点的是，W3C规范中没有document flow这个概念，只有normal-flow, 文档流的叫法主要还是多数中文译者的翻译方式问题。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>什么是普通流？简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。并且这种过程遵循标准的描述。</p>\n<h2 id=\"调节普通流元素位置\"><a href=\"#调节普通流元素位置\" class=\"headerlink\" title=\"调节普通流元素位置\"></a>调节普通流元素位置</h2><p>一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。</p>\n<p>只要不是float和绝对定位方式布局的，都在普通流里面。</p>\n<h1 id=\"CSS定位方式\"><a href=\"#CSS定位方式\" class=\"headerlink\" title=\"CSS定位方式\"></a>CSS定位方式</h1><h2 id=\"display属性\"><a href=\"#display属性\" class=\"headerlink\" title=\"display属性\"></a>display属性</h2><p>每一个元素都有默认的display属性，使用最多的是block, inline和inline-block，不常用的是table-cell。</p>\n<p>根据display属性，我们可以将元素分为块级元素(block)和内联级元素(inline)。它们最大区别是:block元素可以设置宽度，独占一行。inline元素宽度由内容决定，与其他元素并列在一行。</p>\n<p>常见的block属性元素有：div, h1-h6, ul, li, ol, dl, dd, dt。</p>\n<p>常见的inline属性元素有: span, a, em。</p>\n<h2 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h2><p>宽高可以自行设置，默认宽度由父容器决定，默认高度有内容决定。自己独占一行。</p>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>宽度和高度都有内容决定，与其他元素共占一行。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>宽度可以自行设置，类似block，但是与其他元素共占一行，类似inline。长用于设置垂直居中。</p>\n<h2 id=\"table-cell\"><a href=\"#table-cell\" class=\"headerlink\" title=\"table-cell\"></a>table-cell</h2><p>此属性指让标签元素以表格单元格的形式呈现，单元格有一些比较特殊的属性，可以设置元素的垂直居中等。</p>\n<h1 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h1><p>元素在页面中的布局遵守一套文档流的方式，默认的定位属性值为static。它其实是未被设置定位的。</p>\n<p>元素如果被定位了，那么它的top,left,bottom,right值就会生效，能设置定位的属性是relative,absolute和fixed。</p>\n<p>需要注意的另一点是被定位的元素层次(z-index)会得到提高。</p>\n<h2 id=\"relative（相对定位）\"><a href=\"#relative（相对定位）\" class=\"headerlink\" title=\"relative（相对定位）\"></a>relative（相对定位）</h2><p>设置了相对定位之后，通过修改top,left,bottom,right值，元素会在自身文档流所在位置上被移动，其他的元素则不会调整位置来弥补它偏离后剩下的空隙。</p>\n<h2 id=\"absolute（绝对定位）\"><a href=\"#absolute（绝对定位）\" class=\"headerlink\" title=\"absolute（绝对定位）\"></a>absolute（绝对定位）</h2><p>设置了绝对定位之后，元素脱离文档流，其他的元素会调整位置来弥补它偏离后剩下的空隙。元素偏移是相对于是它最近的设置了定位属性（position值不为static）的元素。</p>\n<p>且如果元素为块级元素（display属性值为block)，那么它的宽度也会由内容撑开。因为：</p>\n<p>默认文档流中块级元素如果没有设置宽度属性，会自动填满整行。</p>\n<h2 id=\"fixed-固定定位\"><a href=\"#fixed-固定定位\" class=\"headerlink\" title=\"fixed(固定定位)\"></a>fixed(固定定位)</h2><p>设置了固定定位之后，元素相对的偏移的参考是可视窗口，即使页面滚动，元素仍然会在固定位置。</p>\n<h1 id=\"CSS浮动相关\"><a href=\"#CSS浮动相关\" class=\"headerlink\" title=\"CSS浮动相关\"></a>CSS浮动相关</h1><p>这也是CSS定位机制的一种。</p>\n<p>首先了解两个概念：</p>\n<p>文档流：文档流是文档中可显示对象在排列时所占用的位置。</p>\n<ul>\n<li>浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。</li>\n<li>浮动的实际用途，可设置文字环绕或使元素宽度由内容填充（类似Inline-block)。使用浮动需要注意的是如果浮动的元素高度比父级容器还高，那么需要设置父级容器的overflow属性为auto,使其自动撑满。</li>\n</ul>\n<p><a href=\"http://www.iyunlu.com/view/css-xhtml/55.html\">清除浮动</a></p>\n<h1 id=\"CSS选择器\"><a href=\"#CSS选择器\" class=\"headerlink\" title=\"CSS选择器\"></a>CSS选择器</h1><p>选择器是匹配元素的一种模式，不只是在CSS中，JavaScript对CSS的选择器也是支持的，比如document.document.querySelectorAll。</p>\n<h2 id=\"关于CSS解析器\"><a href=\"#关于CSS解析器\" class=\"headerlink\" title=\"关于CSS解析器\"></a>关于CSS解析器</h2><p>HTML 经过解析生成 DOM Tree（这个我们比较熟悉）；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。</p>\n<p>Render Tree 中的元素（WebKit 中称为「renderers」，Firefox 下为「frames」）与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。</p>\n<p>在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。</p>\n<h2 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h2><p>CSS匹配不是从左到右进行查找，而是从右到左进行查找。如果从左到右的顺序，那么每条选择器都需要遍历整个DOM树，性能很受影响。所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找, 所以选择器最好写的简洁一点。</p>\n<h2 id=\"选择器权重\"><a href=\"#选择器权重\" class=\"headerlink\" title=\"选择器权重\"></a>选择器权重</h2><p>权重，也就是选择器的优先级，每条选择器的规则都有其权重，权重大的会覆盖掉权重小的，很多CSS出现问题的场景，都是某处定义了一个更高权重的规则，导致此处规则不生效。</p>\n<p>根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） &gt; style标签 &gt; link标签。</p>\n<p>另外一点需要注意的是!improtant,凡是属性值后加上了!important，那么它的值不会被其他值替换。</p>\n<p>权重的计算<br>通过这篇文章你应该知道的一些事情——CSS权重。了解下权重的计算，主要的规则就是:</p>\n<p>id选择器 &gt; 类，属性选择器和伪类选择器 &gt; 元素和伪元素</p>\n<h2 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h2><p>通配符选择器（＊）<br>id选择器（\\#ID）<br>类选择器（.className）<br>元素选择器(E)<br>后代选择器（Ｅ Ｆ）<br>子元素选择器(E&gt;F)<br>相邻兄弟元素选择器(E + F)<br>群组选择器（selector1,selector2,…,selectorN）<br>属性选择器<br>使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。</p>\n<p>E[attr]：只使用属性名，但没有确定任何属性值<br>E[attr&#x3D;”value”]：指定属性名，并指定了该属性的属性值<br>E[attr~&#x3D;”value”]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写<br>E[attr^&#x3D;”value”]：指定了属性名，并且有属性值，属性值是以value开头的；<br>E[attr$&#x3D;”value”]：指定了属性名，并且有属性值，而且属性值是以value结束的；<br>E[attr*&#x3D;”value”]：指定了属性名，并且有属性值，而且属值中包含了value；<br>E[attr|&#x3D;”value”]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;</p>\n<h2 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h2><p>伪类选择器的形式就是:xxx， 比如:hover, :link, :nth。</p>\n<h2 id=\"动态伪类\"><a href=\"#动态伪类\" class=\"headerlink\" title=\"动态伪类\"></a>动态伪类</h2><p>这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如”:link”,”:visited”;另外一种被称作用户行为伪类，如“:hover”,”:active”和”:focus”。先来看最常见的锚点伪类。</p>\n<p>hover: 用于当用户把鼠标移动到元素上面时的效果<br>active: 用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）<br>focus: 用于元素成为焦点，这个经常用在表单元素上</p>\n<h2 id=\"UI元素状态伪类\"><a href=\"#UI元素状态伪类\" class=\"headerlink\" title=\"UI元素状态伪类\"></a>UI元素状态伪类</h2><p>主要是针对于HTML中的Form元素操作, IE8不支持”:checked”,”:enabled”,”:disabled”这三种选择器。</p>\n<h2 id=\"CSS3的-nth选择器\"><a href=\"#CSS3的-nth选择器\" class=\"headerlink\" title=\"CSS3的:nth选择器\"></a>CSS3的:nth选择器</h2><p>主要注意的是CSS3添加的nth选择器在IE8下不支持。</p>\n<p>fist-child: 选择某个元素的第一个子元素；<br>last-child: 选择某个元素的最后一个子元素；<br>nth-child(): 选择某个元素的一个或多个特定的子元素；<br>其他： 常用的就是上面三种了，其他自行了解。<br>选择器分类总结</p>\n<p>见图:</p>\n<p>css-selector<br><img src=\"D:/work/front-end-tutorial/css-selector.jpg\"><br>选择器兼容性<br>选择器的兼容性:</p>\n<p>css选择器兼容性<br><img src=\"D:/work/front-end-tutorial/cssSelect2.jpg\"><br>选择器的优化</p>\n"},{"title":"HTML 简单教程","date":"2023-11-15T13:21:43.526Z","updated":"2023-11-15T13:21:43.527Z","_content":"\n\n# HTML常用标签\n## div\ndiv标签用于组合其他HTML元素，本身无实在意义。常用于页面的布局，比如一个展开式的广告页面框架大致如下：\n``` html\n<body>\n    <div id=\"wrap-container\">\n        <div id=\"collapsed-container\"></div>\n        <div id=\"expanded-container\"></div>\n    </div>\n</body>\n```\n\n## h1~h6, p, span, strong, em...\n\n\n此类标签用于设置文本，常见的使用方式是填充段落，比如弹出的legal框文字HTML结构如下:\n\n``` html\n<div id=\"legal-window\">\n    <h4>LEGAL</h4>\n    <img id=\"legal-close\" src=\"img/embed/legal-close.png\" alt=\"close window\">\n    <p>*Requires a system with Intel<sup>&reg;</sup> Turbo Boost Technology. Intel<sup>&reg;</sup> Turbo Boost Technology and Intel<sup>&reg;</sup> Turbo Boost Technology 2.0 are only available on select Intel<sup>&reg;</sup> processors. Consult your PC manufacturer. Performance varies depending on hardware, software, and system configuration. For more information, visit http://www.intel.com/go/turbo. Copyright &copy; 2014 Intel Corporation. All rights reserved. Intel, the Intel logo, Intel Core, Look Inside, Intel Inside, and Pentium are trademarks of Intel Corporation in the U.S. and/or other countries. Other names and brands may be claimed as the property of others.</p>\n</div>\n```\n\n## ul, li, ol, dl, dt, dd\n此类标签用于设置带有列表内容的，比如导航栏的下拉菜单，多视频的缩略图等：\n\n``` html\n<ul class=\"nav-tools-list\">\n    <li>\n        <div>\n            <img src=\"shoppingtools-icon-1.png\" alt=\"\">\n            <span>Build & Price</span>\n        </div>\n    </li>\n    <li>\n        <div>\n            <img src=\"shoppingtools-icon-2.png\" alt=\"\">\n            <span>Incentives & Offers</span>\n        </div>\n    </li>\n</ul>\n\n<dl>\n   <dt>计算机</dt>\n   <dd>用来计算的仪器 ... ...</dd>\n   <dt>显示器</dt>\n   <dd>以视觉方式显示信息的装置 ... ...</dd>\n</dl>\n```\n\n## form表单相关\n页面中涉及到表单时候，需要使用到form相关标签：\n``` html\n<form name=\"frm-sample\" class=\"frm-sample\" action=\"try\" method=\"post\">\n    <input type=\"text\" class=\"form-control\" placeholder=\"Name\">\n    <div id=\"status-message\"></div>\n    <div id=\"sample-captcha\"></div>\n    <a id=\"check-is-filled\" class=\"info-btn\">Check if visualCaptcha is filled</a>\n    <button type=\"submit\" name=\"submit-bt\" class=\"submit\">Submit form</button>\n</form>\n```\n\n## table表格相关\n页面中涉及到table结构，需要使用到table相关标签:\n``` html\n<table></table>\n```\n\n## img, canvas\n\n用于图像显示。一般不直接操作img,canvas元素，而是在它的外层包裹一层父级元素（可以为span,div等)，对父级元素进行操作：\n``` html\n<div class=\"preload\" data-src=\"CheddarBacon.png\">\n    <img src=\"CheddarBacon.png\" alt=\"\">\n</div>\n<!-- or -->\n<div id=\"sprite-car\" class=\"cw-sprite sprite-car\" cw-interval=\"30\" cw-loops=\"1\" cw-auto-play=\"false\" cw-texture=\"images/sprites/expanded/car-texture.png\" cw-mapper=\"car\">\n    <canvas class=\"cw-renderer\" width=\"460\" height=\"130\"></canvas>\n</div>\n```\n\n## a\na标签用于打开链接，发送邮件，段落跳转等功能。使用时需要注意阻止掉标签的默认事件。\n\n链接跳转，常见的关于分享按钮的HTML结构如下：\n``` html\n<div id=\"shareBox\">\n    <ul>\n        <li id=\"facebook\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"facebook\">\n                <img alt=\"Post on Facebook\" src=\"img/embed/f4Icon3.png\" alt=\"Facebook\" />\n            </a>\n        </li>\n        <li id=\"twitter\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"twitter\">\n                <img alt=\"Tweet this\" src=\"img/embed/f4Icon4.png\" />\n            </a>\n        </li>\n        <li id=\"pinterest\">\n            <a data-pin-do=\"buttonPin\" data-pin-config=\"none\" target=\"_blank\" rel=\"nofollow\" data-shareWay=\"pinterest\">\n                <img alt=\"Pin it\" src=\"img/embed/f4Icon5.png\" />\n            </a>\n        </li>\n        <li id=\"email\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"email\">\n                <img src=\"img/embed/f4Icon6.png\" />\n            </a>\n        </li>\n    </ul>\n    <p></p>\n</div>\n```\n发送邮件的代码片段如下：\n``` html\n<div class=\"button\">\n  <a class=\"mail\" data-img=\"mail.png\" href=\"mailto:example@gmail.com?subject=xxx&body=xxx\"></a>\n</div>\n```\n段落跳转代码片段如下：\n``` html\n<div id=\"html5\"></div>\n<a name=\"user-content-html5\" href=\"#html5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>\n```\n\n## HTML5标签查询\n[HTML MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element)\n\n\n# HTML 常见属性\n\n\n## HTML全局属性每个都有\n### dir\n规定元素中内容的文本方向。\n### id\n整个HTML文档中它的值必须是唯一的，名字不能重复。id值使用字符时，除了 ASCII字母和数字、“—”、“-\"、\".\"之外，可能会引起兼容性问题，因为在HTML4中是不允许包含这些字符的，这个限制在HTML5中更加严格，为了兼容性id值必须由字母开头\n### lang\n规定元素内容的语言。\n### style\n规定元素的行内 CSS 样式。\n### tabindex\n规定元素的 tab 键次序、表单输入时按Tab键的切换顺序\n[tabindex MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex)\n### title\n规定有关元素的额外信息。\n### accesskey\n规定激活元素的快捷键。\n### class\n用空格分开的一个或多个类名（引用样式表中的类）\n\n\n## HTML5新属性\n### contenteditable\n规定元素内容是否可编辑。\n### contextmenu\n规定元素的上下文菜单。上下文菜单在用户点击元素时显示。\n### data-*\n用于存储页面或应用程序的私有定制数据。\n### placeholder\n属性提供一种提示（hint），描述输入域所期待的值\n### draggable\n规定元素是否可拖动。\n### dropzone\n规定在拖动被拖动数据时是否进行复制、移动或链接。\n### hidden\n规定元素仍未或不再相关。\n### spellcheck\n规定是否对元素进行拼写和语法检查。\n### translate\n规定是否应该翻译元素内容。\n\n\n\n## 布尔属性要么true要么false\ndisabled\nreadonly\nchecked\nselected\nautocomplete\n\n\n# HTML语义化\n\n语义化的含义就是用正确的标签做正确的事情，html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n\n# DOCTYPE和浏览器渲染模式\n\n文档类型，一个文档类型标记是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。Doctype还会对浏览器的渲染模式产生影响，不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析，所以Doctype是非常关键的，尤其是在 IE 系列浏览器中，由DOCTYPE 所决定的 HTML 页面的渲染模式至关重要。\n\n## 浏览器解析HTML方式\n有三种解析方式:\n\n* 非怪异（标准）模式\n* 怪异模式\n* 部分怪异（近乎标准）模式\n\n在“标准模式”(standards mode) 页面按照 HTML 与 CSS 的定义渲染，而在“怪异模式(quirks mode) 模式”中则尝试模拟更旧的浏览器的行为。 一些浏览器（例如，那些基于 Mozilla 的 Gecko 渲染引擎的，或者 Internet Explorer 8 在 strict mode 下）也使用一种尝试于这两者之间妥协的“近乎标准”(almost standards) 模式，实施了一种表单元格尺寸的怪异行为，除此之外符合标准定义。\n\n一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。\n\nHTML5提供的<DOCTYPE html>是标准模式，向后兼容的, 等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的 标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。\n\n\n# 理解DOM结构\nDOM: Document Object Module, 文档对象模型。我们通过JavaScript操作页面的元素，进行添加、移动、改变或移除的方法和属性, 都是DOM提供的。\n\n## W3C DOM 标准\n被分为 3 个不同的部分:\n\n核心 DOM - 针对任何结构化文档的标准模型\nXML DOM - 针对 XML 文档的标准模型\nHTML DOM - 针对 HTML 文档的标准模型\n## DOM节点\n根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：\n\n整个文档是一个文档节点\n每个 HTML 元素是元素节点\nHTML 元素内的文本是文本节点\n每个 HTML 属性是属性节点\n注释是注释节点\n\n## HTML DOM 节点树\nHTML文本会被解析为DOM树, 树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。\n\n![](D:/work/front-end-tutorial/ct_htmltree.gif)\n\n## 节点的关系\n父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）:\n\n* 在节点树中，顶端节点被称为根（root）\n* 每个节点都有父节点、除了根（它没有父节点）\n* 一个节点可拥有任意数量的子\n* 同胞是拥有相同父节点的节点\n* \n\n\n![](D:/work/front-end-tutorial/dom_navigate.gif)\n\n\n# HTML5新增内容\nHTML5 是对 HTML 标准的第五次修订。其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。HTML5 的语法是向后兼容的。现在国内普遍说的 H5 是包括了 CSS3，JavaScript 的说法（严格意义上说，这么叫并不合适，但是已经这么叫开了，就将错就错了）。\n\n## 与HTML 4的不同之处\n文件类型声明（<!DOCTYPE>）仅有一型：<!DOCTYPE HTML>。\n新的解析顺序：不再基于SGML。\n新的元素：section, video, progress, nav, meter, time, aside, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, mark, output, rp, rt, ruby, source, summary, wbr。\ninput元素的新类型：date, email, url等等。\n新的属性：ping（用于a与area）, charset（用于meta）, async（用于script）。\n全域属性：id, tabindex, repeat。\n新的全域属性：contenteditable, contextmenu, draggable, dropzone, hidden, spellcheck。\n移除元素：acronym, applet, basefont, big, center, dir, font, frame, frameset, isindex, noframes, strike, tt。\n## 新增标签\nHTML 5提供了一些新的元素和属性，反映典型的现代用法网站。其中有些是技术上类似``<div>``和``<span>``标签，但有一定含义，例如``<nav>``（网站导航块）和``<footer><audio>``和``<video>``标记。\n\n## 移除的标签\n一些过时的HTML 4标记将取消，其中包括纯粹用作显示效果的标记，如``<font>``和``<center>``，因为它们已经被CSS取代。还有一些通过DOM的网络行为。\n\n## 修改的标签\n尽管和SGML在标记上的相似性，HTML5的句法并不再基于它了，而是被设计成向后兼容对老版本的HTML的解析。它有一个新的开始列看起来就像SGML的文档类型声明，<!DOCTYPE HTML>，这会触发和标准兼容的渲染模式。在2009年1月5号，HTML5添加了Web Form 2.0的内容，html5开始发展起来。\n\n## 无障碍（Accessibility）\n为了使HTML5的新元素或新属性获取最大化的兼容性，开发人员需要附加一点额外补助，或者有些特性根本没有被任何浏览器实现，或者浏览器根本不支持补助技术。因此有些特殊的HTML5特性根本不能使用。更多细节可参见HTML5 Accessibility（无障碍）\n\n## 新应用程序接口（API）\n除了原先的DOM接口，HTML5增加了更多样化的API:\n\n* HTML Geolocation\n* HTML Drag and Drop\n* HTML Local Storage\n* HTML Application Cache\n* HTML Web Workers\n* HTML SSE\n* HTML Canvas/WebGL 看demo\"WebGL Demo.html\"\n* HTML Audio/Video\n\n\n## 总结\n最后奉上一张图片：\n\n![](D:/work/front-end-tutorial/what-is-html5.jpg)\n\n# 常用meta整理\n## 概要\n标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n## 基本属性\n| 属性 | \t值 | \t描述 |\n| ------ | ------ | ------ |\n| keywords | \tauthor / description / keywords / generator / revised / others | \t把 content 属性关联到一个名称。 |\n| content | \tsome text | \t定义与http-equiv或name属性相关的元信息 |\n| http-equiv | \tcontent-type / expire / refresh / set-cookie | \t把content属性关联到HTTP头部。 |\n\n\n# HTML 中有用的字符实体\n![](D:/work/front-end-tutorial/entities.png)","source":"_posts/html-tutorial.md","raw":"---\ntitle: HTML 简单教程\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n\n# HTML常用标签\n## div\ndiv标签用于组合其他HTML元素，本身无实在意义。常用于页面的布局，比如一个展开式的广告页面框架大致如下：\n``` html\n<body>\n    <div id=\"wrap-container\">\n        <div id=\"collapsed-container\"></div>\n        <div id=\"expanded-container\"></div>\n    </div>\n</body>\n```\n\n## h1~h6, p, span, strong, em...\n\n\n此类标签用于设置文本，常见的使用方式是填充段落，比如弹出的legal框文字HTML结构如下:\n\n``` html\n<div id=\"legal-window\">\n    <h4>LEGAL</h4>\n    <img id=\"legal-close\" src=\"img/embed/legal-close.png\" alt=\"close window\">\n    <p>*Requires a system with Intel<sup>&reg;</sup> Turbo Boost Technology. Intel<sup>&reg;</sup> Turbo Boost Technology and Intel<sup>&reg;</sup> Turbo Boost Technology 2.0 are only available on select Intel<sup>&reg;</sup> processors. Consult your PC manufacturer. Performance varies depending on hardware, software, and system configuration. For more information, visit http://www.intel.com/go/turbo. Copyright &copy; 2014 Intel Corporation. All rights reserved. Intel, the Intel logo, Intel Core, Look Inside, Intel Inside, and Pentium are trademarks of Intel Corporation in the U.S. and/or other countries. Other names and brands may be claimed as the property of others.</p>\n</div>\n```\n\n## ul, li, ol, dl, dt, dd\n此类标签用于设置带有列表内容的，比如导航栏的下拉菜单，多视频的缩略图等：\n\n``` html\n<ul class=\"nav-tools-list\">\n    <li>\n        <div>\n            <img src=\"shoppingtools-icon-1.png\" alt=\"\">\n            <span>Build & Price</span>\n        </div>\n    </li>\n    <li>\n        <div>\n            <img src=\"shoppingtools-icon-2.png\" alt=\"\">\n            <span>Incentives & Offers</span>\n        </div>\n    </li>\n</ul>\n\n<dl>\n   <dt>计算机</dt>\n   <dd>用来计算的仪器 ... ...</dd>\n   <dt>显示器</dt>\n   <dd>以视觉方式显示信息的装置 ... ...</dd>\n</dl>\n```\n\n## form表单相关\n页面中涉及到表单时候，需要使用到form相关标签：\n``` html\n<form name=\"frm-sample\" class=\"frm-sample\" action=\"try\" method=\"post\">\n    <input type=\"text\" class=\"form-control\" placeholder=\"Name\">\n    <div id=\"status-message\"></div>\n    <div id=\"sample-captcha\"></div>\n    <a id=\"check-is-filled\" class=\"info-btn\">Check if visualCaptcha is filled</a>\n    <button type=\"submit\" name=\"submit-bt\" class=\"submit\">Submit form</button>\n</form>\n```\n\n## table表格相关\n页面中涉及到table结构，需要使用到table相关标签:\n``` html\n<table></table>\n```\n\n## img, canvas\n\n用于图像显示。一般不直接操作img,canvas元素，而是在它的外层包裹一层父级元素（可以为span,div等)，对父级元素进行操作：\n``` html\n<div class=\"preload\" data-src=\"CheddarBacon.png\">\n    <img src=\"CheddarBacon.png\" alt=\"\">\n</div>\n<!-- or -->\n<div id=\"sprite-car\" class=\"cw-sprite sprite-car\" cw-interval=\"30\" cw-loops=\"1\" cw-auto-play=\"false\" cw-texture=\"images/sprites/expanded/car-texture.png\" cw-mapper=\"car\">\n    <canvas class=\"cw-renderer\" width=\"460\" height=\"130\"></canvas>\n</div>\n```\n\n## a\na标签用于打开链接，发送邮件，段落跳转等功能。使用时需要注意阻止掉标签的默认事件。\n\n链接跳转，常见的关于分享按钮的HTML结构如下：\n``` html\n<div id=\"shareBox\">\n    <ul>\n        <li id=\"facebook\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"facebook\">\n                <img alt=\"Post on Facebook\" src=\"img/embed/f4Icon3.png\" alt=\"Facebook\" />\n            </a>\n        </li>\n        <li id=\"twitter\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"twitter\">\n                <img alt=\"Tweet this\" src=\"img/embed/f4Icon4.png\" />\n            </a>\n        </li>\n        <li id=\"pinterest\">\n            <a data-pin-do=\"buttonPin\" data-pin-config=\"none\" target=\"_blank\" rel=\"nofollow\" data-shareWay=\"pinterest\">\n                <img alt=\"Pin it\" src=\"img/embed/f4Icon5.png\" />\n            </a>\n        </li>\n        <li id=\"email\">\n            <a target=\"_blank\" rel=\"nofollow\" data-shareWay=\"email\">\n                <img src=\"img/embed/f4Icon6.png\" />\n            </a>\n        </li>\n    </ul>\n    <p></p>\n</div>\n```\n发送邮件的代码片段如下：\n``` html\n<div class=\"button\">\n  <a class=\"mail\" data-img=\"mail.png\" href=\"mailto:example@gmail.com?subject=xxx&body=xxx\"></a>\n</div>\n```\n段落跳转代码片段如下：\n``` html\n<div id=\"html5\"></div>\n<a name=\"user-content-html5\" href=\"#html5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>\n```\n\n## HTML5标签查询\n[HTML MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element)\n\n\n# HTML 常见属性\n\n\n## HTML全局属性每个都有\n### dir\n规定元素中内容的文本方向。\n### id\n整个HTML文档中它的值必须是唯一的，名字不能重复。id值使用字符时，除了 ASCII字母和数字、“—”、“-\"、\".\"之外，可能会引起兼容性问题，因为在HTML4中是不允许包含这些字符的，这个限制在HTML5中更加严格，为了兼容性id值必须由字母开头\n### lang\n规定元素内容的语言。\n### style\n规定元素的行内 CSS 样式。\n### tabindex\n规定元素的 tab 键次序、表单输入时按Tab键的切换顺序\n[tabindex MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex)\n### title\n规定有关元素的额外信息。\n### accesskey\n规定激活元素的快捷键。\n### class\n用空格分开的一个或多个类名（引用样式表中的类）\n\n\n## HTML5新属性\n### contenteditable\n规定元素内容是否可编辑。\n### contextmenu\n规定元素的上下文菜单。上下文菜单在用户点击元素时显示。\n### data-*\n用于存储页面或应用程序的私有定制数据。\n### placeholder\n属性提供一种提示（hint），描述输入域所期待的值\n### draggable\n规定元素是否可拖动。\n### dropzone\n规定在拖动被拖动数据时是否进行复制、移动或链接。\n### hidden\n规定元素仍未或不再相关。\n### spellcheck\n规定是否对元素进行拼写和语法检查。\n### translate\n规定是否应该翻译元素内容。\n\n\n\n## 布尔属性要么true要么false\ndisabled\nreadonly\nchecked\nselected\nautocomplete\n\n\n# HTML语义化\n\n语义化的含义就是用正确的标签做正确的事情，html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\n\n# DOCTYPE和浏览器渲染模式\n\n文档类型，一个文档类型标记是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。Doctype还会对浏览器的渲染模式产生影响，不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析，所以Doctype是非常关键的，尤其是在 IE 系列浏览器中，由DOCTYPE 所决定的 HTML 页面的渲染模式至关重要。\n\n## 浏览器解析HTML方式\n有三种解析方式:\n\n* 非怪异（标准）模式\n* 怪异模式\n* 部分怪异（近乎标准）模式\n\n在“标准模式”(standards mode) 页面按照 HTML 与 CSS 的定义渲染，而在“怪异模式(quirks mode) 模式”中则尝试模拟更旧的浏览器的行为。 一些浏览器（例如，那些基于 Mozilla 的 Gecko 渲染引擎的，或者 Internet Explorer 8 在 strict mode 下）也使用一种尝试于这两者之间妥协的“近乎标准”(almost standards) 模式，实施了一种表单元格尺寸的怪异行为，除此之外符合标准定义。\n\n一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。\n\nHTML5提供的<DOCTYPE html>是标准模式，向后兼容的, 等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的 标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。\n\n\n# 理解DOM结构\nDOM: Document Object Module, 文档对象模型。我们通过JavaScript操作页面的元素，进行添加、移动、改变或移除的方法和属性, 都是DOM提供的。\n\n## W3C DOM 标准\n被分为 3 个不同的部分:\n\n核心 DOM - 针对任何结构化文档的标准模型\nXML DOM - 针对 XML 文档的标准模型\nHTML DOM - 针对 HTML 文档的标准模型\n## DOM节点\n根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：\n\n整个文档是一个文档节点\n每个 HTML 元素是元素节点\nHTML 元素内的文本是文本节点\n每个 HTML 属性是属性节点\n注释是注释节点\n\n## HTML DOM 节点树\nHTML文本会被解析为DOM树, 树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。\n\n![](D:/work/front-end-tutorial/ct_htmltree.gif)\n\n## 节点的关系\n父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）:\n\n* 在节点树中，顶端节点被称为根（root）\n* 每个节点都有父节点、除了根（它没有父节点）\n* 一个节点可拥有任意数量的子\n* 同胞是拥有相同父节点的节点\n* \n\n\n![](D:/work/front-end-tutorial/dom_navigate.gif)\n\n\n# HTML5新增内容\nHTML5 是对 HTML 标准的第五次修订。其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。HTML5 的语法是向后兼容的。现在国内普遍说的 H5 是包括了 CSS3，JavaScript 的说法（严格意义上说，这么叫并不合适，但是已经这么叫开了，就将错就错了）。\n\n## 与HTML 4的不同之处\n文件类型声明（<!DOCTYPE>）仅有一型：<!DOCTYPE HTML>。\n新的解析顺序：不再基于SGML。\n新的元素：section, video, progress, nav, meter, time, aside, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, mark, output, rp, rt, ruby, source, summary, wbr。\ninput元素的新类型：date, email, url等等。\n新的属性：ping（用于a与area）, charset（用于meta）, async（用于script）。\n全域属性：id, tabindex, repeat。\n新的全域属性：contenteditable, contextmenu, draggable, dropzone, hidden, spellcheck。\n移除元素：acronym, applet, basefont, big, center, dir, font, frame, frameset, isindex, noframes, strike, tt。\n## 新增标签\nHTML 5提供了一些新的元素和属性，反映典型的现代用法网站。其中有些是技术上类似``<div>``和``<span>``标签，但有一定含义，例如``<nav>``（网站导航块）和``<footer><audio>``和``<video>``标记。\n\n## 移除的标签\n一些过时的HTML 4标记将取消，其中包括纯粹用作显示效果的标记，如``<font>``和``<center>``，因为它们已经被CSS取代。还有一些通过DOM的网络行为。\n\n## 修改的标签\n尽管和SGML在标记上的相似性，HTML5的句法并不再基于它了，而是被设计成向后兼容对老版本的HTML的解析。它有一个新的开始列看起来就像SGML的文档类型声明，<!DOCTYPE HTML>，这会触发和标准兼容的渲染模式。在2009年1月5号，HTML5添加了Web Form 2.0的内容，html5开始发展起来。\n\n## 无障碍（Accessibility）\n为了使HTML5的新元素或新属性获取最大化的兼容性，开发人员需要附加一点额外补助，或者有些特性根本没有被任何浏览器实现，或者浏览器根本不支持补助技术。因此有些特殊的HTML5特性根本不能使用。更多细节可参见HTML5 Accessibility（无障碍）\n\n## 新应用程序接口（API）\n除了原先的DOM接口，HTML5增加了更多样化的API:\n\n* HTML Geolocation\n* HTML Drag and Drop\n* HTML Local Storage\n* HTML Application Cache\n* HTML Web Workers\n* HTML SSE\n* HTML Canvas/WebGL 看demo\"WebGL Demo.html\"\n* HTML Audio/Video\n\n\n## 总结\n最后奉上一张图片：\n\n![](D:/work/front-end-tutorial/what-is-html5.jpg)\n\n# 常用meta整理\n## 概要\n标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n\n## 基本属性\n| 属性 | \t值 | \t描述 |\n| ------ | ------ | ------ |\n| keywords | \tauthor / description / keywords / generator / revised / others | \t把 content 属性关联到一个名称。 |\n| content | \tsome text | \t定义与http-equiv或name属性相关的元信息 |\n| http-equiv | \tcontent-type / expire / refresh / set-cookie | \t把content属性关联到HTTP头部。 |\n\n\n# HTML 中有用的字符实体\n![](D:/work/front-end-tutorial/entities.png)","slug":"html-tutorial","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w10009fm5y6mzraab1","content":"<h1 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h1><h2 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h2><p>div标签用于组合其他HTML元素，本身无实在意义。常用于页面的布局，比如一个展开式的广告页面框架大致如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap-container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;collapsed-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;expanded-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h1-h6-p-span-strong-em…\"><a href=\"#h1-h6-p-span-strong-em…\" class=\"headerlink\" title=\"h1~h6, p, span, strong, em…\"></a>h1~h6, p, span, strong, em…</h2><p>此类标签用于设置文本，常见的使用方式是填充段落，比如弹出的legal框文字HTML结构如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;legal-window&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>LEGAL<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;legal-close&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/legal-close.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;close window&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>*Requires a system with Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology. Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology and Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology 2.0 are only available on select Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> processors. Consult your PC manufacturer. Performance varies depending on hardware, software, and system configuration. For more information, visit http://www.intel.com/go/turbo. Copyright <span class=\"symbol\">&amp;copy;</span> 2014 Intel Corporation. All rights reserved. Intel, the Intel logo, Intel Core, Look Inside, Intel Inside, and Pentium are trademarks of Intel Corporation in the U.S. and/or other countries. Other names and brands may be claimed as the property of others.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ul-li-ol-dl-dt-dd\"><a href=\"#ul-li-ol-dl-dt-dd\" class=\"headerlink\" title=\"ul, li, ol, dl, dt, dd\"></a>ul, li, ol, dl, dt, dd</h2><p>此类标签用于设置带有列表内容的，比如导航栏的下拉菜单，多视频的缩略图等：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-tools-list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;shoppingtools-icon-1.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Build &amp; Price<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;shoppingtools-icon-2.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Incentives &amp; Offers<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>计算机<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>用来计算的仪器 ... ...<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>显示器<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"form表单相关\"><a href=\"#form表单相关\" class=\"headerlink\" title=\"form表单相关\"></a>form表单相关</h2><p>页面中涉及到表单时候，需要使用到form相关标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;frm-sample&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;frm-sample&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;try&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Name&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;status-message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sample-captcha&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-is-filled&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;info-btn&quot;</span>&gt;</span>Check if visualCaptcha is filled<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit-bt&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit form<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"table表格相关\"><a href=\"#table表格相关\" class=\"headerlink\" title=\"table表格相关\"></a>table表格相关</h2><p>页面中涉及到table结构，需要使用到table相关标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"img-canvas\"><a href=\"#img-canvas\" class=\"headerlink\" title=\"img, canvas\"></a>img, canvas</h2><p>用于图像显示。一般不直接操作img,canvas元素，而是在它的外层包裹一层父级元素（可以为span,div等)，对父级元素进行操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;preload&quot;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;CheddarBacon.png&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;CheddarBacon.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- or --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sprite-car&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cw-sprite sprite-car&quot;</span> <span class=\"attr\">cw-interval</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">cw-loops</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">cw-auto-play</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">cw-texture</span>=<span class=\"string\">&quot;images/sprites/expanded/car-texture.png&quot;</span> <span class=\"attr\">cw-mapper</span>=<span class=\"string\">&quot;car&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cw-renderer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;460&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;130&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h2><p>a标签用于打开链接，发送邮件，段落跳转等功能。使用时需要注意阻止掉标签的默认事件。</p>\n<p>链接跳转，常见的关于分享按钮的HTML结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;shareBox&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;facebook&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;facebook&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Post on Facebook&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon3.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Facebook&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;twitter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;twitter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Tweet this&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon4.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pinterest&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">data-pin-do</span>=<span class=\"string\">&quot;buttonPin&quot;</span> <span class=\"attr\">data-pin-config</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;pinterest&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Pin it&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon5.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon6.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发送邮件的代码片段如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mail&quot;</span> <span class=\"attr\">data-img</span>=<span class=\"string\">&quot;mail.png&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:example@gmail.com?subject=xxx&amp;body=xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>段落跳转代码片段如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;html5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user-content-html5&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#html5&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headeranchor-link&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headeranchor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML5标签查询\"><a href=\"#HTML5标签查询\" class=\"headerlink\" title=\"HTML5标签查询\"></a>HTML5标签查询</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element\">HTML MDN</a></p>\n<h1 id=\"HTML-常见属性\"><a href=\"#HTML-常见属性\" class=\"headerlink\" title=\"HTML 常见属性\"></a>HTML 常见属性</h1><h2 id=\"HTML全局属性每个都有\"><a href=\"#HTML全局属性每个都有\" class=\"headerlink\" title=\"HTML全局属性每个都有\"></a>HTML全局属性每个都有</h2><h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>规定元素中内容的文本方向。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>整个HTML文档中它的值必须是唯一的，名字不能重复。id值使用字符时，除了 ASCII字母和数字、“—”、“-“、”.”之外，可能会引起兼容性问题，因为在HTML4中是不允许包含这些字符的，这个限制在HTML5中更加严格，为了兼容性id值必须由字母开头</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>规定元素内容的语言。</p>\n<h3 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h3><p>规定元素的行内 CSS 样式。</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>规定元素的 tab 键次序、表单输入时按Tab键的切换顺序<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex\">tabindex MDN</a></p>\n<h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>规定有关元素的额外信息。</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>规定激活元素的快捷键。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><p>用空格分开的一个或多个类名（引用样式表中的类）</p>\n<h2 id=\"HTML5新属性\"><a href=\"#HTML5新属性\" class=\"headerlink\" title=\"HTML5新属性\"></a>HTML5新属性</h2><h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>规定元素内容是否可编辑。</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>规定元素的上下文菜单。上下文菜单在用户点击元素时显示。</p>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data-*\"></a>data-*</h3><p>用于存储页面或应用程序的私有定制数据。</p>\n<h3 id=\"placeholder\"><a href=\"#placeholder\" class=\"headerlink\" title=\"placeholder\"></a>placeholder</h3><p>属性提供一种提示（hint），描述输入域所期待的值</p>\n<h3 id=\"draggable\"><a href=\"#draggable\" class=\"headerlink\" title=\"draggable\"></a>draggable</h3><p>规定元素是否可拖动。</p>\n<h3 id=\"dropzone\"><a href=\"#dropzone\" class=\"headerlink\" title=\"dropzone\"></a>dropzone</h3><p>规定在拖动被拖动数据时是否进行复制、移动或链接。</p>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>规定元素仍未或不再相关。</p>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><p>规定是否对元素进行拼写和语法检查。</p>\n<h3 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h3><p>规定是否应该翻译元素内容。</p>\n<h2 id=\"布尔属性要么true要么false\"><a href=\"#布尔属性要么true要么false\" class=\"headerlink\" title=\"布尔属性要么true要么false\"></a>布尔属性要么true要么false</h2><p>disabled<br>readonly<br>checked<br>selected<br>autocomplete</p>\n<h1 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h1><p>语义化的含义就是用正确的标签做正确的事情，html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n<h1 id=\"DOCTYPE和浏览器渲染模式\"><a href=\"#DOCTYPE和浏览器渲染模式\" class=\"headerlink\" title=\"DOCTYPE和浏览器渲染模式\"></a>DOCTYPE和浏览器渲染模式</h1><p>文档类型，一个文档类型标记是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。Doctype还会对浏览器的渲染模式产生影响，不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析，所以Doctype是非常关键的，尤其是在 IE 系列浏览器中，由DOCTYPE 所决定的 HTML 页面的渲染模式至关重要。</p>\n<h2 id=\"浏览器解析HTML方式\"><a href=\"#浏览器解析HTML方式\" class=\"headerlink\" title=\"浏览器解析HTML方式\"></a>浏览器解析HTML方式</h2><p>有三种解析方式:</p>\n<ul>\n<li>非怪异（标准）模式</li>\n<li>怪异模式</li>\n<li>部分怪异（近乎标准）模式</li>\n</ul>\n<p>在“标准模式”(standards mode) 页面按照 HTML 与 CSS 的定义渲染，而在“怪异模式(quirks mode) 模式”中则尝试模拟更旧的浏览器的行为。 一些浏览器（例如，那些基于 Mozilla 的 Gecko 渲染引擎的，或者 Internet Explorer 8 在 strict mode 下）也使用一种尝试于这两者之间妥协的“近乎标准”(almost standards) 模式，实施了一种表单元格尺寸的怪异行为，除此之外符合标准定义。</p>\n<p>一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。</p>\n<p>HTML5提供的<DOCTYPE html>是标准模式，向后兼容的, 等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的 标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。</p>\n<h1 id=\"理解DOM结构\"><a href=\"#理解DOM结构\" class=\"headerlink\" title=\"理解DOM结构\"></a>理解DOM结构</h1><p>DOM: Document Object Module, 文档对象模型。我们通过JavaScript操作页面的元素，进行添加、移动、改变或移除的方法和属性, 都是DOM提供的。</p>\n<h2 id=\"W3C-DOM-标准\"><a href=\"#W3C-DOM-标准\" class=\"headerlink\" title=\"W3C DOM 标准\"></a>W3C DOM 标准</h2><p>被分为 3 个不同的部分:</p>\n<p>核心 DOM - 针对任何结构化文档的标准模型<br>XML DOM - 针对 XML 文档的标准模型<br>HTML DOM - 针对 HTML 文档的标准模型</p>\n<h2 id=\"DOM节点\"><a href=\"#DOM节点\" class=\"headerlink\" title=\"DOM节点\"></a>DOM节点</h2><p>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</p>\n<p>整个文档是一个文档节点<br>每个 HTML 元素是元素节点<br>HTML 元素内的文本是文本节点<br>每个 HTML 属性是属性节点<br>注释是注释节点</p>\n<h2 id=\"HTML-DOM-节点树\"><a href=\"#HTML-DOM-节点树\" class=\"headerlink\" title=\"HTML DOM 节点树\"></a>HTML DOM 节点树</h2><p>HTML文本会被解析为DOM树, 树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。</p>\n<p><img src=\"D:/work/front-end-tutorial/ct_htmltree.gif\"></p>\n<h2 id=\"节点的关系\"><a href=\"#节点的关系\" class=\"headerlink\" title=\"节点的关系\"></a>节点的关系</h2><p>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）:</p>\n<ul>\n<li>在节点树中，顶端节点被称为根（root）</li>\n<li>每个节点都有父节点、除了根（它没有父节点）</li>\n<li>一个节点可拥有任意数量的子</li>\n<li>同胞是拥有相同父节点的节点</li>\n<li></li>\n</ul>\n<p><img src=\"D:/work/front-end-tutorial/dom_navigate.gif\"></p>\n<h1 id=\"HTML5新增内容\"><a href=\"#HTML5新增内容\" class=\"headerlink\" title=\"HTML5新增内容\"></a>HTML5新增内容</h1><p>HTML5 是对 HTML 标准的第五次修订。其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。HTML5 的语法是向后兼容的。现在国内普遍说的 H5 是包括了 CSS3，JavaScript 的说法（严格意义上说，这么叫并不合适，但是已经这么叫开了，就将错就错了）。</p>\n<h2 id=\"与HTML-4的不同之处\"><a href=\"#与HTML-4的不同之处\" class=\"headerlink\" title=\"与HTML 4的不同之处\"></a>与HTML 4的不同之处</h2><p>文件类型声明（&lt;!DOCTYPE&gt;）仅有一型：<!DOCTYPE HTML>。<br>新的解析顺序：不再基于SGML。<br>新的元素：section, video, progress, nav, meter, time, aside, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, mark, output, rp, rt, ruby, source, summary, wbr。<br>input元素的新类型：date, email, url等等。<br>新的属性：ping（用于a与area）, charset（用于meta）, async（用于script）。<br>全域属性：id, tabindex, repeat。<br>新的全域属性：contenteditable, contextmenu, draggable, dropzone, hidden, spellcheck。<br>移除元素：acronym, applet, basefont, big, center, dir, font, frame, frameset, isindex, noframes, strike, tt。</p>\n<h2 id=\"新增标签\"><a href=\"#新增标签\" class=\"headerlink\" title=\"新增标签\"></a>新增标签</h2><p>HTML 5提供了一些新的元素和属性，反映典型的现代用法网站。其中有些是技术上类似<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签，但有一定含义，例如<code>&lt;nav&gt;</code>（网站导航块）和<code>&lt;footer&gt;&lt;audio&gt;</code>和<code>&lt;video&gt;</code>标记。</p>\n<h2 id=\"移除的标签\"><a href=\"#移除的标签\" class=\"headerlink\" title=\"移除的标签\"></a>移除的标签</h2><p>一些过时的HTML 4标记将取消，其中包括纯粹用作显示效果的标记，如<code>&lt;font&gt;</code>和<code>&lt;center&gt;</code>，因为它们已经被CSS取代。还有一些通过DOM的网络行为。</p>\n<h2 id=\"修改的标签\"><a href=\"#修改的标签\" class=\"headerlink\" title=\"修改的标签\"></a>修改的标签</h2><p>尽管和SGML在标记上的相似性，HTML5的句法并不再基于它了，而是被设计成向后兼容对老版本的HTML的解析。它有一个新的开始列看起来就像SGML的文档类型声明，<!DOCTYPE HTML>，这会触发和标准兼容的渲染模式。在2009年1月5号，HTML5添加了Web Form 2.0的内容，html5开始发展起来。</p>\n<h2 id=\"无障碍（Accessibility）\"><a href=\"#无障碍（Accessibility）\" class=\"headerlink\" title=\"无障碍（Accessibility）\"></a>无障碍（Accessibility）</h2><p>为了使HTML5的新元素或新属性获取最大化的兼容性，开发人员需要附加一点额外补助，或者有些特性根本没有被任何浏览器实现，或者浏览器根本不支持补助技术。因此有些特殊的HTML5特性根本不能使用。更多细节可参见HTML5 Accessibility（无障碍）</p>\n<h2 id=\"新应用程序接口（API）\"><a href=\"#新应用程序接口（API）\" class=\"headerlink\" title=\"新应用程序接口（API）\"></a>新应用程序接口（API）</h2><p>除了原先的DOM接口，HTML5增加了更多样化的API:</p>\n<ul>\n<li>HTML Geolocation</li>\n<li>HTML Drag and Drop</li>\n<li>HTML Local Storage</li>\n<li>HTML Application Cache</li>\n<li>HTML Web Workers</li>\n<li>HTML SSE</li>\n<li>HTML Canvas&#x2F;WebGL 看demo”WebGL Demo.html”</li>\n<li>HTML Audio&#x2F;Video</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后奉上一张图片：</p>\n<p><img src=\"D:/work/front-end-tutorial/what-is-html5.jpg\"></p>\n<h1 id=\"常用meta整理\"><a href=\"#常用meta整理\" class=\"headerlink\" title=\"常用meta整理\"></a>常用meta整理</h1><h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keywords</td>\n<td>author &#x2F; description &#x2F; keywords &#x2F; generator &#x2F; revised &#x2F; others</td>\n<td>把 content 属性关联到一个名称。</td>\n</tr>\n<tr>\n<td>content</td>\n<td>some text</td>\n<td>定义与http-equiv或name属性相关的元信息</td>\n</tr>\n<tr>\n<td>http-equiv</td>\n<td>content-type &#x2F; expire &#x2F; refresh &#x2F; set-cookie</td>\n<td>把content属性关联到HTTP头部。</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTML-中有用的字符实体\"><a href=\"#HTML-中有用的字符实体\" class=\"headerlink\" title=\"HTML 中有用的字符实体\"></a>HTML 中有用的字符实体</h1><p><img src=\"D:/work/front-end-tutorial/entities.png\"></p>\n","excerpt":"","more":"<h1 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h1><h2 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h2><p>div标签用于组合其他HTML元素，本身无实在意义。常用于页面的布局，比如一个展开式的广告页面框架大致如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap-container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;collapsed-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;expanded-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h1-h6-p-span-strong-em…\"><a href=\"#h1-h6-p-span-strong-em…\" class=\"headerlink\" title=\"h1~h6, p, span, strong, em…\"></a>h1~h6, p, span, strong, em…</h2><p>此类标签用于设置文本，常见的使用方式是填充段落，比如弹出的legal框文字HTML结构如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;legal-window&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>LEGAL<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;legal-close&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/legal-close.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;close window&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>*Requires a system with Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology. Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology and Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> Turbo Boost Technology 2.0 are only available on select Intel<span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span><span class=\"symbol\">&amp;reg;</span><span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span> processors. Consult your PC manufacturer. Performance varies depending on hardware, software, and system configuration. For more information, visit http://www.intel.com/go/turbo. Copyright <span class=\"symbol\">&amp;copy;</span> 2014 Intel Corporation. All rights reserved. Intel, the Intel logo, Intel Core, Look Inside, Intel Inside, and Pentium are trademarks of Intel Corporation in the U.S. and/or other countries. Other names and brands may be claimed as the property of others.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ul-li-ol-dl-dt-dd\"><a href=\"#ul-li-ol-dl-dt-dd\" class=\"headerlink\" title=\"ul, li, ol, dl, dt, dd\"></a>ul, li, ol, dl, dt, dd</h2><p>此类标签用于设置带有列表内容的，比如导航栏的下拉菜单，多视频的缩略图等：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-tools-list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;shoppingtools-icon-1.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Build &amp; Price<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;shoppingtools-icon-2.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Incentives &amp; Offers<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>计算机<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>用来计算的仪器 ... ...<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>显示器<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"form表单相关\"><a href=\"#form表单相关\" class=\"headerlink\" title=\"form表单相关\"></a>form表单相关</h2><p>页面中涉及到表单时候，需要使用到form相关标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;frm-sample&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;frm-sample&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;try&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Name&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;status-message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sample-captcha&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-is-filled&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;info-btn&quot;</span>&gt;</span>Check if visualCaptcha is filled<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit-bt&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit form<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"table表格相关\"><a href=\"#table表格相关\" class=\"headerlink\" title=\"table表格相关\"></a>table表格相关</h2><p>页面中涉及到table结构，需要使用到table相关标签:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"img-canvas\"><a href=\"#img-canvas\" class=\"headerlink\" title=\"img, canvas\"></a>img, canvas</h2><p>用于图像显示。一般不直接操作img,canvas元素，而是在它的外层包裹一层父级元素（可以为span,div等)，对父级元素进行操作：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;preload&quot;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;CheddarBacon.png&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;CheddarBacon.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- or --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sprite-car&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cw-sprite sprite-car&quot;</span> <span class=\"attr\">cw-interval</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">cw-loops</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">cw-auto-play</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">cw-texture</span>=<span class=\"string\">&quot;images/sprites/expanded/car-texture.png&quot;</span> <span class=\"attr\">cw-mapper</span>=<span class=\"string\">&quot;car&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cw-renderer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;460&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;130&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h2><p>a标签用于打开链接，发送邮件，段落跳转等功能。使用时需要注意阻止掉标签的默认事件。</p>\n<p>链接跳转，常见的关于分享按钮的HTML结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;shareBox&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;facebook&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;facebook&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Post on Facebook&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon3.png&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Facebook&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;twitter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;twitter&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Tweet this&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon4.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pinterest&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">data-pin-do</span>=<span class=\"string\">&quot;buttonPin&quot;</span> <span class=\"attr\">data-pin-config</span>=<span class=\"string\">&quot;none&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;pinterest&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Pin it&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon5.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;nofollow&quot;</span> <span class=\"attr\">data-shareWay</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/embed/f4Icon6.png&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发送邮件的代码片段如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mail&quot;</span> <span class=\"attr\">data-img</span>=<span class=\"string\">&quot;mail.png&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:example@gmail.com?subject=xxx&amp;body=xxx&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>段落跳转代码片段如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;html5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user-content-html5&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#html5&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headeranchor-link&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headeranchor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML5标签查询\"><a href=\"#HTML5标签查询\" class=\"headerlink\" title=\"HTML5标签查询\"></a>HTML5标签查询</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element\">HTML MDN</a></p>\n<h1 id=\"HTML-常见属性\"><a href=\"#HTML-常见属性\" class=\"headerlink\" title=\"HTML 常见属性\"></a>HTML 常见属性</h1><h2 id=\"HTML全局属性每个都有\"><a href=\"#HTML全局属性每个都有\" class=\"headerlink\" title=\"HTML全局属性每个都有\"></a>HTML全局属性每个都有</h2><h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>规定元素中内容的文本方向。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>整个HTML文档中它的值必须是唯一的，名字不能重复。id值使用字符时，除了 ASCII字母和数字、“—”、“-“、”.”之外，可能会引起兼容性问题，因为在HTML4中是不允许包含这些字符的，这个限制在HTML5中更加严格，为了兼容性id值必须由字母开头</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>规定元素内容的语言。</p>\n<h3 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h3><p>规定元素的行内 CSS 样式。</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>规定元素的 tab 键次序、表单输入时按Tab键的切换顺序<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex\">tabindex MDN</a></p>\n<h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>规定有关元素的额外信息。</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>规定激活元素的快捷键。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><p>用空格分开的一个或多个类名（引用样式表中的类）</p>\n<h2 id=\"HTML5新属性\"><a href=\"#HTML5新属性\" class=\"headerlink\" title=\"HTML5新属性\"></a>HTML5新属性</h2><h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>规定元素内容是否可编辑。</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>规定元素的上下文菜单。上下文菜单在用户点击元素时显示。</p>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data-*\"></a>data-*</h3><p>用于存储页面或应用程序的私有定制数据。</p>\n<h3 id=\"placeholder\"><a href=\"#placeholder\" class=\"headerlink\" title=\"placeholder\"></a>placeholder</h3><p>属性提供一种提示（hint），描述输入域所期待的值</p>\n<h3 id=\"draggable\"><a href=\"#draggable\" class=\"headerlink\" title=\"draggable\"></a>draggable</h3><p>规定元素是否可拖动。</p>\n<h3 id=\"dropzone\"><a href=\"#dropzone\" class=\"headerlink\" title=\"dropzone\"></a>dropzone</h3><p>规定在拖动被拖动数据时是否进行复制、移动或链接。</p>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>规定元素仍未或不再相关。</p>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><p>规定是否对元素进行拼写和语法检查。</p>\n<h3 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h3><p>规定是否应该翻译元素内容。</p>\n<h2 id=\"布尔属性要么true要么false\"><a href=\"#布尔属性要么true要么false\" class=\"headerlink\" title=\"布尔属性要么true要么false\"></a>布尔属性要么true要么false</h2><p>disabled<br>readonly<br>checked<br>selected<br>autocomplete</p>\n<h1 id=\"HTML语义化\"><a href=\"#HTML语义化\" class=\"headerlink\" title=\"HTML语义化\"></a>HTML语义化</h1><p>语义化的含义就是用正确的标签做正确的事情，html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n<h1 id=\"DOCTYPE和浏览器渲染模式\"><a href=\"#DOCTYPE和浏览器渲染模式\" class=\"headerlink\" title=\"DOCTYPE和浏览器渲染模式\"></a>DOCTYPE和浏览器渲染模式</h1><p>文档类型，一个文档类型标记是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。Doctype还会对浏览器的渲染模式产生影响，不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析，所以Doctype是非常关键的，尤其是在 IE 系列浏览器中，由DOCTYPE 所决定的 HTML 页面的渲染模式至关重要。</p>\n<h2 id=\"浏览器解析HTML方式\"><a href=\"#浏览器解析HTML方式\" class=\"headerlink\" title=\"浏览器解析HTML方式\"></a>浏览器解析HTML方式</h2><p>有三种解析方式:</p>\n<ul>\n<li>非怪异（标准）模式</li>\n<li>怪异模式</li>\n<li>部分怪异（近乎标准）模式</li>\n</ul>\n<p>在“标准模式”(standards mode) 页面按照 HTML 与 CSS 的定义渲染，而在“怪异模式(quirks mode) 模式”中则尝试模拟更旧的浏览器的行为。 一些浏览器（例如，那些基于 Mozilla 的 Gecko 渲染引擎的，或者 Internet Explorer 8 在 strict mode 下）也使用一种尝试于这两者之间妥协的“近乎标准”(almost standards) 模式，实施了一种表单元格尺寸的怪异行为，除此之外符合标准定义。</p>\n<p>一个不含任何 DOCTYPE 的网页将会以 怪异(quirks) 模式渲染。</p>\n<p>HTML5提供的<DOCTYPE html>是标准模式，向后兼容的, 等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的 标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。</p>\n<h1 id=\"理解DOM结构\"><a href=\"#理解DOM结构\" class=\"headerlink\" title=\"理解DOM结构\"></a>理解DOM结构</h1><p>DOM: Document Object Module, 文档对象模型。我们通过JavaScript操作页面的元素，进行添加、移动、改变或移除的方法和属性, 都是DOM提供的。</p>\n<h2 id=\"W3C-DOM-标准\"><a href=\"#W3C-DOM-标准\" class=\"headerlink\" title=\"W3C DOM 标准\"></a>W3C DOM 标准</h2><p>被分为 3 个不同的部分:</p>\n<p>核心 DOM - 针对任何结构化文档的标准模型<br>XML DOM - 针对 XML 文档的标准模型<br>HTML DOM - 针对 HTML 文档的标准模型</p>\n<h2 id=\"DOM节点\"><a href=\"#DOM节点\" class=\"headerlink\" title=\"DOM节点\"></a>DOM节点</h2><p>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</p>\n<p>整个文档是一个文档节点<br>每个 HTML 元素是元素节点<br>HTML 元素内的文本是文本节点<br>每个 HTML 属性是属性节点<br>注释是注释节点</p>\n<h2 id=\"HTML-DOM-节点树\"><a href=\"#HTML-DOM-节点树\" class=\"headerlink\" title=\"HTML DOM 节点树\"></a>HTML DOM 节点树</h2><p>HTML文本会被解析为DOM树, 树中的所有节点均可通过 JavaScript 进行访问。所有 HTML 元素（节点）均可被修改，也可以创建或删除节点。</p>\n<p><img src=\"D:/work/front-end-tutorial/ct_htmltree.gif\"></p>\n<h2 id=\"节点的关系\"><a href=\"#节点的关系\" class=\"headerlink\" title=\"节点的关系\"></a>节点的关系</h2><p>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）:</p>\n<ul>\n<li>在节点树中，顶端节点被称为根（root）</li>\n<li>每个节点都有父节点、除了根（它没有父节点）</li>\n<li>一个节点可拥有任意数量的子</li>\n<li>同胞是拥有相同父节点的节点</li>\n<li></li>\n</ul>\n<p><img src=\"D:/work/front-end-tutorial/dom_navigate.gif\"></p>\n<h1 id=\"HTML5新增内容\"><a href=\"#HTML5新增内容\" class=\"headerlink\" title=\"HTML5新增内容\"></a>HTML5新增内容</h1><p>HTML5 是对 HTML 标准的第五次修订。其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。HTML5 的语法是向后兼容的。现在国内普遍说的 H5 是包括了 CSS3，JavaScript 的说法（严格意义上说，这么叫并不合适，但是已经这么叫开了，就将错就错了）。</p>\n<h2 id=\"与HTML-4的不同之处\"><a href=\"#与HTML-4的不同之处\" class=\"headerlink\" title=\"与HTML 4的不同之处\"></a>与HTML 4的不同之处</h2><p>文件类型声明（&lt;!DOCTYPE&gt;）仅有一型：<!DOCTYPE HTML>。<br>新的解析顺序：不再基于SGML。<br>新的元素：section, video, progress, nav, meter, time, aside, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, mark, output, rp, rt, ruby, source, summary, wbr。<br>input元素的新类型：date, email, url等等。<br>新的属性：ping（用于a与area）, charset（用于meta）, async（用于script）。<br>全域属性：id, tabindex, repeat。<br>新的全域属性：contenteditable, contextmenu, draggable, dropzone, hidden, spellcheck。<br>移除元素：acronym, applet, basefont, big, center, dir, font, frame, frameset, isindex, noframes, strike, tt。</p>\n<h2 id=\"新增标签\"><a href=\"#新增标签\" class=\"headerlink\" title=\"新增标签\"></a>新增标签</h2><p>HTML 5提供了一些新的元素和属性，反映典型的现代用法网站。其中有些是技术上类似<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签，但有一定含义，例如<code>&lt;nav&gt;</code>（网站导航块）和<code>&lt;footer&gt;&lt;audio&gt;</code>和<code>&lt;video&gt;</code>标记。</p>\n<h2 id=\"移除的标签\"><a href=\"#移除的标签\" class=\"headerlink\" title=\"移除的标签\"></a>移除的标签</h2><p>一些过时的HTML 4标记将取消，其中包括纯粹用作显示效果的标记，如<code>&lt;font&gt;</code>和<code>&lt;center&gt;</code>，因为它们已经被CSS取代。还有一些通过DOM的网络行为。</p>\n<h2 id=\"修改的标签\"><a href=\"#修改的标签\" class=\"headerlink\" title=\"修改的标签\"></a>修改的标签</h2><p>尽管和SGML在标记上的相似性，HTML5的句法并不再基于它了，而是被设计成向后兼容对老版本的HTML的解析。它有一个新的开始列看起来就像SGML的文档类型声明，<!DOCTYPE HTML>，这会触发和标准兼容的渲染模式。在2009年1月5号，HTML5添加了Web Form 2.0的内容，html5开始发展起来。</p>\n<h2 id=\"无障碍（Accessibility）\"><a href=\"#无障碍（Accessibility）\" class=\"headerlink\" title=\"无障碍（Accessibility）\"></a>无障碍（Accessibility）</h2><p>为了使HTML5的新元素或新属性获取最大化的兼容性，开发人员需要附加一点额外补助，或者有些特性根本没有被任何浏览器实现，或者浏览器根本不支持补助技术。因此有些特殊的HTML5特性根本不能使用。更多细节可参见HTML5 Accessibility（无障碍）</p>\n<h2 id=\"新应用程序接口（API）\"><a href=\"#新应用程序接口（API）\" class=\"headerlink\" title=\"新应用程序接口（API）\"></a>新应用程序接口（API）</h2><p>除了原先的DOM接口，HTML5增加了更多样化的API:</p>\n<ul>\n<li>HTML Geolocation</li>\n<li>HTML Drag and Drop</li>\n<li>HTML Local Storage</li>\n<li>HTML Application Cache</li>\n<li>HTML Web Workers</li>\n<li>HTML SSE</li>\n<li>HTML Canvas&#x2F;WebGL 看demo”WebGL Demo.html”</li>\n<li>HTML Audio&#x2F;Video</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后奉上一张图片：</p>\n<p><img src=\"D:/work/front-end-tutorial/what-is-html5.jpg\"></p>\n<h1 id=\"常用meta整理\"><a href=\"#常用meta整理\" class=\"headerlink\" title=\"常用meta整理\"></a>常用meta整理</h1><h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n<h2 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keywords</td>\n<td>author &#x2F; description &#x2F; keywords &#x2F; generator &#x2F; revised &#x2F; others</td>\n<td>把 content 属性关联到一个名称。</td>\n</tr>\n<tr>\n<td>content</td>\n<td>some text</td>\n<td>定义与http-equiv或name属性相关的元信息</td>\n</tr>\n<tr>\n<td>http-equiv</td>\n<td>content-type &#x2F; expire &#x2F; refresh &#x2F; set-cookie</td>\n<td>把content属性关联到HTTP头部。</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTML-中有用的字符实体\"><a href=\"#HTML-中有用的字符实体\" class=\"headerlink\" title=\"HTML 中有用的字符实体\"></a>HTML 中有用的字符实体</h1><p><img src=\"D:/work/front-end-tutorial/entities.png\"></p>\n"},{"title":"js实现整数转二进制原码、补码","date":"2023-11-25T13:30:28.405Z","updated":"2023-11-26T01:17:58.916Z","_content":"\n为了加强对原码，反码，补码的理解，写了一个js函数整型转原码二进制的函数，同时支持反码和补码\n\n - 原码就是符号位加上真值的绝对值\n - 反码是正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反\n- 补码是正数的补码就是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(也即在反码的基础上+1)\n\n\n\n``` javascript\n\nconst int_to_binary = (num, size, type) => {\n    size = size || 64; // 大小默认64位\n    type = type || 0; // 0 原码、1 反码、2 补码\n    const negative = num < 0; // 符号\n    const reverseAndNegative = type === 1 && negative;\n    const arr = new Array(size).fill(reverseAndNegative ? '1' : '0');\n    let cur = Math.abs(num);\n    if (type === 2 && negative) {\n        cur += 1;\n    }\n    let j = size - 1;\n    while (cur !== 0) {\n        const remainder = cur % 2;\n        cur = (cur - remainder) / 2;\n        if (reverseAndNegative) {\n            arr[j] = remainder === 0 ? '1' : '0';\n        } else {\n            arr[j] = remainder;\n        }\n        j--;\n        if (j < 0) {\n            throw 'overflow'\n        } \n    }\n    arr[0] = negative ? '1' : '0';\n    return arr.join('');\n};\nconsole.log(int_to_binary( 123, 16, 0)) // 00000000000000000000010011010010\nconsole.log(int_to_binary(-123, 16, 0)) // 10000000000000000000010011010010\nconsole.log(int_to_binary( 123, 16, 1)) // 01111111111111111111101100101101\nconsole.log(int_to_binary(-123, 16, 1)) // 11111111111111111111101100101101\nconsole.log(int_to_binary( 123, 16, 2)) // 00000000000000000000010011010010\nconsole.log(int_to_binary(-123, 16, 2)) // 10000000000000000000010011010011\n\n```\n","source":"_posts/int-to-binary.md","raw":"---\ntitle: js实现整数转二进制原码、补码\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n为了加强对原码，反码，补码的理解，写了一个js函数整型转原码二进制的函数，同时支持反码和补码\n\n - 原码就是符号位加上真值的绝对值\n - 反码是正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反\n- 补码是正数的补码就是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(也即在反码的基础上+1)\n\n\n\n``` javascript\n\nconst int_to_binary = (num, size, type) => {\n    size = size || 64; // 大小默认64位\n    type = type || 0; // 0 原码、1 反码、2 补码\n    const negative = num < 0; // 符号\n    const reverseAndNegative = type === 1 && negative;\n    const arr = new Array(size).fill(reverseAndNegative ? '1' : '0');\n    let cur = Math.abs(num);\n    if (type === 2 && negative) {\n        cur += 1;\n    }\n    let j = size - 1;\n    while (cur !== 0) {\n        const remainder = cur % 2;\n        cur = (cur - remainder) / 2;\n        if (reverseAndNegative) {\n            arr[j] = remainder === 0 ? '1' : '0';\n        } else {\n            arr[j] = remainder;\n        }\n        j--;\n        if (j < 0) {\n            throw 'overflow'\n        } \n    }\n    arr[0] = negative ? '1' : '0';\n    return arr.join('');\n};\nconsole.log(int_to_binary( 123, 16, 0)) // 00000000000000000000010011010010\nconsole.log(int_to_binary(-123, 16, 0)) // 10000000000000000000010011010010\nconsole.log(int_to_binary( 123, 16, 1)) // 01111111111111111111101100101101\nconsole.log(int_to_binary(-123, 16, 1)) // 11111111111111111111101100101101\nconsole.log(int_to_binary( 123, 16, 2)) // 00000000000000000000010011010010\nconsole.log(int_to_binary(-123, 16, 2)) // 10000000000000000000010011010011\n\n```\n","slug":"int-to-binary","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000afm5y4mwr9nyu","content":"<p>为了加强对原码，反码，补码的理解，写了一个js函数整型转原码二进制的函数，同时支持反码和补码</p>\n<ul>\n<li>原码就是符号位加上真值的绝对值</li>\n<li>反码是正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反</li>\n<li>补码是正数的补码就是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(也即在反码的基础上+1)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">int_to_binary</span> = (<span class=\"params\">num, size, type</span>) =&gt; &#123;</span><br><span class=\"line\">    size = size || <span class=\"number\">64</span>; <span class=\"comment\">// 大小默认64位</span></span><br><span class=\"line\">    type = type || <span class=\"number\">0</span>; <span class=\"comment\">// 0 原码、1 反码、2 补码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> negative = num &lt; <span class=\"number\">0</span>; <span class=\"comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reverseAndNegative = type === <span class=\"number\">1</span> &amp;&amp; negative;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(size).<span class=\"title function_\">fill</span>(reverseAndNegative ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">2</span> &amp;&amp; negative) &#123;</span><br><span class=\"line\">        cur += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> remainder = cur % <span class=\"number\">2</span>;</span><br><span class=\"line\">        cur = (cur - remainder) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reverseAndNegative) &#123;</span><br><span class=\"line\">            arr[j] = remainder === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[j] = remainder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;overflow&#x27;</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = negative ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 00000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 10000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// 01111111111111111111101100101101</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// 11111111111111111111101100101101</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// 00000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// 10000000000000000000010011010011</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>为了加强对原码，反码，补码的理解，写了一个js函数整型转原码二进制的函数，同时支持反码和补码</p>\n<ul>\n<li>原码就是符号位加上真值的绝对值</li>\n<li>反码是正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反</li>\n<li>补码是正数的补码就是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(也即在反码的基础上+1)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">int_to_binary</span> = (<span class=\"params\">num, size, type</span>) =&gt; &#123;</span><br><span class=\"line\">    size = size || <span class=\"number\">64</span>; <span class=\"comment\">// 大小默认64位</span></span><br><span class=\"line\">    type = type || <span class=\"number\">0</span>; <span class=\"comment\">// 0 原码、1 反码、2 补码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> negative = num &lt; <span class=\"number\">0</span>; <span class=\"comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> reverseAndNegative = type === <span class=\"number\">1</span> &amp;&amp; negative;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(size).<span class=\"title function_\">fill</span>(reverseAndNegative ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">2</span> &amp;&amp; negative) &#123;</span><br><span class=\"line\">        cur += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> remainder = cur % <span class=\"number\">2</span>;</span><br><span class=\"line\">        cur = (cur - remainder) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reverseAndNegative) &#123;</span><br><span class=\"line\">            arr[j] = remainder === <span class=\"number\">0</span> ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[j] = remainder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;overflow&#x27;</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = negative ? <span class=\"string\">&#x27;1&#x27;</span> : <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 00000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">0</span>)) <span class=\"comment\">// 10000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// 01111111111111111111101100101101</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// 11111111111111111111101100101101</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>( <span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// 00000000000000000000010011010010</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">int_to_binary</span>(-<span class=\"number\">123</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// 10000000000000000000010011010011</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"javascript简单教程","date":"2023-11-15T13:21:43.527Z","updated":"2023-11-15T13:21:43.527Z","_content":"\n# 事件概述\n\n## DOM0级事件处理程序\n\n> 通过Javascript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。\n每个元素都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。将这种属性的值设置为一个函数，就可以指定事件处理程序。\n\n``` javascript\n// HTML 写法\n<button onclick=\"foo()\"></button>\n\n// js 写法\nvar btn = document.getElementById('myBtn');\n// 添加事件处理程序\nbtn.onclick = function () {\n    alert( this );//为DOM元素btn\n};\n// 移除事件处理程序\nbtn.onclick = null;\n```\n\n**优点:**\n1.简单\n2.具有跨浏览器的优势\n\n**缺点:**\n在代码运行之前不会指定事件处理程序，因此这些代码在页面中位于按钮后面，就有可能在一段时间怎么点击都没反应，用户体验变差。\n\n\n## DOM2级事件处理程序\n\n> 定义了两个方法，用于处理指定和删除事件处理程序的操作:addEventListener()和removeEventListener()。三个参数，1.要处理的事件名。2.作为事件处理程序的函数3.一个布尔值。最后这个布尔值为true,表示在捕获阶段调用事件处理程序，false表示在冒泡阶段调用事件处理程序。\n\n``` javascript\n// 添加多个事件处理程序\nvar btn = document.getElementById('myBtn');\nbtn.addEventListener('click',function (){\n    alert( this );// 为DOM元素btn\n},false );\nbtn.addEventListener('click',function () {\n    alert('Hello World');\n},false);\n\n// 移除事件处理程序\nbtn.removeEventListener('click',function () {\n    // 匿名函数无法被移除,移除失败\n},false);\n// 改写\nvar handler = function () {\n    alert(this.id);\n};\nbtn.addEventListener('click',handler,false);\n// 再次移除事件处理程序\nbtn.removeEventListener('click',handler,false);\n// 移除成功\n```\n\n这两个事件处理程序会按照添加他们的顺序触发。大多数情况，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度的兼容各种版本的浏览器。\n\n**优点:**\n 一个元素可以添加多个事件处理程序\n \n **缺点:**\n IE8及以下浏览器不支持DOM2级事件处理程序。(包括IE8)\n \n \n # 事件对象\n \n> 兼容DOM的浏览器会将一个event对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法(DOM0级或DOM2)级，都会传入event对象。event对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都有下表列出的成员\n\n\n属性/方法 | 类型 | 说明\n------------ | ------------- | ------------\nbubbles  | 属性 |  返回一个布尔值，如果事件是起泡类型，则返回 true，否则返回 fasle\ncanceble   | 属性 |  返回布尔值，指示事件是否可拥可取消的默认动作\ntarget   | 属性 |  事件的目标对象\ncurrentTarget  | 属性 |  其当前事件处理程序正在处理事件的那个元素\ndefaultPrevented 属性 |  |  表明当前事件是否调用了 event.preventDefault()方法\nevnetPhase  | 属性 |  返回事件传播的当前阶段没处理：0、捕获阶段: 1、正常事件派发: 2、起泡阶段: 3\npreventDefault  | 方法 |  \t通知浏览器不要执行与事件关联的默认动作如submit动作\nstopPropagation  | 方法 |  不再派发事件\nisTrusted   | 属性 |  返回一个布尔值,为true表明当前事件是由用户行为触发\ntype  | 属性 |  读属性 Event.type 会返回一个字符串, 表示该事件对象的事件类型\n\n\n# DOM 操作\n\n### DOM选择\n\n``` javascript\n// DOM操作jquery和原生\n\n// css 选择器\nvar ele = document.querySelector('.someCLass'); // 单个元素\nvar ele = document.querySelectorAll('.someCLass'); // 多个元素\nvar ele = document.getElementById('someId'); // 通过ID获取\nvar ele = document.getElementsByClassName('some-class') // 通过class获取\nvar ele = document.getElementsByTagName('div') // 通过标签获取\nvar $ele = $('#someId')\n\n```\n注释\n下面ele表示元素DOM，$ele表示jquery对象\n\n### 元素特性\n``` 布尔类型的属性\n// 原生\nele.disabled\nele.readonly\nele.checked\nele.selected\n// jquery\n$ele.prop('disabled') // getter\n$ele.prop('disabled', true) // settter\n\n```\n\n### 元素特性\n``` 元素特性-原生\nele.id\nele.value\nele.className\nele.title\n\n// 使用点号\nele.id\nele.id = 'otherId'\nele.id = ''\n\n// 也可以使用 getAttribute setAttribute removeAttribute\nele.getAttribute('id')\nele.setAttribute('id', 'abcId')\nele.removeAttribute('id')\n\n// 元素特性-jquery\n$ele.attr('id')\n$ele.attr('id', 'abcId')\n$ele.removeAttr('id')\n```\n\n### 添加元素\n``` javascript\n// 设置元素的HTML\nele.innerHTML = '<div>123</div>'\n$ele.html('<div>123</div>')\n\n// 插入子元素\nvar div = document.createElement('div');\nele.insertBefore(div, null); // 插入最后面\nele.insertBefore(div, ele.firstElementChild); // 插入最前面\n\nvar div2 = document.createElement('div');\n$ele.append(div2); // 插入最后面\n$ele.prepend(div2); // 插入最前面\n```\n\n### 创建元素\n``` javascript\nvar div = document.createElement('div');\nvar div = $('<div></div>');\n```\n\n### 移除元素\n``` javascript\n// 清空元素的HTML\nele.innerHTML = ''\n$ele.html('')\n$ele.empty('')\n\n// 原生\nele.remove();\n\n// jquery\n$ele.remove();\n```\n\n### 操作元素的class\n``` javascript\nele.className // 因为class是js的关键字\nele.className = 'someClass'\nvar classList = ele.classList;\n\nclassList.add('abc')\nclassList.remove('abc')\nclassList.toggle('abc') //类存在，则删除它并返回false，如果不存在，则添加它并返回true\nclassList.contains('abc') //是否包含abc\n\n// jquery\n$ele.addClass('abc')\n$ele.removeClass('abc')\n$ele.toggleClass('abc')\n$ele.hasClass('abc')\n```\n\n### 操作元素的文本\n``` javascript\nele.textContent // get\nele.textContent = 'some text' // set\n$ele.text()\n$ele.text('some text')\n```\n\n### 节点关系API\n``` javascript\n// 父节点\nele.parentElement\n$ele.parent()\n\n// 子节点\nele.children 子节点\nele.firstChild 第一个子节点\nele.lastChild 最后一个子节点\n\n\n$ele.children()\n$ele.children('div:first-child')\n$ele.children('div:last-child')\n```\n\n### 兄弟关系API\n``` javascript\nele.previousElementSibling 同一级前一个子节点\nele.nextElementSibling 同一级后一个子节点\n\n// jquery类似的\n$ele.prev()\n$ele.next()\n```\n\n### 修改样式\n``` javascript\nwindow.getComputedStyle(ele, 'color') // 获取样式\nele.style.color = 'red' // 设置样式\n\n\n$ele.css('color')\n$ele.css('color', 'red');\n$ele.css({ // 多个样式\n    'color': 'red',\n    'fontSize': '14px'\n})\n```","source":"_posts/javascript-tutorial.md","raw":"---\ntitle: javascript简单教程\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n# 事件概述\n\n## DOM0级事件处理程序\n\n> 通过Javascript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。\n每个元素都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。将这种属性的值设置为一个函数，就可以指定事件处理程序。\n\n``` javascript\n// HTML 写法\n<button onclick=\"foo()\"></button>\n\n// js 写法\nvar btn = document.getElementById('myBtn');\n// 添加事件处理程序\nbtn.onclick = function () {\n    alert( this );//为DOM元素btn\n};\n// 移除事件处理程序\nbtn.onclick = null;\n```\n\n**优点:**\n1.简单\n2.具有跨浏览器的优势\n\n**缺点:**\n在代码运行之前不会指定事件处理程序，因此这些代码在页面中位于按钮后面，就有可能在一段时间怎么点击都没反应，用户体验变差。\n\n\n## DOM2级事件处理程序\n\n> 定义了两个方法，用于处理指定和删除事件处理程序的操作:addEventListener()和removeEventListener()。三个参数，1.要处理的事件名。2.作为事件处理程序的函数3.一个布尔值。最后这个布尔值为true,表示在捕获阶段调用事件处理程序，false表示在冒泡阶段调用事件处理程序。\n\n``` javascript\n// 添加多个事件处理程序\nvar btn = document.getElementById('myBtn');\nbtn.addEventListener('click',function (){\n    alert( this );// 为DOM元素btn\n},false );\nbtn.addEventListener('click',function () {\n    alert('Hello World');\n},false);\n\n// 移除事件处理程序\nbtn.removeEventListener('click',function () {\n    // 匿名函数无法被移除,移除失败\n},false);\n// 改写\nvar handler = function () {\n    alert(this.id);\n};\nbtn.addEventListener('click',handler,false);\n// 再次移除事件处理程序\nbtn.removeEventListener('click',handler,false);\n// 移除成功\n```\n\n这两个事件处理程序会按照添加他们的顺序触发。大多数情况，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度的兼容各种版本的浏览器。\n\n**优点:**\n 一个元素可以添加多个事件处理程序\n \n **缺点:**\n IE8及以下浏览器不支持DOM2级事件处理程序。(包括IE8)\n \n \n # 事件对象\n \n> 兼容DOM的浏览器会将一个event对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法(DOM0级或DOM2)级，都会传入event对象。event对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都有下表列出的成员\n\n\n属性/方法 | 类型 | 说明\n------------ | ------------- | ------------\nbubbles  | 属性 |  返回一个布尔值，如果事件是起泡类型，则返回 true，否则返回 fasle\ncanceble   | 属性 |  返回布尔值，指示事件是否可拥可取消的默认动作\ntarget   | 属性 |  事件的目标对象\ncurrentTarget  | 属性 |  其当前事件处理程序正在处理事件的那个元素\ndefaultPrevented 属性 |  |  表明当前事件是否调用了 event.preventDefault()方法\nevnetPhase  | 属性 |  返回事件传播的当前阶段没处理：0、捕获阶段: 1、正常事件派发: 2、起泡阶段: 3\npreventDefault  | 方法 |  \t通知浏览器不要执行与事件关联的默认动作如submit动作\nstopPropagation  | 方法 |  不再派发事件\nisTrusted   | 属性 |  返回一个布尔值,为true表明当前事件是由用户行为触发\ntype  | 属性 |  读属性 Event.type 会返回一个字符串, 表示该事件对象的事件类型\n\n\n# DOM 操作\n\n### DOM选择\n\n``` javascript\n// DOM操作jquery和原生\n\n// css 选择器\nvar ele = document.querySelector('.someCLass'); // 单个元素\nvar ele = document.querySelectorAll('.someCLass'); // 多个元素\nvar ele = document.getElementById('someId'); // 通过ID获取\nvar ele = document.getElementsByClassName('some-class') // 通过class获取\nvar ele = document.getElementsByTagName('div') // 通过标签获取\nvar $ele = $('#someId')\n\n```\n注释\n下面ele表示元素DOM，$ele表示jquery对象\n\n### 元素特性\n``` 布尔类型的属性\n// 原生\nele.disabled\nele.readonly\nele.checked\nele.selected\n// jquery\n$ele.prop('disabled') // getter\n$ele.prop('disabled', true) // settter\n\n```\n\n### 元素特性\n``` 元素特性-原生\nele.id\nele.value\nele.className\nele.title\n\n// 使用点号\nele.id\nele.id = 'otherId'\nele.id = ''\n\n// 也可以使用 getAttribute setAttribute removeAttribute\nele.getAttribute('id')\nele.setAttribute('id', 'abcId')\nele.removeAttribute('id')\n\n// 元素特性-jquery\n$ele.attr('id')\n$ele.attr('id', 'abcId')\n$ele.removeAttr('id')\n```\n\n### 添加元素\n``` javascript\n// 设置元素的HTML\nele.innerHTML = '<div>123</div>'\n$ele.html('<div>123</div>')\n\n// 插入子元素\nvar div = document.createElement('div');\nele.insertBefore(div, null); // 插入最后面\nele.insertBefore(div, ele.firstElementChild); // 插入最前面\n\nvar div2 = document.createElement('div');\n$ele.append(div2); // 插入最后面\n$ele.prepend(div2); // 插入最前面\n```\n\n### 创建元素\n``` javascript\nvar div = document.createElement('div');\nvar div = $('<div></div>');\n```\n\n### 移除元素\n``` javascript\n// 清空元素的HTML\nele.innerHTML = ''\n$ele.html('')\n$ele.empty('')\n\n// 原生\nele.remove();\n\n// jquery\n$ele.remove();\n```\n\n### 操作元素的class\n``` javascript\nele.className // 因为class是js的关键字\nele.className = 'someClass'\nvar classList = ele.classList;\n\nclassList.add('abc')\nclassList.remove('abc')\nclassList.toggle('abc') //类存在，则删除它并返回false，如果不存在，则添加它并返回true\nclassList.contains('abc') //是否包含abc\n\n// jquery\n$ele.addClass('abc')\n$ele.removeClass('abc')\n$ele.toggleClass('abc')\n$ele.hasClass('abc')\n```\n\n### 操作元素的文本\n``` javascript\nele.textContent // get\nele.textContent = 'some text' // set\n$ele.text()\n$ele.text('some text')\n```\n\n### 节点关系API\n``` javascript\n// 父节点\nele.parentElement\n$ele.parent()\n\n// 子节点\nele.children 子节点\nele.firstChild 第一个子节点\nele.lastChild 最后一个子节点\n\n\n$ele.children()\n$ele.children('div:first-child')\n$ele.children('div:last-child')\n```\n\n### 兄弟关系API\n``` javascript\nele.previousElementSibling 同一级前一个子节点\nele.nextElementSibling 同一级后一个子节点\n\n// jquery类似的\n$ele.prev()\n$ele.next()\n```\n\n### 修改样式\n``` javascript\nwindow.getComputedStyle(ele, 'color') // 获取样式\nele.style.color = 'red' // 设置样式\n\n\n$ele.css('color')\n$ele.css('color', 'red');\n$ele.css({ // 多个样式\n    'color': 'red',\n    'fontSize': '14px'\n})\n```","slug":"javascript-tutorial","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000bfm5ybns1bfn7","content":"<h1 id=\"事件概述\"><a href=\"#事件概述\" class=\"headerlink\" title=\"事件概述\"></a>事件概述</h1><h2 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h2><blockquote>\n<p>通过Javascript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。<br>每个元素都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。将这种属性的值设置为一个函数，就可以指定事件处理程序。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HTML 写法</span></span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;foo()&quot;</span>&gt;&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js 写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 添加事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"variable language_\">this</span> );<span class=\"comment\">//为DOM元素btn</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点:</strong><br>1.简单<br>2.具有跨浏览器的优势</p>\n<p><strong>缺点:</strong><br>在代码运行之前不会指定事件处理程序，因此这些代码在页面中位于按钮后面，就有可能在一段时间怎么点击都没反应，用户体验变差。</p>\n<h2 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h2><blockquote>\n<p>定义了两个方法，用于处理指定和删除事件处理程序的操作:addEventListener()和removeEventListener()。三个参数，1.要处理的事件名。2.作为事件处理程序的函数3.一个布尔值。最后这个布尔值为true,表示在捕获阶段调用事件处理程序，false表示在冒泡阶段调用事件处理程序。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加多个事件处理程序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"variable language_\">this</span> );<span class=\"comment\">// 为DOM元素btn</span></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span> );</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hello World&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 匿名函数无法被移除,移除失败</span></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 改写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 再次移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 移除成功</span></span><br></pre></td></tr></table></figure>\n\n<p>这两个事件处理程序会按照添加他们的顺序触发。大多数情况，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度的兼容各种版本的浏览器。</p>\n<p><strong>优点:</strong><br> 一个元素可以添加多个事件处理程序</p>\n<p> <strong>缺点:</strong><br> IE8及以下浏览器不支持DOM2级事件处理程序。(包括IE8)</p>\n<h1 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h1><blockquote>\n<p>兼容DOM的浏览器会将一个event对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法(DOM0级或DOM2)级，都会传入event对象。event对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都有下表列出的成员</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性&#x2F;方法</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bubbles</td>\n<td>属性</td>\n<td>返回一个布尔值，如果事件是起泡类型，则返回 true，否则返回 fasle</td>\n</tr>\n<tr>\n<td>canceble</td>\n<td>属性</td>\n<td>返回布尔值，指示事件是否可拥可取消的默认动作</td>\n</tr>\n<tr>\n<td>target</td>\n<td>属性</td>\n<td>事件的目标对象</td>\n</tr>\n<tr>\n<td>currentTarget</td>\n<td>属性</td>\n<td>其当前事件处理程序正在处理事件的那个元素</td>\n</tr>\n<tr>\n<td>defaultPrevented 属性</td>\n<td></td>\n<td>表明当前事件是否调用了 event.preventDefault()方法</td>\n</tr>\n<tr>\n<td>evnetPhase</td>\n<td>属性</td>\n<td>返回事件传播的当前阶段没处理：0、捕获阶段: 1、正常事件派发: 2、起泡阶段: 3</td>\n</tr>\n<tr>\n<td>preventDefault</td>\n<td>方法</td>\n<td>通知浏览器不要执行与事件关联的默认动作如submit动作</td>\n</tr>\n<tr>\n<td>stopPropagation</td>\n<td>方法</td>\n<td>不再派发事件</td>\n</tr>\n<tr>\n<td>isTrusted</td>\n<td>属性</td>\n<td>返回一个布尔值,为true表明当前事件是由用户行为触发</td>\n</tr>\n<tr>\n<td>type</td>\n<td>属性</td>\n<td>读属性 Event.type 会返回一个字符串, 表示该事件对象的事件类型</td>\n</tr>\n</tbody></table>\n<h1 id=\"DOM-操作\"><a href=\"#DOM-操作\" class=\"headerlink\" title=\"DOM 操作\"></a>DOM 操作</h1><h3 id=\"DOM选择\"><a href=\"#DOM选择\" class=\"headerlink\" title=\"DOM选择\"></a>DOM选择</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOM操作jquery和原生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css 选择器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.someCLass&#x27;</span>); <span class=\"comment\">// 单个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.someCLass&#x27;</span>); <span class=\"comment\">// 多个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;someId&#x27;</span>); <span class=\"comment\">// 通过ID获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;some-class&#x27;</span>) <span class=\"comment\">// 通过class获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>) <span class=\"comment\">// 通过标签获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $ele = $(<span class=\"string\">&#x27;#someId&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注释<br>下面ele表示元素DOM，$ele表示jquery对象</p>\n<h3 id=\"元素特性\"><a href=\"#元素特性\" class=\"headerlink\" title=\"元素特性\"></a>元素特性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原生</span><br><span class=\"line\">ele.disabled</span><br><span class=\"line\">ele.readonly</span><br><span class=\"line\">ele.checked</span><br><span class=\"line\">ele.selected</span><br><span class=\"line\">// jquery</span><br><span class=\"line\">$ele.prop(&#x27;disabled&#x27;) // getter</span><br><span class=\"line\">$ele.prop(&#x27;disabled&#x27;, true) // settter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元素特性-1\"><a href=\"#元素特性-1\" class=\"headerlink\" title=\"元素特性\"></a>元素特性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.id</span><br><span class=\"line\">ele.value</span><br><span class=\"line\">ele.className</span><br><span class=\"line\">ele.title</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用点号</span><br><span class=\"line\">ele.id</span><br><span class=\"line\">ele.id = &#x27;otherId&#x27;</span><br><span class=\"line\">ele.id = &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以使用 getAttribute setAttribute removeAttribute</span><br><span class=\"line\">ele.getAttribute(&#x27;id&#x27;)</span><br><span class=\"line\">ele.setAttribute(&#x27;id&#x27;, &#x27;abcId&#x27;)</span><br><span class=\"line\">ele.removeAttribute(&#x27;id&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 元素特性-jquery</span><br><span class=\"line\">$ele.attr(&#x27;id&#x27;)</span><br><span class=\"line\">$ele.attr(&#x27;id&#x27;, &#x27;abcId&#x27;)</span><br><span class=\"line\">$ele.removeAttr(&#x27;id&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置元素的HTML</span></span><br><span class=\"line\">ele.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入子元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">ele.<span class=\"title function_\">insertBefore</span>(div, <span class=\"literal\">null</span>); <span class=\"comment\">// 插入最后面</span></span><br><span class=\"line\">ele.<span class=\"title function_\">insertBefore</span>(div, ele.<span class=\"property\">firstElementChild</span>); <span class=\"comment\">// 插入最前面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">$ele.<span class=\"title function_\">append</span>(div2); <span class=\"comment\">// 插入最后面</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">prepend</span>(div2); <span class=\"comment\">// 插入最前面</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素\"></a>创建元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清空元素的HTML</span></span><br><span class=\"line\">ele.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">empty</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原生</span></span><br><span class=\"line\">ele.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">remove</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作元素的class\"><a href=\"#操作元素的class\" class=\"headerlink\" title=\"操作元素的class\"></a>操作元素的class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">className</span> <span class=\"comment\">// 因为class是js的关键字</span></span><br><span class=\"line\">ele.<span class=\"property\">className</span> = <span class=\"string\">&#x27;someClass&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> classList = ele.<span class=\"property\">classList</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">classList.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">classList.<span class=\"title function_\">remove</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">classList.<span class=\"title function_\">toggle</span>(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">//类存在，则删除它并返回false，如果不存在，则添加它并返回true</span></span><br><span class=\"line\">classList.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">//是否包含abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">addClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">removeClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">toggleClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">hasClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作元素的文本\"><a href=\"#操作元素的文本\" class=\"headerlink\" title=\"操作元素的文本\"></a>操作元素的文本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">textContent</span> <span class=\"comment\">// get</span></span><br><span class=\"line\">ele.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;some text&#x27;</span> <span class=\"comment\">// set</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">text</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;some text&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点关系API\"><a href=\"#节点关系API\" class=\"headerlink\" title=\"节点关系API\"></a>节点关系API</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父节点</span></span><br><span class=\"line\">ele.<span class=\"property\">parentElement</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">parent</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子节点</span></span><br><span class=\"line\">ele.<span class=\"property\">children</span> 子节点</span><br><span class=\"line\">ele.<span class=\"property\">firstChild</span> 第一个子节点</span><br><span class=\"line\">ele.<span class=\"property\">lastChild</span> 最后一个子节点</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>(<span class=\"string\">&#x27;div:first-child&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>(<span class=\"string\">&#x27;div:last-child&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟关系API\"><a href=\"#兄弟关系API\" class=\"headerlink\" title=\"兄弟关系API\"></a>兄弟关系API</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">previousElementSibling</span> 同一级前一个子节点</span><br><span class=\"line\">ele.<span class=\"property\">nextElementSibling</span> 同一级后一个子节点</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery类似的</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">prev</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">next</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改样式\"><a href=\"#修改样式\" class=\"headerlink\" title=\"修改样式\"></a>修改样式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">getComputedStyle</span>(ele, <span class=\"string\">&#x27;color&#x27;</span>) <span class=\"comment\">// 获取样式</span></span><br><span class=\"line\">ele.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span> <span class=\"comment\">// 设置样式</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;color&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(&#123; <span class=\"comment\">// 多个样式</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;fontSize&#x27;</span>: <span class=\"string\">&#x27;14px&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"事件概述\"><a href=\"#事件概述\" class=\"headerlink\" title=\"事件概述\"></a>事件概述</h1><h2 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h2><blockquote>\n<p>通过Javascript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。<br>每个元素都有自己的事件处理程序属性，这些属性通常全部小写，例如onclick。将这种属性的值设置为一个函数，就可以指定事件处理程序。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HTML 写法</span></span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;foo()&quot;</span>&gt;&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js 写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 添加事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"variable language_\">this</span> );<span class=\"comment\">//为DOM元素btn</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点:</strong><br>1.简单<br>2.具有跨浏览器的优势</p>\n<p><strong>缺点:</strong><br>在代码运行之前不会指定事件处理程序，因此这些代码在页面中位于按钮后面，就有可能在一段时间怎么点击都没反应，用户体验变差。</p>\n<h2 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h2><blockquote>\n<p>定义了两个方法，用于处理指定和删除事件处理程序的操作:addEventListener()和removeEventListener()。三个参数，1.要处理的事件名。2.作为事件处理程序的函数3.一个布尔值。最后这个布尔值为true,表示在捕获阶段调用事件处理程序，false表示在冒泡阶段调用事件处理程序。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加多个事件处理程序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"variable language_\">this</span> );<span class=\"comment\">// 为DOM元素btn</span></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span> );</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hello World&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 匿名函数无法被移除,移除失败</span></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 改写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 再次移除事件处理程序</span></span><br><span class=\"line\">btn.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,handler,<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// 移除成功</span></span><br></pre></td></tr></table></figure>\n\n<p>这两个事件处理程序会按照添加他们的顺序触发。大多数情况，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度的兼容各种版本的浏览器。</p>\n<p><strong>优点:</strong><br> 一个元素可以添加多个事件处理程序</p>\n<p> <strong>缺点:</strong><br> IE8及以下浏览器不支持DOM2级事件处理程序。(包括IE8)</p>\n<h1 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h1><blockquote>\n<p>兼容DOM的浏览器会将一个event对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法(DOM0级或DOM2)级，都会传入event对象。event对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都有下表列出的成员</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性&#x2F;方法</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bubbles</td>\n<td>属性</td>\n<td>返回一个布尔值，如果事件是起泡类型，则返回 true，否则返回 fasle</td>\n</tr>\n<tr>\n<td>canceble</td>\n<td>属性</td>\n<td>返回布尔值，指示事件是否可拥可取消的默认动作</td>\n</tr>\n<tr>\n<td>target</td>\n<td>属性</td>\n<td>事件的目标对象</td>\n</tr>\n<tr>\n<td>currentTarget</td>\n<td>属性</td>\n<td>其当前事件处理程序正在处理事件的那个元素</td>\n</tr>\n<tr>\n<td>defaultPrevented 属性</td>\n<td></td>\n<td>表明当前事件是否调用了 event.preventDefault()方法</td>\n</tr>\n<tr>\n<td>evnetPhase</td>\n<td>属性</td>\n<td>返回事件传播的当前阶段没处理：0、捕获阶段: 1、正常事件派发: 2、起泡阶段: 3</td>\n</tr>\n<tr>\n<td>preventDefault</td>\n<td>方法</td>\n<td>通知浏览器不要执行与事件关联的默认动作如submit动作</td>\n</tr>\n<tr>\n<td>stopPropagation</td>\n<td>方法</td>\n<td>不再派发事件</td>\n</tr>\n<tr>\n<td>isTrusted</td>\n<td>属性</td>\n<td>返回一个布尔值,为true表明当前事件是由用户行为触发</td>\n</tr>\n<tr>\n<td>type</td>\n<td>属性</td>\n<td>读属性 Event.type 会返回一个字符串, 表示该事件对象的事件类型</td>\n</tr>\n</tbody></table>\n<h1 id=\"DOM-操作\"><a href=\"#DOM-操作\" class=\"headerlink\" title=\"DOM 操作\"></a>DOM 操作</h1><h3 id=\"DOM选择\"><a href=\"#DOM选择\" class=\"headerlink\" title=\"DOM选择\"></a>DOM选择</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOM操作jquery和原生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css 选择器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.someCLass&#x27;</span>); <span class=\"comment\">// 单个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.someCLass&#x27;</span>); <span class=\"comment\">// 多个元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;someId&#x27;</span>); <span class=\"comment\">// 通过ID获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;some-class&#x27;</span>) <span class=\"comment\">// 通过class获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;div&#x27;</span>) <span class=\"comment\">// 通过标签获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $ele = $(<span class=\"string\">&#x27;#someId&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注释<br>下面ele表示元素DOM，$ele表示jquery对象</p>\n<h3 id=\"元素特性\"><a href=\"#元素特性\" class=\"headerlink\" title=\"元素特性\"></a>元素特性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原生</span><br><span class=\"line\">ele.disabled</span><br><span class=\"line\">ele.readonly</span><br><span class=\"line\">ele.checked</span><br><span class=\"line\">ele.selected</span><br><span class=\"line\">// jquery</span><br><span class=\"line\">$ele.prop(&#x27;disabled&#x27;) // getter</span><br><span class=\"line\">$ele.prop(&#x27;disabled&#x27;, true) // settter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元素特性-1\"><a href=\"#元素特性-1\" class=\"headerlink\" title=\"元素特性\"></a>元素特性</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.id</span><br><span class=\"line\">ele.value</span><br><span class=\"line\">ele.className</span><br><span class=\"line\">ele.title</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用点号</span><br><span class=\"line\">ele.id</span><br><span class=\"line\">ele.id = &#x27;otherId&#x27;</span><br><span class=\"line\">ele.id = &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以使用 getAttribute setAttribute removeAttribute</span><br><span class=\"line\">ele.getAttribute(&#x27;id&#x27;)</span><br><span class=\"line\">ele.setAttribute(&#x27;id&#x27;, &#x27;abcId&#x27;)</span><br><span class=\"line\">ele.removeAttribute(&#x27;id&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 元素特性-jquery</span><br><span class=\"line\">$ele.attr(&#x27;id&#x27;)</span><br><span class=\"line\">$ele.attr(&#x27;id&#x27;, &#x27;abcId&#x27;)</span><br><span class=\"line\">$ele.removeAttr(&#x27;id&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置元素的HTML</span></span><br><span class=\"line\">ele.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入子元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">ele.<span class=\"title function_\">insertBefore</span>(div, <span class=\"literal\">null</span>); <span class=\"comment\">// 插入最后面</span></span><br><span class=\"line\">ele.<span class=\"title function_\">insertBefore</span>(div, ele.<span class=\"property\">firstElementChild</span>); <span class=\"comment\">// 插入最前面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">$ele.<span class=\"title function_\">append</span>(div2); <span class=\"comment\">// 插入最后面</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">prepend</span>(div2); <span class=\"comment\">// 插入最前面</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素\"></a>创建元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> div = $(<span class=\"string\">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除元素\"><a href=\"#移除元素\" class=\"headerlink\" title=\"移除元素\"></a>移除元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清空元素的HTML</span></span><br><span class=\"line\">ele.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">empty</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原生</span></span><br><span class=\"line\">ele.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">remove</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作元素的class\"><a href=\"#操作元素的class\" class=\"headerlink\" title=\"操作元素的class\"></a>操作元素的class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">className</span> <span class=\"comment\">// 因为class是js的关键字</span></span><br><span class=\"line\">ele.<span class=\"property\">className</span> = <span class=\"string\">&#x27;someClass&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> classList = ele.<span class=\"property\">classList</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">classList.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">classList.<span class=\"title function_\">remove</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">classList.<span class=\"title function_\">toggle</span>(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">//类存在，则删除它并返回false，如果不存在，则添加它并返回true</span></span><br><span class=\"line\">classList.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">//是否包含abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">addClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">removeClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">toggleClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">hasClass</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作元素的文本\"><a href=\"#操作元素的文本\" class=\"headerlink\" title=\"操作元素的文本\"></a>操作元素的文本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">textContent</span> <span class=\"comment\">// get</span></span><br><span class=\"line\">ele.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;some text&#x27;</span> <span class=\"comment\">// set</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">text</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;some text&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点关系API\"><a href=\"#节点关系API\" class=\"headerlink\" title=\"节点关系API\"></a>节点关系API</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父节点</span></span><br><span class=\"line\">ele.<span class=\"property\">parentElement</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">parent</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子节点</span></span><br><span class=\"line\">ele.<span class=\"property\">children</span> 子节点</span><br><span class=\"line\">ele.<span class=\"property\">firstChild</span> 第一个子节点</span><br><span class=\"line\">ele.<span class=\"property\">lastChild</span> 最后一个子节点</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>(<span class=\"string\">&#x27;div:first-child&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">children</span>(<span class=\"string\">&#x27;div:last-child&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟关系API\"><a href=\"#兄弟关系API\" class=\"headerlink\" title=\"兄弟关系API\"></a>兄弟关系API</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.<span class=\"property\">previousElementSibling</span> 同一级前一个子节点</span><br><span class=\"line\">ele.<span class=\"property\">nextElementSibling</span> 同一级后一个子节点</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jquery类似的</span></span><br><span class=\"line\">$ele.<span class=\"title function_\">prev</span>()</span><br><span class=\"line\">$ele.<span class=\"title function_\">next</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改样式\"><a href=\"#修改样式\" class=\"headerlink\" title=\"修改样式\"></a>修改样式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">getComputedStyle</span>(ele, <span class=\"string\">&#x27;color&#x27;</span>) <span class=\"comment\">// 获取样式</span></span><br><span class=\"line\">ele.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span> <span class=\"comment\">// 设置样式</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;color&#x27;</span>)</span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">$ele.<span class=\"title function_\">css</span>(&#123; <span class=\"comment\">// 多个样式</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;fontSize&#x27;</span>: <span class=\"string\">&#x27;14px&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"读过的书","date":"2023-11-15T13:21:43.527Z","updated":"2023-11-15T13:21:43.527Z","_content":"\n## 国外\n+ 加西亚·马尔克斯《百年孤独》\n+ 加西亚·马尔克斯《霍乱时期的爱情》\n+ 加西亚·马尔克斯《没有人给他写信的上校》\n+ 加西亚·马尔克斯《一桩事先张扬的凶杀案》\n+ 沃尔特·艾萨克森《史蒂夫·乔布斯传》\n+ 小仲马《茶花女》\n+ 莫泊桑《羊脂球》\n+ 莫泊桑《漂亮朋友》\n+ 柯南·道尔《福尔摩斯探案全集》\n+ 儒勒·凡尔纳《海底两万里》\n+ 丹尼尔·笛福《鲁滨逊漂流记》\n+ 赫尔曼·梅尔维尔《白鲸记》\n+ 胡赛尼《追风筝的人》\n+ 弗·司各特·菲茨杰拉德《了不起的盖茨比》\n+ 海明威《老人与海》\n+ 欧·亨利《欧·亨利短篇小说集》\n+ 斯蒂芬·茨威格 《一个陌生女人的来信》\n+ 简·奥斯汀《傲慢与偏见》\n+ 希斯洛普《岛》\n+ 斯蒂芬·金《肖申克的救赎》\n+ 圣·德克旭贝里《小王子》\n+ 泰戈尔《飞鸟集》\n+ 村上村树《挪威的森林》\n+ 村上村树《国境以南，太阳以西》\n+ 川端康成《伊豆的舞女》\n+ 川端康成《雪国》\n+ 保罗·格雷厄姆《黑客与画家》\n\n \n## 国内\n+ 唐玄奘《心经》\n+ 鸠摩罗什《金刚经》\n+ 王羽《鬼谷子》\n+ 孙武《孙子兵法》\n+ 蒲松龄《聊斋志异》\n+ 张爱玲《半生缘》\n+ 张爱玲《倾城之恋》\n+ 张爱玲《茉莉香片》\n+ 张爱玲《霸王别姬》\n+ 鲁迅《鲁迅文集》\n+ 沈从文《边城》\n+ 三毛《撒哈拉的故事》\n+ 三毛《三毛作品集》\n+ 龙应台《目送》\n+ 吴念真《这些人，那些事》\n+ 余华《活着》\n+ 路遥《平凡的世界》\n+ 余秋雨《山居笔记》\n+ 李可《杜拉拉升职记》\n+ 艾米《山楂树之恋》\n+ \n## 没读完的书\n+ 安徒生《安徒生童话集》\n+ 大仲马《基督山伯爵》\n+ 史蒂芬·霍金《时间简史》\n+ 原研哉《设计中的设计》\n+ 莫提默·J. 艾德勒《如何阅读一本书》\n+ 龙应台《亲爱的安德烈》\n+ 玛格丽特·米切尔《飘》\n+ 夏洛蒂·勃朗特《简·爱》\n+ 泰戈尔《吉檀迦利》\n+ 曹雪芹《红楼梦》\n+ 罗贯中《三国演义》\n+ 施耐庵，罗贯中《水浒传》","source":"_posts/readed-book.md","raw":"---\ntitle: 读过的书\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n## 国外\n+ 加西亚·马尔克斯《百年孤独》\n+ 加西亚·马尔克斯《霍乱时期的爱情》\n+ 加西亚·马尔克斯《没有人给他写信的上校》\n+ 加西亚·马尔克斯《一桩事先张扬的凶杀案》\n+ 沃尔特·艾萨克森《史蒂夫·乔布斯传》\n+ 小仲马《茶花女》\n+ 莫泊桑《羊脂球》\n+ 莫泊桑《漂亮朋友》\n+ 柯南·道尔《福尔摩斯探案全集》\n+ 儒勒·凡尔纳《海底两万里》\n+ 丹尼尔·笛福《鲁滨逊漂流记》\n+ 赫尔曼·梅尔维尔《白鲸记》\n+ 胡赛尼《追风筝的人》\n+ 弗·司各特·菲茨杰拉德《了不起的盖茨比》\n+ 海明威《老人与海》\n+ 欧·亨利《欧·亨利短篇小说集》\n+ 斯蒂芬·茨威格 《一个陌生女人的来信》\n+ 简·奥斯汀《傲慢与偏见》\n+ 希斯洛普《岛》\n+ 斯蒂芬·金《肖申克的救赎》\n+ 圣·德克旭贝里《小王子》\n+ 泰戈尔《飞鸟集》\n+ 村上村树《挪威的森林》\n+ 村上村树《国境以南，太阳以西》\n+ 川端康成《伊豆的舞女》\n+ 川端康成《雪国》\n+ 保罗·格雷厄姆《黑客与画家》\n\n \n## 国内\n+ 唐玄奘《心经》\n+ 鸠摩罗什《金刚经》\n+ 王羽《鬼谷子》\n+ 孙武《孙子兵法》\n+ 蒲松龄《聊斋志异》\n+ 张爱玲《半生缘》\n+ 张爱玲《倾城之恋》\n+ 张爱玲《茉莉香片》\n+ 张爱玲《霸王别姬》\n+ 鲁迅《鲁迅文集》\n+ 沈从文《边城》\n+ 三毛《撒哈拉的故事》\n+ 三毛《三毛作品集》\n+ 龙应台《目送》\n+ 吴念真《这些人，那些事》\n+ 余华《活着》\n+ 路遥《平凡的世界》\n+ 余秋雨《山居笔记》\n+ 李可《杜拉拉升职记》\n+ 艾米《山楂树之恋》\n+ \n## 没读完的书\n+ 安徒生《安徒生童话集》\n+ 大仲马《基督山伯爵》\n+ 史蒂芬·霍金《时间简史》\n+ 原研哉《设计中的设计》\n+ 莫提默·J. 艾德勒《如何阅读一本书》\n+ 龙应台《亲爱的安德烈》\n+ 玛格丽特·米切尔《飘》\n+ 夏洛蒂·勃朗特《简·爱》\n+ 泰戈尔《吉檀迦利》\n+ 曹雪芹《红楼梦》\n+ 罗贯中《三国演义》\n+ 施耐庵，罗贯中《水浒传》","slug":"readed-book","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000cfm5y003u7qaa","content":"<h2 id=\"国外\"><a href=\"#国外\" class=\"headerlink\" title=\"国外\"></a>国外</h2><ul>\n<li>加西亚·马尔克斯《百年孤独》</li>\n<li>加西亚·马尔克斯《霍乱时期的爱情》</li>\n<li>加西亚·马尔克斯《没有人给他写信的上校》</li>\n<li>加西亚·马尔克斯《一桩事先张扬的凶杀案》</li>\n<li>沃尔特·艾萨克森《史蒂夫·乔布斯传》</li>\n<li>小仲马《茶花女》</li>\n<li>莫泊桑《羊脂球》</li>\n<li>莫泊桑《漂亮朋友》</li>\n<li>柯南·道尔《福尔摩斯探案全集》</li>\n<li>儒勒·凡尔纳《海底两万里》</li>\n<li>丹尼尔·笛福《鲁滨逊漂流记》</li>\n<li>赫尔曼·梅尔维尔《白鲸记》</li>\n<li>胡赛尼《追风筝的人》</li>\n<li>弗·司各特·菲茨杰拉德《了不起的盖茨比》</li>\n<li>海明威《老人与海》</li>\n<li>欧·亨利《欧·亨利短篇小说集》</li>\n<li>斯蒂芬·茨威格 《一个陌生女人的来信》</li>\n<li>简·奥斯汀《傲慢与偏见》</li>\n<li>希斯洛普《岛》</li>\n<li>斯蒂芬·金《肖申克的救赎》</li>\n<li>圣·德克旭贝里《小王子》</li>\n<li>泰戈尔《飞鸟集》</li>\n<li>村上村树《挪威的森林》</li>\n<li>村上村树《国境以南，太阳以西》</li>\n<li>川端康成《伊豆的舞女》</li>\n<li>川端康成《雪国》</li>\n<li>保罗·格雷厄姆《黑客与画家》</li>\n</ul>\n<h2 id=\"国内\"><a href=\"#国内\" class=\"headerlink\" title=\"国内\"></a>国内</h2><ul>\n<li>唐玄奘《心经》</li>\n<li>鸠摩罗什《金刚经》</li>\n<li>王羽《鬼谷子》</li>\n<li>孙武《孙子兵法》</li>\n<li>蒲松龄《聊斋志异》</li>\n<li>张爱玲《半生缘》</li>\n<li>张爱玲《倾城之恋》</li>\n<li>张爱玲《茉莉香片》</li>\n<li>张爱玲《霸王别姬》</li>\n<li>鲁迅《鲁迅文集》</li>\n<li>沈从文《边城》</li>\n<li>三毛《撒哈拉的故事》</li>\n<li>三毛《三毛作品集》</li>\n<li>龙应台《目送》</li>\n<li>吴念真《这些人，那些事》</li>\n<li>余华《活着》</li>\n<li>路遥《平凡的世界》</li>\n<li>余秋雨《山居笔记》</li>\n<li>李可《杜拉拉升职记》</li>\n<li>艾米《山楂树之恋》</li>\n<li></li>\n</ul>\n<h2 id=\"没读完的书\"><a href=\"#没读完的书\" class=\"headerlink\" title=\"没读完的书\"></a>没读完的书</h2><ul>\n<li>安徒生《安徒生童话集》</li>\n<li>大仲马《基督山伯爵》</li>\n<li>史蒂芬·霍金《时间简史》</li>\n<li>原研哉《设计中的设计》</li>\n<li>莫提默·J. 艾德勒《如何阅读一本书》</li>\n<li>龙应台《亲爱的安德烈》</li>\n<li>玛格丽特·米切尔《飘》</li>\n<li>夏洛蒂·勃朗特《简·爱》</li>\n<li>泰戈尔《吉檀迦利》</li>\n<li>曹雪芹《红楼梦》</li>\n<li>罗贯中《三国演义》</li>\n<li>施耐庵，罗贯中《水浒传》</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"国外\"><a href=\"#国外\" class=\"headerlink\" title=\"国外\"></a>国外</h2><ul>\n<li>加西亚·马尔克斯《百年孤独》</li>\n<li>加西亚·马尔克斯《霍乱时期的爱情》</li>\n<li>加西亚·马尔克斯《没有人给他写信的上校》</li>\n<li>加西亚·马尔克斯《一桩事先张扬的凶杀案》</li>\n<li>沃尔特·艾萨克森《史蒂夫·乔布斯传》</li>\n<li>小仲马《茶花女》</li>\n<li>莫泊桑《羊脂球》</li>\n<li>莫泊桑《漂亮朋友》</li>\n<li>柯南·道尔《福尔摩斯探案全集》</li>\n<li>儒勒·凡尔纳《海底两万里》</li>\n<li>丹尼尔·笛福《鲁滨逊漂流记》</li>\n<li>赫尔曼·梅尔维尔《白鲸记》</li>\n<li>胡赛尼《追风筝的人》</li>\n<li>弗·司各特·菲茨杰拉德《了不起的盖茨比》</li>\n<li>海明威《老人与海》</li>\n<li>欧·亨利《欧·亨利短篇小说集》</li>\n<li>斯蒂芬·茨威格 《一个陌生女人的来信》</li>\n<li>简·奥斯汀《傲慢与偏见》</li>\n<li>希斯洛普《岛》</li>\n<li>斯蒂芬·金《肖申克的救赎》</li>\n<li>圣·德克旭贝里《小王子》</li>\n<li>泰戈尔《飞鸟集》</li>\n<li>村上村树《挪威的森林》</li>\n<li>村上村树《国境以南，太阳以西》</li>\n<li>川端康成《伊豆的舞女》</li>\n<li>川端康成《雪国》</li>\n<li>保罗·格雷厄姆《黑客与画家》</li>\n</ul>\n<h2 id=\"国内\"><a href=\"#国内\" class=\"headerlink\" title=\"国内\"></a>国内</h2><ul>\n<li>唐玄奘《心经》</li>\n<li>鸠摩罗什《金刚经》</li>\n<li>王羽《鬼谷子》</li>\n<li>孙武《孙子兵法》</li>\n<li>蒲松龄《聊斋志异》</li>\n<li>张爱玲《半生缘》</li>\n<li>张爱玲《倾城之恋》</li>\n<li>张爱玲《茉莉香片》</li>\n<li>张爱玲《霸王别姬》</li>\n<li>鲁迅《鲁迅文集》</li>\n<li>沈从文《边城》</li>\n<li>三毛《撒哈拉的故事》</li>\n<li>三毛《三毛作品集》</li>\n<li>龙应台《目送》</li>\n<li>吴念真《这些人，那些事》</li>\n<li>余华《活着》</li>\n<li>路遥《平凡的世界》</li>\n<li>余秋雨《山居笔记》</li>\n<li>李可《杜拉拉升职记》</li>\n<li>艾米《山楂树之恋》</li>\n<li></li>\n</ul>\n<h2 id=\"没读完的书\"><a href=\"#没读完的书\" class=\"headerlink\" title=\"没读完的书\"></a>没读完的书</h2><ul>\n<li>安徒生《安徒生童话集》</li>\n<li>大仲马《基督山伯爵》</li>\n<li>史蒂芬·霍金《时间简史》</li>\n<li>原研哉《设计中的设计》</li>\n<li>莫提默·J. 艾德勒《如何阅读一本书》</li>\n<li>龙应台《亲爱的安德烈》</li>\n<li>玛格丽特·米切尔《飘》</li>\n<li>夏洛蒂·勃朗特《简·爱》</li>\n<li>泰戈尔《吉檀迦利》</li>\n<li>曹雪芹《红楼梦》</li>\n<li>罗贯中《三国演义》</li>\n<li>施耐庵，罗贯中《水浒传》</li>\n</ul>\n"},{"title":"使用forever来持久运行node.js应用","date":"2023-11-15T13:21:43.527Z","updated":"2023-11-15T13:21:43.527Z","_content":"\n\n本网站不够稳定，经常莫名其妙的node.js进程退出，（相比之下java服务稳得像狗一样）然后不得不登录在启动服务；\n\n## forever.js\n[https://github.com/foreversd/forever](https://github.com/foreversd/forever)\n\n所以我就使用forever.js来持久运行我的应用；\n\n安装forever\n```\nnpm install forever -g\n```\n\n进入项目文件中\n```\nforever start app.js\n```\n\n再说一下其他简单的命令\n列出forever启动的应用\n```\nforever list\n```\n结束forever启动的应用\n```\nforever stop app.js\n```\n\n### 最后\n别忘了使用nohup命令，\n```\nnohup forever start app.js &\n```\nexit 退出shell，不要点关闭按钮，否则用户的进程都会死掉的\n```\nexit\n```","source":"_posts/use-forever.md","raw":"---\ntitle: 使用forever来持久运行node.js应用\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n\n本网站不够稳定，经常莫名其妙的node.js进程退出，（相比之下java服务稳得像狗一样）然后不得不登录在启动服务；\n\n## forever.js\n[https://github.com/foreversd/forever](https://github.com/foreversd/forever)\n\n所以我就使用forever.js来持久运行我的应用；\n\n安装forever\n```\nnpm install forever -g\n```\n\n进入项目文件中\n```\nforever start app.js\n```\n\n再说一下其他简单的命令\n列出forever启动的应用\n```\nforever list\n```\n结束forever启动的应用\n```\nforever stop app.js\n```\n\n### 最后\n别忘了使用nohup命令，\n```\nnohup forever start app.js &\n```\nexit 退出shell，不要点关闭按钮，否则用户的进程都会死掉的\n```\nexit\n```","slug":"use-forever","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000dfm5yda5e3c2h","content":"<p>本网站不够稳定，经常莫名其妙的node.js进程退出，（相比之下java服务稳得像狗一样）然后不得不登录在启动服务；</p>\n<h2 id=\"forever-js\"><a href=\"#forever-js\" class=\"headerlink\" title=\"forever.js\"></a>forever.js</h2><p><a href=\"https://github.com/foreversd/forever\">https://github.com/foreversd/forever</a></p>\n<p>所以我就使用forever.js来持久运行我的应用；</p>\n<p>安装forever</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n\n<p>进入项目文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever start app.js</span><br></pre></td></tr></table></figure>\n\n<p>再说一下其他简单的命令<br>列出forever启动的应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever list</span><br></pre></td></tr></table></figure>\n<p>结束forever启动的应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever stop app.js</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>别忘了使用nohup命令，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup forever start app.js &amp;</span><br></pre></td></tr></table></figure>\n<p>exit 退出shell，不要点关闭按钮，否则用户的进程都会死掉的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>本网站不够稳定，经常莫名其妙的node.js进程退出，（相比之下java服务稳得像狗一样）然后不得不登录在启动服务；</p>\n<h2 id=\"forever-js\"><a href=\"#forever-js\" class=\"headerlink\" title=\"forever.js\"></a>forever.js</h2><p><a href=\"https://github.com/foreversd/forever\">https://github.com/foreversd/forever</a></p>\n<p>所以我就使用forever.js来持久运行我的应用；</p>\n<p>安装forever</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n\n<p>进入项目文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever start app.js</span><br></pre></td></tr></table></figure>\n\n<p>再说一下其他简单的命令<br>列出forever启动的应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever list</span><br></pre></td></tr></table></figure>\n<p>结束forever启动的应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever stop app.js</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>别忘了使用nohup命令，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup forever start app.js &amp;</span><br></pre></td></tr></table></figure>\n<p>exit 退出shell，不要点关闭按钮，否则用户的进程都会死掉的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>"},{"title":"网站打不开的问题排查经验","date":"2023-11-15T13:21:43.527Z","updated":"2023-11-15T13:21:43.527Z","_content":"\n自从vps到期之后网站就打不开，正常启动，但是本地就是访问不了。\n\n## 排查\nping 得通不，是不是不幸被墙了\n服务启动正常吗\n使用ip访问看看，是不是域名解析问题\n查看服务监听的是哪个端口\n是不是vps关闭了80端口\n\n## 结果\n是vps关闭了80端口，接下要做的是就是打开80端口了。但是不要关闭防火墙功能，这样不推荐。\n\n\n## 打开80端口\n\n方法一、编辑 ```etc/sysconfig/iptables```文件\n\n```vi etc/sysconfig/iptables```\n\n在最后面新加一行\n\n\n```-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT```\n\n重启 iptables 服务\n\n\n```service iptables restart```\n\n方法二、iptables 配置规则\n\n```ptables -I INPUT -p tcp --dport 3030 -j ACCEPT```\n\n\n```service iptables save```\n\n重启 iptables 服务\n\n\n```service iptables restart```","source":"_posts/website-unuse.md","raw":"---\ntitle: 网站打不开的问题排查经验\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n自从vps到期之后网站就打不开，正常启动，但是本地就是访问不了。\n\n## 排查\nping 得通不，是不是不幸被墙了\n服务启动正常吗\n使用ip访问看看，是不是域名解析问题\n查看服务监听的是哪个端口\n是不是vps关闭了80端口\n\n## 结果\n是vps关闭了80端口，接下要做的是就是打开80端口了。但是不要关闭防火墙功能，这样不推荐。\n\n\n## 打开80端口\n\n方法一、编辑 ```etc/sysconfig/iptables```文件\n\n```vi etc/sysconfig/iptables```\n\n在最后面新加一行\n\n\n```-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT```\n\n重启 iptables 服务\n\n\n```service iptables restart```\n\n方法二、iptables 配置规则\n\n```ptables -I INPUT -p tcp --dport 3030 -j ACCEPT```\n\n\n```service iptables save```\n\n重启 iptables 服务\n\n\n```service iptables restart```","slug":"website-unuse","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000efm5yb7mjhdn7","content":"<p>自从vps到期之后网站就打不开，正常启动，但是本地就是访问不了。</p>\n<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>ping 得通不，是不是不幸被墙了<br>服务启动正常吗<br>使用ip访问看看，是不是域名解析问题<br>查看服务监听的是哪个端口<br>是不是vps关闭了80端口</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>是vps关闭了80端口，接下要做的是就是打开80端口了。但是不要关闭防火墙功能，这样不推荐。</p>\n<h2 id=\"打开80端口\"><a href=\"#打开80端口\" class=\"headerlink\" title=\"打开80端口\"></a>打开80端口</h2><p>方法一、编辑 <code>etc/sysconfig/iptables</code>文件</p>\n<p><code>vi etc/sysconfig/iptables</code></p>\n<p>在最后面新加一行</p>\n<p><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></p>\n<p>重启 iptables 服务</p>\n<p><code>service iptables restart</code></p>\n<p>方法二、iptables 配置规则</p>\n<p><code>ptables -I INPUT -p tcp --dport 3030 -j ACCEPT</code></p>\n<p><code>service iptables save</code></p>\n<p>重启 iptables 服务</p>\n<p><code>service iptables restart</code></p>\n","excerpt":"","more":"<p>自从vps到期之后网站就打不开，正常启动，但是本地就是访问不了。</p>\n<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>ping 得通不，是不是不幸被墙了<br>服务启动正常吗<br>使用ip访问看看，是不是域名解析问题<br>查看服务监听的是哪个端口<br>是不是vps关闭了80端口</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>是vps关闭了80端口，接下要做的是就是打开80端口了。但是不要关闭防火墙功能，这样不推荐。</p>\n<h2 id=\"打开80端口\"><a href=\"#打开80端口\" class=\"headerlink\" title=\"打开80端口\"></a>打开80端口</h2><p>方法一、编辑 <code>etc/sysconfig/iptables</code>文件</p>\n<p><code>vi etc/sysconfig/iptables</code></p>\n<p>在最后面新加一行</p>\n<p><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></p>\n<p>重启 iptables 服务</p>\n<p><code>service iptables restart</code></p>\n<p>方法二、iptables 配置规则</p>\n<p><code>ptables -I INPUT -p tcp --dport 3030 -j ACCEPT</code></p>\n<p><code>service iptables save</code></p>\n<p>重启 iptables 服务</p>\n<p><code>service iptables restart</code></p>\n"},{"title":"WebSocket协议介绍","date":"2023-11-15T13:21:43.527Z","updated":"2023-11-15T13:21:43.528Z","_content":"\n# WebSocket协议\n\n## 一、内容概览\nWebSocket的出现，使得浏览器具备了实时双向通信的能力。\n\n## 二、什么是WebSocket\nHTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。\n\n对大部分web开发者来说，上面这段描述有点枯燥，其实只要记住几点：\n\n* WebSocket可以在浏览器里使用\n* 支持双向通信\n* 使用很简单\n\n#### 1、有哪些优点\n说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。\n\n* 支持双向通信，实时性更强。\n* 更好的二进制支持。\n* 较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。\n* 支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）\n对于后面两点，没有研究过WebSocket协议规范的同学可能理解起来不够直观，但不影响对WebSocket的学习和使用。\n\n\n\n## 三、入门例子\n在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了WebSocket服务端、WebSocket客户端（网页端）。完整代码可以在 这里 找到。\n\n这里服务端用了ws这个库。相比大家熟悉的socket.io，ws实现更轻量，更适合学习的目的。\n\n#### 1、服务端\n代码如下，监听8080端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。\n``` javascript\nvar app = require('express')();\nvar server = require('http').Server(app);\nvar WebSocket = require('ws');\n\nvar wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n    console.log('server: receive connection.');\n    \n    ws.on('message', function incoming(message) {\n        console.log('server: received: %s', message);\n    });\n\n    ws.send('world');\n});\n\napp.get('/', function (req, res) {\n  res.sendfile(__dirname + '/index.html');\n});\n\napp.listen(3000);\n```\n#### 2、客户端\n代码如下，向8080端口发起WebSocket连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。\n``` javascript\n  var ws = new WebSocket('ws://localhost:8080');\n  ws.onopen = function () {\n    console.log('ws onopen');\n    ws.send('from client: hello');\n  };\n  ws.onmessage = function (e) {\n    console.log('ws onmessage');\n    console.log('from server: ' + e.data);\n  };\n\n```\n#### 3、运行结果\n可分别查看服务端、客户端的日志，这里不展开。\n\n``` bash\n服务端输出：\n\nserver: receive connection.\nserver: received hello\n客户端输出：\n\nclient: ws connection is open\nclient: received world\n```\n## 四、如何建立连接\n前面提到，WebSocket复用了HTTP的握手通道。具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。\n\n#### 1、客户端：申请协议升级\n首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持GET方法。\n```\nGET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n```\n重点请求首部意义如下：\n\n* Connection: Upgrade：表示要升级协议\n* Upgrade: websocket：表示要升级到websocket协议。\n* Sec-WebSocket-Version: 13：表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。\n* Sec-WebSocket-Key：与后面服务端响应首部的Sec-WebSocket-Accept是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。\n\n> 注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。\n\n#### 2、服务端：响应协议升级\n服务端返回内容如下，状态代码101表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。\n\n```\nHTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```\n\n> 备注：每个header都以\\\\r\\\\n结尾，并且最后一行加上一个额外的空行\\\\r\\\\n。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。\n\n#### 3、Sec-WebSocket-Accept的计算\nSec-WebSocket-Accept根据客户端请求首部的Sec-WebSocket-Key计算出来。\n\n计算公式为：\n\n将Sec-WebSocket-Key跟258EAFA5-E914-47DA-95CA-C5AB0DC85B11拼接。\n通过SHA1计算出摘要，并转成base64字符串。\n伪代码如下：\n\n>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )\n验证下前面的返回结果：\n\n``` javascript\nconst crypto = require('crypto');\nconst magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nconst secWebSocketKey = 'w4v7O6xFTi36lq3RNcgctw==';\n\nlet secWebSocketAccept = crypto.createHash('sha1')\n    .update(secWebSocketKey + magic)\n    .digest('base64');\n\nconsole.log(secWebSocketAccept);\n// Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```","source":"_posts/websocket.md","raw":"---\ntitle: WebSocket协议介绍\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\n---\n\n# WebSocket协议\n\n## 一、内容概览\nWebSocket的出现，使得浏览器具备了实时双向通信的能力。\n\n## 二、什么是WebSocket\nHTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。\n\n对大部分web开发者来说，上面这段描述有点枯燥，其实只要记住几点：\n\n* WebSocket可以在浏览器里使用\n* 支持双向通信\n* 使用很简单\n\n#### 1、有哪些优点\n说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。\n\n* 支持双向通信，实时性更强。\n* 更好的二进制支持。\n* 较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。\n* 支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）\n对于后面两点，没有研究过WebSocket协议规范的同学可能理解起来不够直观，但不影响对WebSocket的学习和使用。\n\n\n\n## 三、入门例子\n在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了WebSocket服务端、WebSocket客户端（网页端）。完整代码可以在 这里 找到。\n\n这里服务端用了ws这个库。相比大家熟悉的socket.io，ws实现更轻量，更适合学习的目的。\n\n#### 1、服务端\n代码如下，监听8080端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。\n``` javascript\nvar app = require('express')();\nvar server = require('http').Server(app);\nvar WebSocket = require('ws');\n\nvar wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n    console.log('server: receive connection.');\n    \n    ws.on('message', function incoming(message) {\n        console.log('server: received: %s', message);\n    });\n\n    ws.send('world');\n});\n\napp.get('/', function (req, res) {\n  res.sendfile(__dirname + '/index.html');\n});\n\napp.listen(3000);\n```\n#### 2、客户端\n代码如下，向8080端口发起WebSocket连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。\n``` javascript\n  var ws = new WebSocket('ws://localhost:8080');\n  ws.onopen = function () {\n    console.log('ws onopen');\n    ws.send('from client: hello');\n  };\n  ws.onmessage = function (e) {\n    console.log('ws onmessage');\n    console.log('from server: ' + e.data);\n  };\n\n```\n#### 3、运行结果\n可分别查看服务端、客户端的日志，这里不展开。\n\n``` bash\n服务端输出：\n\nserver: receive connection.\nserver: received hello\n客户端输出：\n\nclient: ws connection is open\nclient: received world\n```\n## 四、如何建立连接\n前面提到，WebSocket复用了HTTP的握手通道。具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。\n\n#### 1、客户端：申请协议升级\n首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持GET方法。\n```\nGET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n```\n重点请求首部意义如下：\n\n* Connection: Upgrade：表示要升级协议\n* Upgrade: websocket：表示要升级到websocket协议。\n* Sec-WebSocket-Version: 13：表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。\n* Sec-WebSocket-Key：与后面服务端响应首部的Sec-WebSocket-Accept是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。\n\n> 注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。\n\n#### 2、服务端：响应协议升级\n服务端返回内容如下，状态代码101表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。\n\n```\nHTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```\n\n> 备注：每个header都以\\\\r\\\\n结尾，并且最后一行加上一个额外的空行\\\\r\\\\n。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。\n\n#### 3、Sec-WebSocket-Accept的计算\nSec-WebSocket-Accept根据客户端请求首部的Sec-WebSocket-Key计算出来。\n\n计算公式为：\n\n将Sec-WebSocket-Key跟258EAFA5-E914-47DA-95CA-C5AB0DC85B11拼接。\n通过SHA1计算出摘要，并转成base64字符串。\n伪代码如下：\n\n>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )\n验证下前面的返回结果：\n\n``` javascript\nconst crypto = require('crypto');\nconst magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nconst secWebSocketKey = 'w4v7O6xFTi36lq3RNcgctw==';\n\nlet secWebSocketAccept = crypto.createHash('sha1')\n    .update(secWebSocketKey + magic)\n    .digest('base64');\n\nconsole.log(secWebSocketAccept);\n// Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n```","slug":"websocket","published":1,"comments":1,"layout":"post","photos":[],"_id":"clyv6u0w2000ffm5y56nlavqo","content":"<h1 id=\"WebSocket协议\"><a href=\"#WebSocket协议\" class=\"headerlink\" title=\"WebSocket协议\"></a>WebSocket协议</h1><h2 id=\"一、内容概览\"><a href=\"#一、内容概览\" class=\"headerlink\" title=\"一、内容概览\"></a>一、内容概览</h2><p>WebSocket的出现，使得浏览器具备了实时双向通信的能力。</p>\n<h2 id=\"二、什么是WebSocket\"><a href=\"#二、什么是WebSocket\" class=\"headerlink\" title=\"二、什么是WebSocket\"></a>二、什么是WebSocket</h2><p>HTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。</p>\n<p>对大部分web开发者来说，上面这段描述有点枯燥，其实只要记住几点：</p>\n<ul>\n<li>WebSocket可以在浏览器里使用</li>\n<li>支持双向通信</li>\n<li>使用很简单</li>\n</ul>\n<h4 id=\"1、有哪些优点\"><a href=\"#1、有哪些优点\" class=\"headerlink\" title=\"1、有哪些优点\"></a>1、有哪些优点</h4><p>说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。</p>\n<ul>\n<li>支持双向通信，实时性更强。</li>\n<li>更好的二进制支持。</li>\n<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>\n<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）<br>对于后面两点，没有研究过WebSocket协议规范的同学可能理解起来不够直观，但不影响对WebSocket的学习和使用。</li>\n</ul>\n<h2 id=\"三、入门例子\"><a href=\"#三、入门例子\" class=\"headerlink\" title=\"三、入门例子\"></a>三、入门例子</h2><p>在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了WebSocket服务端、WebSocket客户端（网页端）。完整代码可以在 这里 找到。</p>\n<p>这里服务端用了ws这个库。相比大家熟悉的socket.io，ws实现更轻量，更适合学习的目的。</p>\n<h4 id=\"1、服务端\"><a href=\"#1、服务端\" class=\"headerlink\" title=\"1、服务端\"></a>1、服务端</h4><p>代码如下，监听8080端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>).<span class=\"title class_\">Server</span>(app);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">WebSocket</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ws&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wss = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>.<span class=\"title class_\">Server</span>(&#123; <span class=\"attr\">port</span>: <span class=\"number\">8080</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wss.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">connection</span>(<span class=\"params\">ws</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server: receive connection.&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ws.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">incoming</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server: received: %s&#x27;</span>, message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ws.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendfile</span>(__dirname + <span class=\"string\">&#x27;/index.html&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、客户端\"><a href=\"#2、客户端\" class=\"headerlink\" title=\"2、客户端\"></a>2、客户端</h4><p>代码如下，向8080端口发起WebSocket连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ws onopen&#x27;</span>);</span><br><span class=\"line\">  ws.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;from client: hello&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ws onmessage&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;from server: &#x27;</span> + e.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3、运行结果\"><a href=\"#3、运行结果\" class=\"headerlink\" title=\"3、运行结果\"></a>3、运行结果</h4><p>可分别查看服务端、客户端的日志，这里不展开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端输出：</span><br><span class=\"line\"></span><br><span class=\"line\">server: receive connection.</span><br><span class=\"line\">server: received hello</span><br><span class=\"line\">客户端输出：</span><br><span class=\"line\"></span><br><span class=\"line\">client: ws connection is open</span><br><span class=\"line\">client: received world</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、如何建立连接\"><a href=\"#四、如何建立连接\" class=\"headerlink\" title=\"四、如何建立连接\"></a>四、如何建立连接</h2><p>前面提到，WebSocket复用了HTTP的握手通道。具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。</p>\n<h4 id=\"1、客户端：申请协议升级\"><a href=\"#1、客户端：申请协议升级\" class=\"headerlink\" title=\"1、客户端：申请协议升级\"></a>1、客户端：申请协议升级</h4><p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持GET方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: localhost:8080</span><br><span class=\"line\">Origin: http://127.0.0.1:3000</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br><span class=\"line\">Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</span><br></pre></td></tr></table></figure>\n<p>重点请求首部意义如下：</p>\n<ul>\n<li>Connection: Upgrade：表示要升级协议</li>\n<li>Upgrade: websocket：表示要升级到websocket协议。</li>\n<li>Sec-WebSocket-Version: 13：表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。</li>\n<li>Sec-WebSocket-Key：与后面服务端响应首部的Sec-WebSocket-Accept是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。</li>\n</ul>\n<blockquote>\n<p>注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</p>\n</blockquote>\n<h4 id=\"2、服务端：响应协议升级\"><a href=\"#2、服务端：响应协议升级\" class=\"headerlink\" title=\"2、服务端：响应协议升级\"></a>2、服务端：响应协议升级</h4><p>服务端返回内容如下，状态代码101表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Connection:Upgrade</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>备注：每个header都以\\r\\n结尾，并且最后一行加上一个额外的空行\\r\\n。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。</p>\n</blockquote>\n<h4 id=\"3、Sec-WebSocket-Accept的计算\"><a href=\"#3、Sec-WebSocket-Accept的计算\" class=\"headerlink\" title=\"3、Sec-WebSocket-Accept的计算\"></a>3、Sec-WebSocket-Accept的计算</h4><p>Sec-WebSocket-Accept根据客户端请求首部的Sec-WebSocket-Key计算出来。</p>\n<p>计算公式为：</p>\n<p>将Sec-WebSocket-Key跟258EAFA5-E914-47DA-95CA-C5AB0DC85B11拼接。<br>通过SHA1计算出摘要，并转成base64字符串。<br>伪代码如下：</p>\n<blockquote>\n<p>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )<br>验证下前面的返回结果：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> magic = <span class=\"string\">&#x27;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> secWebSocketKey = <span class=\"string\">&#x27;w4v7O6xFTi36lq3RNcgctw==&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> secWebSocketAccept = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha1&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">update</span>(secWebSocketKey + magic)</span><br><span class=\"line\">    .<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;base64&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(secWebSocketAccept);</span><br><span class=\"line\"><span class=\"comment\">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"WebSocket协议\"><a href=\"#WebSocket协议\" class=\"headerlink\" title=\"WebSocket协议\"></a>WebSocket协议</h1><h2 id=\"一、内容概览\"><a href=\"#一、内容概览\" class=\"headerlink\" title=\"一、内容概览\"></a>一、内容概览</h2><p>WebSocket的出现，使得浏览器具备了实时双向通信的能力。</p>\n<h2 id=\"二、什么是WebSocket\"><a href=\"#二、什么是WebSocket\" class=\"headerlink\" title=\"二、什么是WebSocket\"></a>二、什么是WebSocket</h2><p>HTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。</p>\n<p>对大部分web开发者来说，上面这段描述有点枯燥，其实只要记住几点：</p>\n<ul>\n<li>WebSocket可以在浏览器里使用</li>\n<li>支持双向通信</li>\n<li>使用很简单</li>\n</ul>\n<h4 id=\"1、有哪些优点\"><a href=\"#1、有哪些优点\" class=\"headerlink\" title=\"1、有哪些优点\"></a>1、有哪些优点</h4><p>说到优点，这里的对比参照物是HTTP协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。</p>\n<ul>\n<li>支持双向通信，实时性更强。</li>\n<li>更好的二进制支持。</li>\n<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>\n<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）<br>对于后面两点，没有研究过WebSocket协议规范的同学可能理解起来不够直观，但不影响对WebSocket的学习和使用。</li>\n</ul>\n<h2 id=\"三、入门例子\"><a href=\"#三、入门例子\" class=\"headerlink\" title=\"三、入门例子\"></a>三、入门例子</h2><p>在正式介绍协议细节前，先来看一个简单的例子，有个直观感受。例子包括了WebSocket服务端、WebSocket客户端（网页端）。完整代码可以在 这里 找到。</p>\n<p>这里服务端用了ws这个库。相比大家熟悉的socket.io，ws实现更轻量，更适合学习的目的。</p>\n<h4 id=\"1、服务端\"><a href=\"#1、服务端\" class=\"headerlink\" title=\"1、服务端\"></a>1、服务端</h4><p>代码如下，监听8080端口。当有新的连接请求到达时，打印日志，同时向客户端发送消息。当收到到来自客户端的消息时，同样打印日志。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>).<span class=\"title class_\">Server</span>(app);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">WebSocket</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ws&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wss = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>.<span class=\"title class_\">Server</span>(&#123; <span class=\"attr\">port</span>: <span class=\"number\">8080</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wss.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">connection</span>(<span class=\"params\">ws</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server: receive connection.&#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ws.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">incoming</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server: received: %s&#x27;</span>, message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ws.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendfile</span>(__dirname + <span class=\"string\">&#x27;/index.html&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、客户端\"><a href=\"#2、客户端\" class=\"headerlink\" title=\"2、客户端\"></a>2、客户端</h4><p>代码如下，向8080端口发起WebSocket连接。连接建立后，打印日志，同时向服务端发送消息。接收到来自服务端的消息后，同样打印日志。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class=\"line\">ws.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ws onopen&#x27;</span>);</span><br><span class=\"line\">  ws.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;from client: hello&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ws.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ws onmessage&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;from server: &#x27;</span> + e.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3、运行结果\"><a href=\"#3、运行结果\" class=\"headerlink\" title=\"3、运行结果\"></a>3、运行结果</h4><p>可分别查看服务端、客户端的日志，这里不展开。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端输出：</span><br><span class=\"line\"></span><br><span class=\"line\">server: receive connection.</span><br><span class=\"line\">server: received hello</span><br><span class=\"line\">客户端输出：</span><br><span class=\"line\"></span><br><span class=\"line\">client: ws connection is open</span><br><span class=\"line\">client: received world</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、如何建立连接\"><a href=\"#四、如何建立连接\" class=\"headerlink\" title=\"四、如何建立连接\"></a>四、如何建立连接</h2><p>前面提到，WebSocket复用了HTTP的握手通道。具体指的是，客户端通过HTTP请求与WebSocket服务端协商升级协议。协议升级完成后，后续的数据交换则遵照WebSocket的协议。</p>\n<h4 id=\"1、客户端：申请协议升级\"><a href=\"#1、客户端：申请协议升级\" class=\"headerlink\" title=\"1、客户端：申请协议升级\"></a>1、客户端：申请协议升级</h4><p>首先，客户端发起协议升级请求。可以看到，采用的是标准的HTTP报文格式，且只支持GET方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: localhost:8080</span><br><span class=\"line\">Origin: http://127.0.0.1:3000</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br><span class=\"line\">Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</span><br></pre></td></tr></table></figure>\n<p>重点请求首部意义如下：</p>\n<ul>\n<li>Connection: Upgrade：表示要升级协议</li>\n<li>Upgrade: websocket：表示要升级到websocket协议。</li>\n<li>Sec-WebSocket-Version: 13：表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。</li>\n<li>Sec-WebSocket-Key：与后面服务端响应首部的Sec-WebSocket-Accept是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。</li>\n</ul>\n<blockquote>\n<p>注意，上面请求省略了部分非重点请求首部。由于是标准的HTTP请求，类似Host、Origin、Cookie等请求首部会照常发送。在握手阶段，可以通过相关请求首部进行 安全限制、权限校验等。</p>\n</blockquote>\n<h4 id=\"2、服务端：响应协议升级\"><a href=\"#2、服务端：响应协议升级\" class=\"headerlink\" title=\"2、服务端：响应协议升级\"></a>2、服务端：响应协议升级</h4><p>服务端返回内容如下，状态代码101表示协议切换。到此完成协议升级，后续的数据交互都按照新的协议来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 101 Switching Protocols</span><br><span class=\"line\">Connection:Upgrade</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>备注：每个header都以\\r\\n结尾，并且最后一行加上一个额外的空行\\r\\n。此外，服务端回应的HTTP状态码只能在握手阶段使用。过了握手阶段后，就只能采用特定的错误码。</p>\n</blockquote>\n<h4 id=\"3、Sec-WebSocket-Accept的计算\"><a href=\"#3、Sec-WebSocket-Accept的计算\" class=\"headerlink\" title=\"3、Sec-WebSocket-Accept的计算\"></a>3、Sec-WebSocket-Accept的计算</h4><p>Sec-WebSocket-Accept根据客户端请求首部的Sec-WebSocket-Key计算出来。</p>\n<p>计算公式为：</p>\n<p>将Sec-WebSocket-Key跟258EAFA5-E914-47DA-95CA-C5AB0DC85B11拼接。<br>通过SHA1计算出摘要，并转成base64字符串。<br>伪代码如下：</p>\n<blockquote>\n<p>toBase64( sha1( Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 )  )<br>验证下前面的返回结果：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> magic = <span class=\"string\">&#x27;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> secWebSocketKey = <span class=\"string\">&#x27;w4v7O6xFTi36lq3RNcgctw==&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> secWebSocketAccept = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha1&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">update</span>(secWebSocketKey + magic)</span><br><span class=\"line\">    .<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;base64&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(secWebSocketAccept);</span><br><span class=\"line\"><span class=\"comment\">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}